
conc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b23c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c18  0800b40c  0800b40c  0001b40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d024  0800d024  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800d024  0800d024  0001d024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d02c  0800d02c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d02c  0800d02c  0001d02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d030  0800d030  0001d030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800d034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d7c  20000200  0800d234  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005f7c  0800d234  00025f7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c527  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d0c  00000000  00000000  0003c757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00041468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00042c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afb3  00000000  00000000  000441f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f98d  00000000  00000000  0006f1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa262  00000000  00000000  0008eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188d92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006318  00000000  00000000  00188de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b3f4 	.word	0x0800b3f4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800b3f4 	.word	0x0800b3f4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fcfd 	bl	8000f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f80c 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8a2 	bl	8000668 <MX_GPIO_Init>
  //MX_USB_DEVICE_Init();
  MX_CRC_Init();
 8000524:	f000 f874 	bl	8000610 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  Start_USB_cmd_tasks();
 8000528:	f000 fbd4 	bl	8000cd4 <Start_USB_cmd_tasks>
  Start_UARTrx_tasks();
 800052c:	f000 fa58 	bl	80009e0 <Start_UARTrx_tasks>

  vTaskStartScheduler();
 8000530:	f006 fc26 	bl	8006d80 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x20>
	...

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f00a fe4e 	bl	800b1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <SystemClock_Config+0xd0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a29      	ldr	r2, [pc, #164]	; (8000608 <SystemClock_Config+0xd0>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <SystemClock_Config+0xd0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	4b25      	ldr	r3, [pc, #148]	; (800060c <SystemClock_Config+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a24      	ldr	r2, [pc, #144]	; (800060c <SystemClock_Config+0xd4>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000590:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80005a4:	23d8      	movs	r3, #216	; 0xd8
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80005ac:	2309      	movs	r3, #9
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fba3 	bl	8002d00 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005c0:	f000 f8fa 	bl	80007b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005c4:	f002 fb4c 	bl	8002c60 <HAL_PWREx_EnableOverDrive>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ce:	f000 f8f3 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2107      	movs	r1, #7
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fe29 	bl	8003248 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005fc:	f000 f8dc 	bl	80007b8 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_CRC_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MX_CRC_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_CRC_Init+0x50>)
 800061c:	2208      	movs	r2, #8
 800061e:	60da      	str	r2, [r3, #12]
  hcrc.Init.GeneratingPolynomial    = 0x8005;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_CRC_Init+0x50>)
 8000622:	f248 0205 	movw	r2, #32773	; 0x8005
 8000626:	609a      	str	r2, [r3, #8]
  hcrc.Init.DefaultInitValueUse = 0;
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <MX_CRC_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	715a      	strb	r2, [r3, #5]

  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_CRC_Init+0x50>)
 8000630:	2201      	movs	r2, #1
 8000632:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_CRC_Init+0x50>)
 8000636:	2201      	movs	r2, #1
 8000638:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_CRC_Init+0x50>)
 800063c:	2220      	movs	r2, #32
 800063e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_CRC_Init+0x50>)
 8000642:	2280      	movs	r2, #128	; 0x80
 8000644:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_CRC_Init+0x50>)
 8000648:	2201      	movs	r2, #1
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_CRC_Init+0x50>)
 800064e:	f000 fd95 	bl	800117c <HAL_CRC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_CRC_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f8ae 	bl	80007b8 <Error_Handler>
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;*/
  /* USER CODE END CRC_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000021c 	.word	0x2000021c
 8000664:	40023000 	.word	0x40023000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b41      	ldr	r3, [pc, #260]	; (8000784 <MX_GPIO_Init+0x11c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a40      	ldr	r2, [pc, #256]	; (8000784 <MX_GPIO_Init+0x11c>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b3e      	ldr	r3, [pc, #248]	; (8000784 <MX_GPIO_Init+0x11c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0304 	and.w	r3, r3, #4
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <MX_GPIO_Init+0x11c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <MX_GPIO_Init+0x11c>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b38      	ldr	r3, [pc, #224]	; (8000784 <MX_GPIO_Init+0x11c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <MX_GPIO_Init+0x11c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a34      	ldr	r2, [pc, #208]	; (8000784 <MX_GPIO_Init+0x11c>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b32      	ldr	r3, [pc, #200]	; (8000784 <MX_GPIO_Init+0x11c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c6:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <MX_GPIO_Init+0x11c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a2e      	ldr	r2, [pc, #184]	; (8000784 <MX_GPIO_Init+0x11c>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <MX_GPIO_Init+0x11c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_GPIO_Init+0x11c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a28      	ldr	r2, [pc, #160]	; (8000784 <MX_GPIO_Init+0x11c>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_GPIO_Init+0x11c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80006fc:	4822      	ldr	r0, [pc, #136]	; (8000788 <MX_GPIO_Init+0x120>)
 80006fe:	f001 f8e7 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	4821      	ldr	r0, [pc, #132]	; (800078c <MX_GPIO_Init+0x124>)
 8000708:	f001 f8e2 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000712:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4619      	mov	r1, r3
 8000722:	481b      	ldr	r0, [pc, #108]	; (8000790 <MX_GPIO_Init+0x128>)
 8000724:	f000 ff28 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000728:	f244 0381 	movw	r3, #16513	; 0x4081
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	4811      	ldr	r0, [pc, #68]	; (8000788 <MX_GPIO_Init+0x120>)
 8000742:	f000 ff19 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000746:	2340      	movs	r3, #64	; 0x40
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <MX_GPIO_Init+0x124>)
 800075e:	f000 ff0b 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_GPIO_Init+0x124>)
 8000776:	f000 feff 	bl	8001578 <HAL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40020400 	.word	0x40020400
 800078c:	40021800 	.word	0x40021800
 8000790:	40020800 	.word	0x40020800

08000794 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d101      	bne.n	80007aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a6:	f000 fbc3 	bl	8000f30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40010000 	.word	0x40010000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_MspInit+0x44>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_MspInit+0x44>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_MspInit+0x44>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_MspInit+0x44>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_MspInit+0x44>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_CRC_MspInit+0x38>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d10b      	bne.n	8000836 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_CRC_MspInit+0x3c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a09      	ldr	r2, [pc, #36]	; (8000848 <HAL_CRC_MspInit+0x3c>)
 8000824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <HAL_CRC_MspInit+0x3c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023000 	.word	0x40023000
 8000848:	40023800 	.word	0x40023800

0800084c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08c      	sub	sp, #48	; 0x30
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	2019      	movs	r0, #25
 8000862:	f000 fc61 	bl	8001128 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000866:	2019      	movs	r0, #25
 8000868:	f000 fc7a 	bl	8001160 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <HAL_InitTick+0xa0>)
 800086e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000870:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <HAL_InitTick+0xa0>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	6453      	str	r3, [r2, #68]	; 0x44
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <HAL_InitTick+0xa0>)
 800087a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000884:	f107 0210 	add.w	r2, r7, #16
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f002 feec 	bl	800366c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000894:	f002 fed6 	bl	8003644 <HAL_RCC_GetPCLK2Freq>
 8000898:	4603      	mov	r3, r0
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a0:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <HAL_InitTick+0xa4>)
 80008a2:	fba2 2303 	umull	r2, r3, r2, r3
 80008a6:	0c9b      	lsrs	r3, r3, #18
 80008a8:	3b01      	subs	r3, #1
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_InitTick+0xa8>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <HAL_InitTick+0xac>)
 80008b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_InitTick+0xa8>)
 80008b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_InitTick+0xa8>)
 80008bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008be:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_InitTick+0xa8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_InitTick+0xa8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <HAL_InitTick+0xa8>)
 80008ce:	f003 faef 	bl	8003eb0 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d104      	bne.n	80008e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008d8:	4806      	ldr	r0, [pc, #24]	; (80008f4 <HAL_InitTick+0xa8>)
 80008da:	f003 fb4b 	bl	8003f74 <HAL_TIM_Base_Start_IT>
 80008de:	4603      	mov	r3, r0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3730      	adds	r7, #48	; 0x30
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	431bde83 	.word	0x431bde83
 80008f4:	20000240 	.word	0x20000240
 80008f8:	40010000 	.word	0x40010000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800092e:	f003 fb99 	bl	8004064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000240 	.word	0x20000240

0800093c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <OTG_FS_IRQHandler+0x10>)
 8000942:	f001 f924 	bl	8001b8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20005b68 	.word	0x20005b68

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f00a fbea 	bl	800b158 <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20050000 	.word	0x20050000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	2000028c 	.word	0x2000028c
 80009b8:	20005f80 	.word	0x20005f80

080009bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Start_UARTrx_tasks>:

static void vScanChannelsTask(void *params);
static void vAccDastaJoinerTask(void *params);
static void timerCB(TimerHandle_t xTimer);

void Start_UARTrx_tasks() {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af02      	add	r7, sp, #8

	const unsigned portBASE_TYPE uxQueueLength = 120;
 80009e6:	2378      	movs	r3, #120	; 0x78
 80009e8:	607b      	str	r3, [r7, #4]
	xSerialRxQueue = xQueueCreate(uxQueueLength, sizeof(rxItRawMsg_t));
 80009ea:	2200      	movs	r2, #0
 80009ec:	210f      	movs	r1, #15
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f005 fa1a 	bl	8005e28 <xQueueGenericCreate>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <Start_UARTrx_tasks+0x80>)
 80009f8:	6013      	str	r3, [r2, #0]

	xTimer = xTimerCreate ( "Timer",
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <Start_UARTrx_tasks+0x84>)
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	2201      	movs	r2, #1
 8000a02:	2102      	movs	r1, #2
 8000a04:	4818      	ldr	r0, [pc, #96]	; (8000a68 <Start_UARTrx_tasks+0x88>)
 8000a06:	f007 f8a1 	bl	8007b4c <xTimerCreate>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <Start_UARTrx_tasks+0x8c>)
 8000a0e:	6013      	str	r3, [r2, #0]
					pdMS_TO_TICKS(2),
					pdTRUE,
					( void * ) 0,
					timerCB
              	  );
    if (xTimer == NULL) {
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <Start_UARTrx_tasks+0x8c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d100      	bne.n	8000a1a <Start_UARTrx_tasks+0x3a>
        /* The timer was not created. */
    	while(1);
 8000a18:	e7fe      	b.n	8000a18 <Start_UARTrx_tasks+0x38>
        //if( xTimerStart(xTimer, 0) != pdPASS) {
            /* The timer could not be set into the Active
            state. */
        //}
    }
	xTaskCreate(	vScanChannelsTask,
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <Start_UARTrx_tasks+0x90>)
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	2300      	movs	r3, #0
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	4913      	ldr	r1, [pc, #76]	; (8000a74 <Start_UARTrx_tasks+0x94>)
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <Start_UARTrx_tasks+0x98>)
 8000a2a:	f005 fea1 	bl	8006770 <xTaskCreate>
					configMINIMAL_STACK_SIZE,
					NULL,
					1,	/*Priority*/
					&scanChannels_xTaskHandle  );

	xTaskCreate(	vAccDastaJoinerTask,
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <Start_UARTrx_tasks+0x9c>)
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	2301      	movs	r3, #1
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8000a3c:	4910      	ldr	r1, [pc, #64]	; (8000a80 <Start_UARTrx_tasks+0xa0>)
 8000a3e:	4811      	ldr	r0, [pc, #68]	; (8000a84 <Start_UARTrx_tasks+0xa4>)
 8000a40:	f005 fe96 	bl	8006770 <xTaskCreate>
					configMINIMAL_STACK_SIZE*15,
					NULL,
					1,	/*Priority*/
					&dataJoiner_xTaskHandle );

	vTaskSuspend(dataJoiner_xTaskHandle);
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <Start_UARTrx_tasks+0x9c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f006 f83b 	bl	8006ac4 <vTaskSuspend>
	vTaskSuspend(scanChannels_xTaskHandle);
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <Start_UARTrx_tasks+0x90>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f006 f836 	bl	8006ac4 <vTaskSuspend>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000089c 	.word	0x2000089c
 8000a64:	08000a89 	.word	0x08000a89
 8000a68:	0800b40c 	.word	0x0800b40c
 8000a6c:	200008a0 	.word	0x200008a0
 8000a70:	20000894 	.word	0x20000894
 8000a74:	0800b414 	.word	0x0800b414
 8000a78:	08000b1d 	.word	0x08000b1d
 8000a7c:	20000898 	.word	0x20000898
 8000a80:	0800b428 	.word	0x0800b428
 8000a84:	08000b2d 	.word	0x08000b2d

08000a88 <timerCB>:


int16_t size_acc = sizeof(acc_data) / sizeof(acc_data[0]) - 1;

static void timerCB (TimerHandle_t xTimer) {
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	static rxItRawMsg_t x = {};
	static uint16_t cnt = 0;

	memcpy(&x.payload, &acc_data[cnt], sizeof(x.payload));
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <timerCB+0x80>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4613      	mov	r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	1a9b      	subs	r3, r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <timerCB+0x84>)
 8000aa0:	441a      	add	r2, r3
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <timerCB+0x88>)
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	6814      	ldr	r4, [r2, #0]
 8000aa8:	6850      	ldr	r0, [r2, #4]
 8000aaa:	6891      	ldr	r1, [r2, #8]
 8000aac:	601c      	str	r4, [r3, #0]
 8000aae:	6058      	str	r0, [r3, #4]
 8000ab0:	6099      	str	r1, [r3, #8]
 8000ab2:	8992      	ldrh	r2, [r2, #12]
 8000ab4:	819a      	strh	r2, [r3, #12]
	cnt = (cnt >= size_acc) ? 0 : (cnt + 1);
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <timerCB+0x80>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <timerCB+0x8c>)
 8000abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	da04      	bge.n	8000ad0 <timerCB+0x48>
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <timerCB+0x80>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	e000      	b.n	8000ad2 <timerCB+0x4a>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <timerCB+0x80>)
 8000ad4:	8013      	strh	r3, [r2, #0]

	for (uint8_t i = 0; i < 8; ++i) {
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	e00c      	b.n	8000af6 <timerCB+0x6e>
		x.msgId = i;
 8000adc:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <timerCB+0x88>)
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	7013      	strb	r3, [r2, #0]
		xQueueSend(xSerialRxQueue, (void*)&x,0);
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <timerCB+0x90>)
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4909      	ldr	r1, [pc, #36]	; (8000b10 <timerCB+0x88>)
 8000aec:	f005 fa0c 	bl	8005f08 <xQueueGenericSend>
	for (uint8_t i = 0; i < 8; ++i) {
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	3301      	adds	r3, #1
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	2b07      	cmp	r3, #7
 8000afa:	d9ef      	bls.n	8000adc <timerCB+0x54>
	}
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd90      	pop	{r4, r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200008a4 	.word	0x200008a4
 8000b0c:	0800b4cc 	.word	0x0800b4cc
 8000b10:	200008a8 	.word	0x200008a8
 8000b14:	20000004 	.word	0x20000004
 8000b18:	2000089c 	.word	0x2000089c

08000b1c <vScanChannelsTask>:

static void vScanChannelsTask (void *params) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]

	for(;;) {
		//CDC_Transmit_FS((uint8_t*)serials, strlen(serials));
		vTaskSuspend(NULL);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f005 ffcd 	bl	8006ac4 <vTaskSuspend>
 8000b2a:	e7fb      	b.n	8000b24 <vScanChannelsTask+0x8>

08000b2c <vAccDastaJoinerTask>:
		//vTaskDelay(500);
		//taskYIELD();
	}
}

static void vAccDastaJoinerTask (void *params) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0be      	sub	sp, #248	; 0xf8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	ring_buffer_init(&rbuff);
 8000b34:	4862      	ldr	r0, [pc, #392]	; (8000cc0 <vAccDastaJoinerTask+0x194>)
 8000b36:	f00a fa62 	bl	800affe <ring_buffer_init>
	rxItRawMsg_t  rxMsg = {0}; /*rx msg*/
 8000b3a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	f8c3 200b 	str.w	r2, [r3, #11]
	outputFrm_t oFrame;
	uint8_t i = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	uint16_t cnt = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4

	for (;;) {
		if (xQueueReceive(xSerialRxQueue, &(rxMsg), portMAX_DELAY)) {
 8000b56:	4b5b      	ldr	r3, [pc, #364]	; (8000cc4 <vAccDastaJoinerTask+0x198>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8000b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b62:	4618      	mov	r0, r3
 8000b64:	f005 fb8a 	bl	800627c <xQueueReceive>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 809f 	beq.w	8000cae <vAccDastaJoinerTask+0x182>
 			rxMsgFrame_t dcdRxMsg = {0};
 8000b70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	731a      	strb	r2, [r3, #12]
 			COBS_deCode(rxMsg.payload, sizeof(rxMsg.payload), (void*)&dcdRxMsg);
 8000b7e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8000b82:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000b86:	3301      	adds	r3, #1
 8000b88:	210e      	movs	r1, #14
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f00a f9b1 	bl	800aef2 <COBS_deCode>
			uint16_t crc_hal  = (uint16_t)HAL_CRC_Calculate(&hcrc, (uint32_t*)&dcdRxMsg.fr.payload, sizeof(dcdRxMsg.fr.payload));
 8000b90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b94:	220b      	movs	r2, #11
 8000b96:	4619      	mov	r1, r3
 8000b98:	484b      	ldr	r0, [pc, #300]	; (8000cc8 <vAccDastaJoinerTask+0x19c>)
 8000b9a:	f000 fb53 	bl	8001244 <HAL_CRC_Calculate>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2

			if (crc_hal == (dcdRxMsg.b.crc_h << 8 | dcdRxMsg.b.crc_l)) {
 8000ba4:	f8b7 20f2 	ldrh.w	r2, [r7, #242]	; 0xf2
 8000ba8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	f897 1078 	ldrb.w	r1, [r7, #120]	; 0x78
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d17a      	bne.n	8000cae <vAccDastaJoinerTask+0x182>
						taskEXIT_CRITICAL();
						ucDataJoinBuffNum = 0x00;
					}
#else

				dcdRxMsg.fr.payload[9] =  0xff & cnt >> 8;
 8000bb8:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
				dcdRxMsg.fr.payload[10] = 0xff & cnt;
 8000bc6:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				if (rxMsg.msgId == 0) {
 8000bd0:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d104      	bne.n	8000be2 <vAccDastaJoinerTask+0xb6>
					cnt++;
 8000bd8:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	; 0xf4
 8000bdc:	3301      	adds	r3, #1
 8000bde:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
				}
				oFrame.sensorPayload[i].sensorId = rxMsg.msgId;
 8000be2:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8000be6:	f897 10e0 	ldrb.w	r1, [r7, #224]	; 0xe0
 8000bea:	4613      	mov	r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4413      	add	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	33f8      	adds	r3, #248	; 0xf8
 8000bf4:	443b      	add	r3, r7
 8000bf6:	3b7a      	subs	r3, #122	; 0x7a
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	701a      	strb	r2, [r3, #0]
				memcpy(&oFrame.sensorPayload[i].accData, (void*)&dcdRxMsg.fr.payload[0], sizeof(dcdRxMsg.fr.payload));
 8000bfc:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8000c00:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	3303      	adds	r3, #3
 8000c10:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000c14:	220b      	movs	r2, #11
 8000c16:	4618      	mov	r0, r3
 8000c18:	f00a fad8 	bl	800b1cc <memcpy>
				i++;
 8000c1c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8000c20:	3301      	adds	r3, #1
 8000c22:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
				if (i >= 8 ) {
 8000c26:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8000c2a:	2b07      	cmp	r3, #7
 8000c2c:	d93f      	bls.n	8000cae <vAccDastaJoinerTask+0x182>
					i = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
					oFrame.type = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
					oFrame.len = sizeof(outputFrm_t);
 8000c3a:	2362      	movs	r3, #98	; 0x62
 8000c3c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
					uint8_t dest_cbs[sizeof(outputFrm_t) + 2] = {0};
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2260      	movs	r2, #96	; 0x60
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f00a facb 	bl	800b1e8 <memset>
					COBS_enCode((uint8_t*)&oFrame, sizeof(outputFrm_t), dest_cbs);
 8000c52:	f107 0208 	add.w	r2, r7, #8
 8000c56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c5a:	2162      	movs	r1, #98	; 0x62
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f00a f901 	bl	800ae64 <COBS_enCode>
					memset(&oFrame, 0,sizeof(oFrame));
 8000c62:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c66:	2262      	movs	r2, #98	; 0x62
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f00a fabc 	bl	800b1e8 <memset>
					if (!ring_buffer_is_full(&rbuff)) {
 8000c70:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <vAccDastaJoinerTask+0x194>)
 8000c72:	f00a f994 	bl	800af9e <ring_buffer_is_full>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d106      	bne.n	8000c8a <vAccDastaJoinerTask+0x15e>
						ring_buffer_queue_arr(&rbuff, dest_cbs, sizeof(dest_cbs));
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	2264      	movs	r2, #100	; 0x64
 8000c82:	4619      	mov	r1, r3
 8000c84:	480e      	ldr	r0, [pc, #56]	; (8000cc0 <vAccDastaJoinerTask+0x194>)
 8000c86:	f00a f9f9 	bl	800b07c <ring_buffer_queue_arr>
					}
					if(ring_buffer_num_items(&rbuff) >= sizeof(dequeBuf)) {
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <vAccDastaJoinerTask+0x194>)
 8000c8c:	f00a f9a2 	bl	800afd4 <ring_buffer_num_items>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c96:	d30a      	bcc.n	8000cae <vAccDastaJoinerTask+0x182>
						ring_buffer_dequeue_arr(&rbuff, dequeBuf, sizeof(dequeBuf));
 8000c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9c:	490b      	ldr	r1, [pc, #44]	; (8000ccc <vAccDastaJoinerTask+0x1a0>)
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <vAccDastaJoinerTask+0x194>)
 8000ca0:	f00a fa2f 	bl	800b102 <ring_buffer_dequeue_arr>
						CDC_Transmit_FS((uint8_t*)&dequeBuf[0], sizeof(dequeBuf));
 8000ca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <vAccDastaJoinerTask+0x1a0>)
 8000caa:	f009 fc03 	bl	800a4b4 <CDC_Transmit_FS>
					}
				}
#endif
			}
		}
		taskYIELD();
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <vAccDastaJoinerTask+0x1a4>)
 8000cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	f3bf 8f4f 	dsb	sy
 8000cba:	f3bf 8f6f 	isb	sy
		if (xQueueReceive(xSerialRxQueue, &(rxMsg), portMAX_DELAY)) {
 8000cbe:	e74a      	b.n	8000b56 <vAccDastaJoinerTask+0x2a>
 8000cc0:	20000290 	.word	0x20000290
 8000cc4:	2000089c 	.word	0x2000089c
 8000cc8:	2000021c 	.word	0x2000021c
 8000ccc:	20000694 	.word	0x20000694
 8000cd0:	e000ed04 	.word	0xe000ed04

08000cd4 <Start_USB_cmd_tasks>:
  * @brief
  * @param None
  * @retval None
  */
void Start_USB_cmd_tasks(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af02      	add	r7, sp, #8

	int8_t cmdBuffer[3] = {0};
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <Start_USB_cmd_tasks+0x4c>)
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	803b      	strh	r3, [r7, #0]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	70bb      	strb	r3, [r7, #2]
	const unsigned portBASE_TYPE  uxCmdLength = 50;
 8000ce4:	2332      	movs	r3, #50	; 0x32
 8000ce6:	607b      	str	r3, [r7, #4]
	xCMDRxQueue = xQueueCreate( uxCmdLength, sizeof( cmdBuffer ));
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2103      	movs	r1, #3
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f005 f89b 	bl	8005e28 <xQueueGenericCreate>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <Start_USB_cmd_tasks+0x50>)
 8000cf6:	6013      	str	r3, [r2, #0]

	xTaskCreate(vCmdDataProcessTask,
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <Start_USB_cmd_tasks+0x54>)
 8000cfa:	9301      	str	r3, [sp, #4]
 8000cfc:	2305      	movs	r3, #5
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2300      	movs	r3, #0
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	4909      	ldr	r1, [pc, #36]	; (8000d2c <Start_USB_cmd_tasks+0x58>)
 8000d06:	480a      	ldr	r0, [pc, #40]	; (8000d30 <Start_USB_cmd_tasks+0x5c>)
 8000d08:	f005 fd32 	bl	8006770 <xTaskCreate>
			NULL,
			5,
			&cmdDataProc_xTaskHandle
			);

	if (cmdDataProc_xTaskHandle == NULL)
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <Start_USB_cmd_tasks+0x54>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <Start_USB_cmd_tasks+0x44>
		Error_Handler();
 8000d14:	f7ff fd50 	bl	80007b8 <Error_Handler>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	0800b450 	.word	0x0800b450
 8000d24:	200008bc 	.word	0x200008bc
 8000d28:	200008b8 	.word	0x200008b8
 8000d2c:	0800b43c 	.word	0x0800b43c
 8000d30:	08000d35 	.word	0x08000d35

08000d34 <vCmdDataProcessTask>:
  * @brief
  * @param void pointer unused
  * @retval None
  */
static void vCmdDataProcessTask(void *params)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	MX_USB_DEVICE_Init();
 8000d3c:	f009 fa90 	bl	800a260 <MX_USB_DEVICE_Init>
	txBroadcast_startA3rs();
 8000d40:	f000 f890 	bl	8000e64 <txBroadcast_startA3rs>
	while(1)
	{
		uint8_t newCmd[3] = {0};
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <vCmdDataProcessTask+0x8c>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	81bb      	strh	r3, [r7, #12]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73bb      	strb	r3, [r7, #14]
		xQueueReceive(xCMDRxQueue, (void*)&newCmd, portMAX_DELAY);
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <vCmdDataProcessTask+0x90>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f107 010c 	add.w	r1, r7, #12
 8000d56:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f005 fa8e 	bl	800627c <xQueueReceive>
		switch(newCmd[0])
 8000d60:	7b3b      	ldrb	r3, [r7, #12]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	2b0e      	cmp	r3, #14
 8000d66:	d8ed      	bhi.n	8000d44 <vCmdDataProcessTask+0x10>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <vCmdDataProcessTask+0x3c>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000d45 	.word	0x08000d45
 8000d74:	08000d45 	.word	0x08000d45
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000d45 	.word	0x08000d45
 8000d80:	08000db3 	.word	0x08000db3
 8000d84:	08000d45 	.word	0x08000d45
 8000d88:	08000d45 	.word	0x08000d45
 8000d8c:	08000d45 	.word	0x08000d45
 8000d90:	08000d45 	.word	0x08000d45
 8000d94:	08000d45 	.word	0x08000d45
 8000d98:	08000d45 	.word	0x08000d45
 8000d9c:	08000d45 	.word	0x08000d45
 8000da0:	08000d45 	.word	0x08000d45
 8000da4:	08000db9 	.word	0x08000db9
 8000da8:	08000d45 	.word	0x08000d45
		{
		   case SET_PARAMS:
			   //txBroadcast_setParameters((uint8_t*)&newCmd[1]);
			   break;
		   case GET_ALL_SERIAL:
			   txBroadcast_getSensorID();
 8000dac:	f000 f82c 	bl	8000e08 <txBroadcast_getSensorID>
			   break;
 8000db0:	e005      	b.n	8000dbe <vCmdDataProcessTask+0x8a>
		   case START_ALL_READ:
			   txBroadcast_startA3rs();
 8000db2:	f000 f857 	bl	8000e64 <txBroadcast_startA3rs>
			   break;
 8000db6:	e002      	b.n	8000dbe <vCmdDataProcessTask+0x8a>
		   case STOP_ALL_READ:
			   txBroadcast_stopSensorRd();
 8000db8:	f000 f806 	bl	8000dc8 <txBroadcast_stopSensorRd>
			   break;
 8000dbc:	bf00      	nop
	{
 8000dbe:	e7c1      	b.n	8000d44 <vCmdDataProcessTask+0x10>
 8000dc0:	0800b450 	.word	0x0800b450
 8000dc4:	200008bc 	.word	0x200008bc

08000dc8 <txBroadcast_stopSensorRd>:
  * @brief sends a broadcast stoping signal to all sensors and stops the sync pulse clock
  * @param 	None
  * @retval None
  */
static void txBroadcast_stopSensorRd(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af02      	add	r7, sp, #8
	/*stop the sync clock*/
	xTimerStop(xTimer, 0);
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <txBroadcast_stopSensorRd+0x34>)
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2103      	movs	r1, #3
 8000ddc:	f006 ff12 	bl	8007c04 <xTimerGenericCommand>

	/* suspend A3RS Rx task*/
	vTaskSuspend(dataJoiner_xTaskHandle);
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <txBroadcast_stopSensorRd+0x38>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 fe6d 	bl	8006ac4 <vTaskSuspend>

	/*clear all buffers related to A3RS acceleration data*/
    xQueueReset(xSerialRxQueue);
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <txBroadcast_stopSensorRd+0x3c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 ff85 	bl	8005d00 <xQueueGenericReset>
    //clearUSBtxBuffFromUARTtask();
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200008a0 	.word	0x200008a0
 8000e00:	20000898 	.word	0x20000898
 8000e04:	2000089c 	.word	0x2000089c

08000e08 <txBroadcast_getSensorID>:
  * @brief  sends a broadcast signal asking all sensors ID
  * @param 	None
  * @retval None
  */
static void txBroadcast_getSensorID(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af02      	add	r7, sp, #8
	/*disable timer!!!!*/
	xTimerStop(xTimer, 0);
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <txBroadcast_getSensorID+0x4c>)
 8000e10:	6818      	ldr	r0, [r3, #0]
 8000e12:	2300      	movs	r3, #0
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2300      	movs	r3, #0
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	f006 fef2 	bl	8007c04 <xTimerGenericCommand>
	/*disable and clear acceleration data Rx*/
    xQueueReset(xSerialRxQueue);
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <txBroadcast_getSensorID+0x50>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f004 ff6a 	bl	8005d00 <xQueueGenericReset>
    vTaskSuspend(dataJoiner_xTaskHandle);
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <txBroadcast_getSensorID+0x54>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 fe47 	bl	8006ac4 <vTaskSuspend>

	/*Clear uart Rx buffer*/
    xQueueReset(xSerialRxQueue);
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <txBroadcast_getSensorID+0x50>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 ff5f 	bl	8005d00 <xQueueGenericReset>
    /* enable scan sensor task */
    vTaskResume(scanChannels_xTaskHandle);
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <txBroadcast_getSensorID+0x58>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 ff12 	bl	8006c70 <vTaskResume>
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200008a0 	.word	0x200008a0
 8000e58:	2000089c 	.word	0x2000089c
 8000e5c:	20000898 	.word	0x20000898
 8000e60:	20000894 	.word	0x20000894

08000e64 <txBroadcast_startA3rs>:
  * @brief  sends a broadcast staring signal to all sensors and starts the sync pulse clock
  * @param 	None
  * @retval None
  */
static void txBroadcast_startA3rs(void)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af02      	add	r7, sp, #8
	/* disable and clear sensor scan Rx tasks*/
	vTaskSuspend(scanChannels_xTaskHandle );
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <txBroadcast_startA3rs+0x50>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f005 fe28 	bl	8006ac4 <vTaskSuspend>
    xQueueReset(xSerialRxQueue);
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <txBroadcast_startA3rs+0x54>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f004 ff40 	bl	8005d00 <xQueueGenericReset>
	/*give some time for the A3RS to prepare*/
	vTaskDelay(pdMS_TO_TICKS(500));
 8000e80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e84:	f005 fde8 	bl	8006a58 <vTaskDelay>

	/*start clock sync pulse*/
	xTimerStart(xTimer, 0);
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <txBroadcast_startA3rs+0x58>)
 8000e8a:	681c      	ldr	r4, [r3, #0]
 8000e8c:	f006 f8da 	bl	8007044 <xTaskGetTickCount>
 8000e90:	4602      	mov	r2, r0
 8000e92:	2300      	movs	r3, #0
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2300      	movs	r3, #0
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f006 feb2 	bl	8007c04 <xTimerGenericCommand>
	/*enable A3RS acceleration data read task */
	vTaskResume( dataJoiner_xTaskHandle );
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <txBroadcast_startA3rs+0x5c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f005 fee3 	bl	8006c70 <vTaskResume>
}
 8000eaa:	bf00      	nop
 8000eac:	3704      	adds	r7, #4
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000894 	.word	0x20000894
 8000eb8:	2000089c 	.word	0x2000089c
 8000ebc:	200008a0 	.word	0x200008a0
 8000ec0:	20000898 	.word	0x20000898

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eee:	f7ff fd65 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f00a f937 	bl	800b164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fb0d 	bl	8000514 <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8000f08:	0800d034 	.word	0x0800d034
  ldr r2, =_sbss
 8000f0c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8000f10:	20005f7c 	.word	0x20005f7c

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>

08000f16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1a:	2003      	movs	r0, #3
 8000f1c:	f000 f8f9 	bl	8001112 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f20:	200f      	movs	r0, #15
 8000f22:	f7ff fc93 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f26:	f7ff fc4d 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2000000c 	.word	0x2000000c
 8000f54:	200008c0 	.word	0x200008c0

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200008c0 	.word	0x200008c0

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffde 	bl	8000f58 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000000c 	.word	0x2000000c

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	05fa0000 	.word	0x05fa0000

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff4c 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113a:	f7ff ff61 	bl	8001000 <__NVIC_GetPriorityGrouping>
 800113e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	f7ff ffb1 	bl	80010ac <NVIC_EncodePriority>
 800114a:	4602      	mov	r2, r0
 800114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff80 	bl	8001058 <__NVIC_SetPriority>
}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff54 	bl	800101c <__NVIC_EnableIRQ>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e054      	b.n	8001238 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7f5b      	ldrb	r3, [r3, #29]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fb34 	bl	800080c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2202      	movs	r2, #2
 80011a8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	791b      	ldrb	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a22      	ldr	r2, [pc, #136]	; (8001240 <HAL_CRC_Init+0xc4>)
 80011b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0218 	bic.w	r2, r2, #24
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	e00c      	b.n	80011e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6899      	ldr	r1, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	461a      	mov	r2, r3
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f000 f948 	bl	800146c <HAL_CRCEx_Polynomial_Set>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e028      	b.n	8001238 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	795b      	ldrb	r3, [r3, #5]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d105      	bne.n	80011fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f04f 32ff 	mov.w	r2, #4294967295
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	e004      	b.n	8001204 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6912      	ldr	r2, [r2, #16]
 8001202:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699a      	ldr	r2, [r3, #24]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	04c11db7 	.word	0x04c11db7

08001244 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2202      	movs	r2, #2
 8001258:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0201 	orr.w	r2, r2, #1
 8001268:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	2b03      	cmp	r3, #3
 8001270:	d006      	beq.n	8001280 <HAL_CRC_Calculate+0x3c>
 8001272:	2b03      	cmp	r3, #3
 8001274:	d829      	bhi.n	80012ca <HAL_CRC_Calculate+0x86>
 8001276:	2b01      	cmp	r3, #1
 8001278:	d019      	beq.n	80012ae <HAL_CRC_Calculate+0x6a>
 800127a:	2b02      	cmp	r3, #2
 800127c:	d01e      	beq.n	80012bc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800127e:	e024      	b.n	80012ca <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e00a      	b.n	800129c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	441a      	add	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d3f0      	bcc.n	8001286 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
      break;
 80012ac:	e00e      	b.n	80012cc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f812 	bl	80012dc <CRC_Handle_8>
 80012b8:	6138      	str	r0, [r7, #16]
      break;
 80012ba:	e007      	b.n	80012cc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 f899 	bl	80013f8 <CRC_Handle_16>
 80012c6:	6138      	str	r0, [r7, #16]
      break;
 80012c8:	e000      	b.n	80012cc <HAL_CRC_Calculate+0x88>
      break;
 80012ca:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2201      	movs	r2, #1
 80012d0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80012d2:	693b      	ldr	r3, [r7, #16]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	e023      	b.n	8001336 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	3301      	adds	r3, #1
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	440b      	add	r3, r1
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001308:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	440b      	add	r3, r1
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001318:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	3303      	adds	r3, #3
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	440b      	add	r3, r1
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800132c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800132e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	3301      	adds	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3d6      	bcc.n	80012ee <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d04d      	beq.n	80013e6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b01      	cmp	r3, #1
 8001352:	d107      	bne.n	8001364 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	4413      	add	r3, r2
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d116      	bne.n	800139c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	3301      	adds	r3, #1
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	440b      	add	r3, r1
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
 800138e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	8b7a      	ldrh	r2, [r7, #26]
 800139a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d11f      	bne.n	80013e6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	3301      	adds	r3, #1
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	440b      	add	r3, r1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	8b7a      	ldrh	r2, [r7, #26]
 80013d2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	4413      	add	r3, r2
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3724      	adds	r7, #36	; 0x24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	e013      	b.n	8001432 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	4413      	add	r3, r2
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	041a      	lsls	r2, r3, #16
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	440b      	add	r3, r1
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3e6      	bcc.n	800140a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	4413      	add	r3, r2
 8001454:	881a      	ldrh	r2, [r3, #0]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800147c:	231f      	movs	r3, #31
 800147e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001480:	bf00      	nop
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	613a      	str	r2, [r7, #16]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <HAL_CRCEx_Polynomial_Set+0x34>
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b18      	cmp	r3, #24
 80014a4:	d846      	bhi.n	8001534 <HAL_CRCEx_Polynomial_Set+0xc8>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <HAL_CRCEx_Polynomial_Set+0x40>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	0800153b 	.word	0x0800153b
 80014b0:	08001535 	.word	0x08001535
 80014b4:	08001535 	.word	0x08001535
 80014b8:	08001535 	.word	0x08001535
 80014bc:	08001535 	.word	0x08001535
 80014c0:	08001535 	.word	0x08001535
 80014c4:	08001535 	.word	0x08001535
 80014c8:	08001535 	.word	0x08001535
 80014cc:	08001529 	.word	0x08001529
 80014d0:	08001535 	.word	0x08001535
 80014d4:	08001535 	.word	0x08001535
 80014d8:	08001535 	.word	0x08001535
 80014dc:	08001535 	.word	0x08001535
 80014e0:	08001535 	.word	0x08001535
 80014e4:	08001535 	.word	0x08001535
 80014e8:	08001535 	.word	0x08001535
 80014ec:	0800151d 	.word	0x0800151d
 80014f0:	08001535 	.word	0x08001535
 80014f4:	08001535 	.word	0x08001535
 80014f8:	08001535 	.word	0x08001535
 80014fc:	08001535 	.word	0x08001535
 8001500:	08001535 	.word	0x08001535
 8001504:	08001535 	.word	0x08001535
 8001508:	08001535 	.word	0x08001535
 800150c:	08001511 	.word	0x08001511
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	2b06      	cmp	r3, #6
 8001514:	d913      	bls.n	800153e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800151a:	e010      	b.n	800153e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2b07      	cmp	r3, #7
 8001520:	d90f      	bls.n	8001542 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001526:	e00c      	b.n	8001542 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2b0f      	cmp	r3, #15
 800152c:	d90b      	bls.n	8001546 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001532:	e008      	b.n	8001546 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	75fb      	strb	r3, [r7, #23]
      break;
 8001538:	e006      	b.n	8001548 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800153a:	bf00      	nop
 800153c:	e004      	b.n	8001548 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800153e:	bf00      	nop
 8001540:	e002      	b.n	8001548 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001542:	bf00      	nop
 8001544:	e000      	b.n	8001548 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001546:	bf00      	nop
  }
  if (status == HAL_OK)
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10d      	bne.n	800156a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 0118 	bic.w	r1, r3, #24
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	430a      	orrs	r2, r1
 8001568:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800156a:	7dfb      	ldrb	r3, [r7, #23]
}
 800156c:	4618      	mov	r0, r3
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	e175      	b.n	8001884 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	f040 8164 	bne.w	800187e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d005      	beq.n	80015ce <HAL_GPIO_Init+0x56>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d130      	bne.n	8001630 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	2203      	movs	r2, #3
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001604:	2201      	movs	r2, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 0201 	and.w	r2, r3, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b03      	cmp	r3, #3
 800163a:	d017      	beq.n	800166c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d123      	bne.n	80016c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	08da      	lsrs	r2, r3, #3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3208      	adds	r2, #8
 8001680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3208      	adds	r2, #8
 80016ba:	69b9      	ldr	r1, [r7, #24]
 80016bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0203 	and.w	r2, r3, #3
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80be 	beq.w	800187e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b66      	ldr	r3, [pc, #408]	; (800189c <HAL_GPIO_Init+0x324>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a65      	ldr	r2, [pc, #404]	; (800189c <HAL_GPIO_Init+0x324>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <HAL_GPIO_Init+0x324>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800171a:	4a61      	ldr	r2, [pc, #388]	; (80018a0 <HAL_GPIO_Init+0x328>)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <HAL_GPIO_Init+0x32c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d037      	beq.n	80017b6 <HAL_GPIO_Init+0x23e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <HAL_GPIO_Init+0x330>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d031      	beq.n	80017b2 <HAL_GPIO_Init+0x23a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a56      	ldr	r2, [pc, #344]	; (80018ac <HAL_GPIO_Init+0x334>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d02b      	beq.n	80017ae <HAL_GPIO_Init+0x236>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a55      	ldr	r2, [pc, #340]	; (80018b0 <HAL_GPIO_Init+0x338>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d025      	beq.n	80017aa <HAL_GPIO_Init+0x232>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <HAL_GPIO_Init+0x33c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01f      	beq.n	80017a6 <HAL_GPIO_Init+0x22e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a53      	ldr	r2, [pc, #332]	; (80018b8 <HAL_GPIO_Init+0x340>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d019      	beq.n	80017a2 <HAL_GPIO_Init+0x22a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_GPIO_Init+0x344>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0x226>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <HAL_GPIO_Init+0x348>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00d      	beq.n	800179a <HAL_GPIO_Init+0x222>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a50      	ldr	r2, [pc, #320]	; (80018c4 <HAL_GPIO_Init+0x34c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x21e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x350>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_GPIO_Init+0x21a>
 800178e:	2309      	movs	r3, #9
 8001790:	e012      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 8001792:	230a      	movs	r3, #10
 8001794:	e010      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 8001796:	2308      	movs	r3, #8
 8001798:	e00e      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 800179a:	2307      	movs	r3, #7
 800179c:	e00c      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 800179e:	2306      	movs	r3, #6
 80017a0:	e00a      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017b6:	2300      	movs	r3, #0
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017c8:	4935      	ldr	r1, [pc, #212]	; (80018a0 <HAL_GPIO_Init+0x328>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_GPIO_Init+0x354>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <HAL_GPIO_Init+0x354>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001824:	4a29      	ldr	r2, [pc, #164]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HAL_GPIO_Init+0x354>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_GPIO_Init+0x354>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	f67f ae86 	bls.w	8001598 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40013800 	.word	0x40013800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40021400 	.word	0x40021400
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40021c00 	.word	0x40021c00
 80018c4:	40022000 	.word	0x40022000
 80018c8:	40022400 	.word	0x40022400
 80018cc:	40013c00 	.word	0x40013c00

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80018ec:	e003      	b.n	80018f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	619a      	str	r2, [r3, #24]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001904:	b08f      	sub	sp, #60	; 0x3c
 8001906:	af0a      	add	r7, sp, #40	; 0x28
 8001908:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e116      	b.n	8001b42 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f008 ff1a 	bl	800a768 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2203      	movs	r2, #3
 8001938:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f002 fe97 	bl	8004686 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	687e      	ldr	r6, [r7, #4]
 8001960:	466d      	mov	r5, sp
 8001962:	f106 0410 	add.w	r4, r6, #16
 8001966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001972:	e885 0003 	stmia.w	r5, {r0, r1}
 8001976:	1d33      	adds	r3, r6, #4
 8001978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800197a:	6838      	ldr	r0, [r7, #0]
 800197c:	f002 fd78 	bl	8004470 <USB_CoreInit>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e0d7      	b.n	8001b42 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fe85 	bl	80046a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e04a      	b.n	8001a3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	333d      	adds	r3, #61	; 0x3d
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	333c      	adds	r3, #60	; 0x3c
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	b298      	uxth	r0, r3
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	3342      	adds	r3, #66	; 0x42
 80019e0:	4602      	mov	r2, r0
 80019e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	333f      	adds	r3, #63	; 0x3f
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	3344      	adds	r3, #68	; 0x44
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	3348      	adds	r3, #72	; 0x48
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3350      	adds	r3, #80	; 0x50
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	3301      	adds	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	7bfa      	ldrb	r2, [r7, #15]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d3af      	bcc.n	80019a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e044      	b.n	8001ad4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	1a9b      	subs	r3, r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aa2:	7bfa      	ldrb	r2, [r7, #15]
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	1a9b      	subs	r3, r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3b5      	bcc.n	8001a4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	687e      	ldr	r6, [r7, #4]
 8001ae6:	466d      	mov	r5, sp
 8001ae8:	f106 0410 	add.w	r4, r6, #16
 8001aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001afc:	1d33      	adds	r3, r6, #4
 8001afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b00:	6838      	ldr	r0, [r7, #0]
 8001b02:	f002 fe1d 	bl	8004740 <USB_DevInit>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e014      	b.n	8001b42 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d102      	bne.n	8001b36 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f001 f871 	bl	8002c18 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 feb5 	bl	80058aa <USB_DevDisconnect>

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_PCD_Start+0x16>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e012      	b.n	8001b86 <HAL_PCD_Start+0x3c>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 fd79 	bl	8004664 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 fe76 	bl	8005868 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b8e:	b590      	push	{r4, r7, lr}
 8001b90:	b08d      	sub	sp, #52	; 0x34
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 ff34 	bl	8005a12 <USB_GetMode>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f040 83ba 	bne.w	8002326 <HAL_PCD_IRQHandler+0x798>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fe98 	bl	80058ec <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 83b0 	beq.w	8002324 <HAL_PCD_IRQHandler+0x796>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 fe8f 	bl	80058ec <USB_ReadInterrupts>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d107      	bne.n	8001be8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f002 0202 	and.w	r2, r2, #2
 8001be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 fe7d 	bl	80058ec <USB_ReadInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d161      	bne.n	8001cc0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0210 	bic.w	r2, r2, #16
 8001c0a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f003 020f 	and.w	r2, r3, #15
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	0c5b      	lsrs	r3, r3, #17
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d124      	bne.n	8001c82 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d035      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	6a38      	ldr	r0, [r7, #32]
 8001c58:	f003 fcb4 	bl	80055c4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c68:	441a      	add	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c7a:	441a      	add	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	619a      	str	r2, [r3, #24]
 8001c80:	e016      	b.n	8001cb0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	0c5b      	lsrs	r3, r3, #17
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d110      	bne.n	8001cb0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c94:	2208      	movs	r2, #8
 8001c96:	4619      	mov	r1, r3
 8001c98:	6a38      	ldr	r0, [r7, #32]
 8001c9a:	f003 fc93 	bl	80055c4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001caa:	441a      	add	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0210 	orr.w	r2, r2, #16
 8001cbe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fe11 	bl	80058ec <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cd4:	d16e      	bne.n	8001db4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 fe17 	bl	8005912 <USB_ReadDevAllOutEpInterrupt>
 8001ce4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ce6:	e062      	b.n	8001dae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d057      	beq.n	8001da2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fe3c 	bl	800597a <USB_ReadDevOutEPInterrupt>
 8001d02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fdce 	bl	80028c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3e:	461a      	mov	r2, r3
 8001d40:	2308      	movs	r3, #8
 8001d42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fec8 	bl	8002adc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d62:	461a      	mov	r2, r3
 8001d64:	2310      	movs	r3, #16
 8001d66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2320      	movs	r3, #32
 8001d82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d199      	bne.n	8001ce8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fd97 	bl	80058ec <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dc8:	f040 80c0 	bne.w	8001f4c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fdb8 	bl	8005946 <USB_ReadDevAllInEpInterrupt>
 8001dd6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001ddc:	e0b2      	b.n	8001f44 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a7 	beq.w	8001f38 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f003 fdde 	bl	80059b6 <USB_ReadDevInEPInterrupt>
 8001dfa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d057      	beq.n	8001eb6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69f9      	ldr	r1, [r7, #28]
 8001e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e26:	4013      	ands	r3, r2
 8001e28:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e36:	461a      	mov	r2, r3
 8001e38:	2301      	movs	r3, #1
 8001e3a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d132      	bne.n	8001eaa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3348      	adds	r3, #72	; 0x48
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4403      	add	r3, r0
 8001e64:	3344      	adds	r3, #68	; 0x44
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4419      	add	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4403      	add	r3, r0
 8001e78:	3348      	adds	r3, #72	; 0x48
 8001e7a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d113      	bne.n	8001eaa <HAL_PCD_IRQHandler+0x31c>
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e86:	4613      	mov	r3, r2
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	1a9b      	subs	r3, r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	3350      	adds	r3, #80	; 0x50
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d108      	bne.n	8001eaa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	f003 fde7 	bl	8005a78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f008 fd08 	bl	800a8c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2308      	movs	r3, #8
 8001ed0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2310      	movs	r3, #16
 8001eec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f04:	461a      	mov	r2, r3
 8001f06:	2340      	movs	r3, #64	; 0x40
 8001f08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f20:	461a      	mov	r2, r3
 8001f22:	2302      	movs	r3, #2
 8001f24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fc38 	bl	80027a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f47f af49 	bne.w	8001dde <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 fccb 	bl	80058ec <USB_ReadInterrupts>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f60:	d122      	bne.n	8001fa8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d108      	bne.n	8001f92 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f008 feea 	bl	800ad64 <HAL_PCDEx_LPM_Callback>
 8001f90:	e002      	b.n	8001f98 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f008 fd0e 	bl	800a9b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fc9d 	bl	80058ec <USB_ReadInterrupts>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fbc:	d112      	bne.n	8001fe4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d102      	bne.n	8001fd4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f008 fcca 	bl	800a968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f003 fc7f 	bl	80058ec <USB_ReadInterrupts>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ff8:	d121      	bne.n	800203e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002008:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d111      	bne.n	8002038 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	f003 020f 	and.w	r2, r3, #15
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800202e:	2101      	movs	r1, #1
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f008 fe97 	bl	800ad64 <HAL_PCDEx_LPM_Callback>
 8002036:	e002      	b.n	800203e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f008 fc95 	bl	800a968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f003 fc52 	bl	80058ec <USB_ReadInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002052:	f040 80b7 	bne.w	80021c4 <HAL_PCD_IRQHandler+0x636>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2110      	movs	r1, #16
 8002070:	4618      	mov	r0, r3
 8002072:	f002 fcc3 	bl	80049fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207a:	e046      	b.n	800210a <HAL_PCD_IRQHandler+0x57c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	4413      	add	r3, r2
 8002084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002088:	461a      	mov	r2, r3
 800208a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800208e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a0:	0151      	lsls	r1, r2, #5
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	440a      	add	r2, r1
 80020a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020bc:	461a      	mov	r2, r3
 80020be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d4:	0151      	lsls	r1, r2, #5
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	440a      	add	r2, r1
 80020da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f4:	0151      	lsls	r1, r2, #5
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	440a      	add	r2, r1
 80020fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002102:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002106:	3301      	adds	r3, #1
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002110:	429a      	cmp	r2, r3
 8002112:	d3b3      	bcc.n	800207c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002122:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002126:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	2b00      	cmp	r3, #0
 800212e:	d016      	beq.n	800215e <HAL_PCD_IRQHandler+0x5d0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002140:	f043 030b 	orr.w	r3, r3, #11
 8002144:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002156:	f043 030b 	orr.w	r3, r3, #11
 800215a:	6453      	str	r3, [r2, #68]	; 0x44
 800215c:	e015      	b.n	800218a <HAL_PCD_IRQHandler+0x5fc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800216c:	4619      	mov	r1, r3
 800216e:	f242 032b 	movw	r3, #8235	; 0x202b
 8002172:	4313      	orrs	r3, r2
 8002174:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	69fa      	ldr	r2, [r7, #28]
 8002180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002184:	f043 030b 	orr.w	r3, r3, #11
 8002188:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002198:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800219c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6818      	ldr	r0, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021ae:	461a      	mov	r2, r3
 80021b0:	f003 fc62 	bl	8005a78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 fb8f 	bl	80058ec <USB_ReadInterrupts>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021d8:	d124      	bne.n	8002224 <HAL_PCD_IRQHandler+0x696>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 fc26 	bl	8005a30 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f002 fc80 	bl	8004aee <USB_GetDevSpeed>
 80021ee:	4603      	mov	r3, r0
 80021f0:	461a      	mov	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681c      	ldr	r4, [r3, #0]
 80021fa:	f001 fa17 	bl	800362c <HAL_RCC_GetHCLKFreq>
 80021fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	4620      	mov	r0, r4
 800220a:	f002 f989 	bl	8004520 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f008 fb81 	bl	800a916 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002222:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fb5f 	bl	80058ec <USB_ReadInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b08      	cmp	r3, #8
 8002236:	d10a      	bne.n	800224e <HAL_PCD_IRQHandler+0x6c0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f008 fb5e 	bl	800a8fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f002 0208 	and.w	r2, r2, #8
 800224c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f003 fb4a 	bl	80058ec <USB_ReadInterrupts>
 8002258:	4603      	mov	r3, r0
 800225a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002262:	d10f      	bne.n	8002284 <HAL_PCD_IRQHandler+0x6f6>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	b2db      	uxtb	r3, r3
 800226c:	4619      	mov	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f008 fbc0 	bl	800a9f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f003 fb2f 	bl	80058ec <USB_ReadInterrupts>
 800228e:	4603      	mov	r3, r0
 8002290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002298:	d10f      	bne.n	80022ba <HAL_PCD_IRQHandler+0x72c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	4619      	mov	r1, r3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f008 fb93 	bl	800a9d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80022b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f003 fb14 	bl	80058ec <USB_ReadInterrupts>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d10a      	bne.n	80022e6 <HAL_PCD_IRQHandler+0x758>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f008 fba1 	bl	800aa18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fafe 	bl	80058ec <USB_ReadInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d115      	bne.n	8002326 <HAL_PCD_IRQHandler+0x798>
    {
      temp = hpcd->Instance->GOTGINT;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <HAL_PCD_IRQHandler+0x784>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f008 fb91 	bl	800aa34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e000      	b.n	8002326 <HAL_PCD_IRQHandler+0x798>
      return;
 8002324:	bf00      	nop
    }
  }
}
 8002326:	3734      	adds	r7, #52	; 0x34
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}

0800232c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_PCD_SetAddress+0x1a>
 8002342:	2302      	movs	r3, #2
 8002344:	e013      	b.n	800236e <HAL_PCD_SetAddress+0x42>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fa5c 	bl	800581c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	4608      	mov	r0, r1
 8002380:	4611      	mov	r1, r2
 8002382:	461a      	mov	r2, r3
 8002384:	4603      	mov	r3, r0
 8002386:	70fb      	strb	r3, [r7, #3]
 8002388:	460b      	mov	r3, r1
 800238a:	803b      	strh	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002398:	2b00      	cmp	r3, #0
 800239a:	da0f      	bge.n	80023bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	3338      	adds	r3, #56	; 0x38
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	3304      	adds	r3, #4
 80023b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	705a      	strb	r2, [r3, #1]
 80023ba:	e00f      	b.n	80023dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 020f 	and.w	r2, r3, #15
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	3304      	adds	r3, #4
 80023d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023e8:	883a      	ldrh	r2, [r7, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	78ba      	ldrb	r2, [r7, #2]
 80023f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	785b      	ldrb	r3, [r3, #1]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002406:	78bb      	ldrb	r3, [r7, #2]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d102      	bne.n	8002412 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_PCD_EP_Open+0xaa>
 800241c:	2302      	movs	r3, #2
 800241e:	e00e      	b.n	800243e <HAL_PCD_EP_Open+0xc8>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68f9      	ldr	r1, [r7, #12]
 800242e:	4618      	mov	r0, r3
 8002430:	f002 fb82 	bl	8004b38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800243c:	7afb      	ldrb	r3, [r7, #11]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002452:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002456:	2b00      	cmp	r3, #0
 8002458:	da0f      	bge.n	800247a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 020f 	and.w	r2, r3, #15
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	3338      	adds	r3, #56	; 0x38
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	3304      	adds	r3, #4
 8002470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	705a      	strb	r2, [r3, #1]
 8002478:	e00f      	b.n	800249a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	f003 020f 	and.w	r2, r3, #15
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_PCD_EP_Close+0x6e>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e00e      	b.n	80024d2 <HAL_PCD_EP_Close+0x8c>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68f9      	ldr	r1, [r7, #12]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f002 fbc0 	bl	8004c48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b086      	sub	sp, #24
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	460b      	mov	r3, r1
 80024e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ea:	7afb      	ldrb	r3, [r7, #11]
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2200      	movs	r2, #0
 800251a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800251c:	7afb      	ldrb	r3, [r7, #11]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	b2da      	uxtb	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d102      	bne.n	8002536 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	2b00      	cmp	r3, #0
 800253e:	d109      	bne.n	8002554 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	6979      	ldr	r1, [r7, #20]
 800254e:	f002 fea3 	bl	8005298 <USB_EP0StartXfer>
 8002552:	e008      	b.n	8002566 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	6979      	ldr	r1, [r7, #20]
 8002562:	f002 fc4d 	bl	8004e00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	f003 020f 	and.w	r2, r3, #15
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	460b      	mov	r3, r1
 80025ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b0:	7afb      	ldrb	r3, [r7, #11]
 80025b2:	f003 020f 	and.w	r2, r3, #15
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	3338      	adds	r3, #56	; 0x38
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	3304      	adds	r3, #4
 80025c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2200      	movs	r2, #0
 80025d8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2201      	movs	r2, #1
 80025de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025e0:	7afb      	ldrb	r3, [r7, #11]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d102      	bne.n	80025fa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025fa:	7afb      	ldrb	r3, [r7, #11]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	6979      	ldr	r1, [r7, #20]
 8002612:	f002 fe41 	bl	8005298 <USB_EP0StartXfer>
 8002616:	e008      	b.n	800262a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	6979      	ldr	r1, [r7, #20]
 8002626:	f002 fbeb 	bl	8004e00 <USB_EPStartXfer>
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	f003 020f 	and.w	r2, r3, #15
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	d901      	bls.n	8002652 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e050      	b.n	80026f4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002656:	2b00      	cmp	r3, #0
 8002658:	da0f      	bge.n	800267a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	f003 020f 	and.w	r2, r3, #15
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	3338      	adds	r3, #56	; 0x38
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	3304      	adds	r3, #4
 8002670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	705a      	strb	r2, [r3, #1]
 8002678:	e00d      	b.n	8002696 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	4413      	add	r3, r2
 800268c:	3304      	adds	r3, #4
 800268e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_PCD_EP_SetStall+0x82>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e01e      	b.n	80026f4 <HAL_PCD_EP_SetStall+0xc0>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f002 ffd5 	bl	8005674 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	b2d9      	uxtb	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026e4:	461a      	mov	r2, r3
 80026e6:	f003 f9c7 	bl	8005a78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	f003 020f 	and.w	r2, r3, #15
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	d901      	bls.n	800271a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e042      	b.n	80027a0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800271a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800271e:	2b00      	cmp	r3, #0
 8002720:	da0f      	bge.n	8002742 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	f003 020f 	and.w	r2, r3, #15
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	3338      	adds	r3, #56	; 0x38
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	3304      	adds	r3, #4
 8002738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	705a      	strb	r2, [r3, #1]
 8002740:	e00f      	b.n	8002762 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	f003 020f 	and.w	r2, r3, #15
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	3304      	adds	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_PCD_EP_ClrStall+0x86>
 800277e:	2302      	movs	r3, #2
 8002780:	e00e      	b.n	80027a0 <HAL_PCD_EP_ClrStall+0xa4>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68f9      	ldr	r1, [r7, #12]
 8002790:	4618      	mov	r0, r3
 8002792:	f002 ffdd 	bl	8005750 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	3338      	adds	r3, #56	; 0x38
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	3304      	adds	r3, #4
 80027ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	699a      	ldr	r2, [r3, #24]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d901      	bls.n	80027e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e06c      	b.n	80028ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d902      	bls.n	80027fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	3303      	adds	r3, #3
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002804:	e02b      	b.n	800285e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	429a      	cmp	r2, r3
 800281a:	d902      	bls.n	8002822 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3303      	adds	r3, #3
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	68d9      	ldr	r1, [r3, #12]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800283a:	b2db      	uxtb	r3, r3
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	4603      	mov	r3, r0
 8002840:	6978      	ldr	r0, [r7, #20]
 8002842:	f002 fe81 	bl	8005548 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	441a      	add	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	441a      	add	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	b29b      	uxth	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	429a      	cmp	r2, r3
 8002872:	d809      	bhi.n	8002888 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	699a      	ldr	r2, [r3, #24]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800287c:	429a      	cmp	r2, r3
 800287e:	d203      	bcs.n	8002888 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1be      	bne.n	8002806 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	429a      	cmp	r2, r3
 8002892:	d811      	bhi.n	80028b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	2201      	movs	r2, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	6939      	ldr	r1, [r7, #16]
 80028b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028b4:	4013      	ands	r3, r2
 80028b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	333c      	adds	r3, #60	; 0x3c
 80028dc:	3304      	adds	r3, #4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	f040 80a0 	bne.w	8002a3c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d015      	beq.n	8002932 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a72      	ldr	r2, [pc, #456]	; (8002ad4 <PCD_EP_OutXfrComplete_int+0x210>)
 800290a:	4293      	cmp	r3, r2
 800290c:	f240 80dd 	bls.w	8002aca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80d7 	beq.w	8002aca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002928:	461a      	mov	r2, r3
 800292a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800292e:	6093      	str	r3, [r2, #8]
 8002930:	e0cb      	b.n	8002aca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002948:	461a      	mov	r2, r3
 800294a:	2320      	movs	r3, #32
 800294c:	6093      	str	r3, [r2, #8]
 800294e:	e0bc      	b.n	8002aca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 80b7 	bne.w	8002aca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a5d      	ldr	r2, [pc, #372]	; (8002ad4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d90f      	bls.n	8002984 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297a:	461a      	mov	r2, r3
 800297c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002980:	6093      	str	r3, [r2, #8]
 8002982:	e0a2      	b.n	8002aca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002996:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	0159      	lsls	r1, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	440b      	add	r3, r1
 80029a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80029aa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4403      	add	r3, r0
 80029ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80029be:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029d2:	6819      	ldr	r1, [r3, #0]
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4403      	add	r3, r0
 80029e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4419      	add	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4403      	add	r3, r0
 80029f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029fc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d114      	bne.n	8002a2e <PCD_EP_OutXfrComplete_int+0x16a>
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d108      	bne.n	8002a2e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a26:	461a      	mov	r2, r3
 8002a28:	2101      	movs	r1, #1
 8002a2a:	f003 f825 	bl	8005a78 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f007 ff2b 	bl	800a890 <HAL_PCD_DataOutStageCallback>
 8002a3a:	e046      	b.n	8002aca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d124      	bne.n	8002a8e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a60:	6093      	str	r3, [r2, #8]
 8002a62:	e032      	b.n	8002aca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f007 ff02 	bl	800a890 <HAL_PCD_DataOutStageCallback>
 8002a8c:	e01d      	b.n	8002aca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d114      	bne.n	8002abe <PCD_EP_OutXfrComplete_int+0x1fa>
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d108      	bne.n	8002abe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2100      	movs	r1, #0
 8002aba:	f002 ffdd 	bl	8005a78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f007 fee3 	bl	800a890 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	4f54300a 	.word	0x4f54300a
 8002ad8:	4f54310a 	.word	0x4f54310a

08002adc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	333c      	adds	r3, #60	; 0x3c
 8002af4:	3304      	adds	r3, #4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d90e      	bls.n	8002b30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d009      	beq.n	8002b30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f007 fe9b 	bl	800a86c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d90c      	bls.n	8002b58 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d108      	bne.n	8002b58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b50:	461a      	mov	r2, r3
 8002b52:	2101      	movs	r1, #1
 8002b54:	f002 ff90 	bl	8005a78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	4f54300a 	.word	0x4f54300a

08002b68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
 8002b74:	4613      	mov	r3, r2
 8002b76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d107      	bne.n	8002b96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b86:	883b      	ldrh	r3, [r7, #0]
 8002b88:	0419      	lsls	r1, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28
 8002b94:	e028      	b.n	8002be8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	e00d      	b.n	8002bc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	3340      	adds	r3, #64	; 0x40
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d3ec      	bcc.n	8002baa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002bd0:	883b      	ldrh	r3, [r7, #0]
 8002bd2:	0418      	lsls	r0, r3, #16
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6819      	ldr	r1, [r3, #0]
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	4302      	orrs	r2, r0
 8002be0:	3340      	adds	r3, #64	; 0x40
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_PCDEx_ActivateLPM+0x44>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	10000003 	.word	0x10000003

08002c60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c82:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c8e:	f7fe f963 	bl	8000f58 <HAL_GetTick>
 8002c92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c94:	e009      	b.n	8002caa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c96:	f7fe f95f 	bl	8000f58 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca4:	d901      	bls.n	8002caa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e022      	b.n	8002cf0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb6:	d1ee      	bne.n	8002c96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002cb8:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc4:	f7fe f948 	bl	8000f58 <HAL_GetTick>
 8002cc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cca:	e009      	b.n	8002ce0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ccc:	f7fe f944 	bl	8000f58 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cda:	d901      	bls.n	8002ce0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e007      	b.n	8002cf0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cec:	d1ee      	bne.n	8002ccc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40007000 	.word	0x40007000

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e291      	b.n	800323a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8087 	beq.w	8002e32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d24:	4b96      	ldr	r3, [pc, #600]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d00c      	beq.n	8002d4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d30:	4b93      	ldr	r3, [pc, #588]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d112      	bne.n	8002d62 <HAL_RCC_OscConfig+0x62>
 8002d3c:	4b90      	ldr	r3, [pc, #576]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d48:	d10b      	bne.n	8002d62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4a:	4b8d      	ldr	r3, [pc, #564]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d06c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x130>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d168      	bne.n	8002e30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e26b      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6a:	d106      	bne.n	8002d7a <HAL_RCC_OscConfig+0x7a>
 8002d6c:	4b84      	ldr	r3, [pc, #528]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a83      	ldr	r2, [pc, #524]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e02e      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x9c>
 8002d82:	4b7f      	ldr	r3, [pc, #508]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a7e      	ldr	r2, [pc, #504]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b7c      	ldr	r3, [pc, #496]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a7b      	ldr	r2, [pc, #492]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e01d      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xc0>
 8002da6:	4b76      	ldr	r3, [pc, #472]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a75      	ldr	r2, [pc, #468]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b73      	ldr	r3, [pc, #460]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a72      	ldr	r2, [pc, #456]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0xd8>
 8002dc0:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a6e      	ldr	r2, [pc, #440]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a6b      	ldr	r2, [pc, #428]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe f8ba 	bl	8000f58 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fe f8b6 	bl	8000f58 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e21f      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	4b61      	ldr	r3, [pc, #388]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe8>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe f8a6 	bl	8000f58 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe f8a2 	bl	8000f58 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e20b      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	4b57      	ldr	r3, [pc, #348]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x110>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d069      	beq.n	8002f12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e3e:	4b50      	ldr	r3, [pc, #320]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4a:	4b4d      	ldr	r3, [pc, #308]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d11c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x190>
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d116      	bne.n	8002e90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_RCC_OscConfig+0x17a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e1df      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	493d      	ldr	r1, [pc, #244]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8e:	e040      	b.n	8002f12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d023      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e98:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a38      	ldr	r2, [pc, #224]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f858 	bl	8000f58 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fe f854 	bl	8000f58 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1bd      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebe:	4b30      	ldr	r3, [pc, #192]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4929      	ldr	r1, [pc, #164]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
 8002ede:	e018      	b.n	8002f12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee0:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe f834 	bl	8000f58 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef4:	f7fe f830 	bl	8000f58 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e199      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d038      	beq.n	8002f90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d019      	beq.n	8002f5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2a:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f32:	f7fe f811 	bl	8000f58 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3a:	f7fe f80d 	bl	8000f58 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e176      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x23a>
 8002f58:	e01a      	b.n	8002f90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f66:	f7fd fff7 	bl	8000f58 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f6e:	f7fd fff3 	bl	8000f58 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d903      	bls.n	8002f84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e15c      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
 8002f80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	4b91      	ldr	r3, [pc, #580]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8002f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1ee      	bne.n	8002f6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a4 	beq.w	80030e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9e:	4b8b      	ldr	r3, [pc, #556]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10d      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a87      	ldr	r2, [pc, #540]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8002fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b85      	ldr	r3, [pc, #532]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc6:	4b82      	ldr	r3, [pc, #520]	; (80031d0 <HAL_RCC_OscConfig+0x4d0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d118      	bne.n	8003004 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fd2:	4b7f      	ldr	r3, [pc, #508]	; (80031d0 <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7e      	ldr	r2, [pc, #504]	; (80031d0 <HAL_RCC_OscConfig+0x4d0>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fde:	f7fd ffbb 	bl	8000f58 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe6:	f7fd ffb7 	bl	8000f58 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b64      	cmp	r3, #100	; 0x64
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e120      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff8:	4b75      	ldr	r3, [pc, #468]	; (80031d0 <HAL_RCC_OscConfig+0x4d0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f0      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x31a>
 800300c:	4b6f      	ldr	r3, [pc, #444]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	4a6e      	ldr	r2, [pc, #440]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6713      	str	r3, [r2, #112]	; 0x70
 8003018:	e02d      	b.n	8003076 <HAL_RCC_OscConfig+0x376>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x33c>
 8003022:	4b6a      	ldr	r3, [pc, #424]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a69      	ldr	r2, [pc, #420]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
 800302e:	4b67      	ldr	r3, [pc, #412]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003032:	4a66      	ldr	r2, [pc, #408]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003034:	f023 0304 	bic.w	r3, r3, #4
 8003038:	6713      	str	r3, [r2, #112]	; 0x70
 800303a:	e01c      	b.n	8003076 <HAL_RCC_OscConfig+0x376>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b05      	cmp	r3, #5
 8003042:	d10c      	bne.n	800305e <HAL_RCC_OscConfig+0x35e>
 8003044:	4b61      	ldr	r3, [pc, #388]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a60      	ldr	r2, [pc, #384]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
 8003050:	4b5e      	ldr	r3, [pc, #376]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	4a5d      	ldr	r2, [pc, #372]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6713      	str	r3, [r2, #112]	; 0x70
 800305c:	e00b      	b.n	8003076 <HAL_RCC_OscConfig+0x376>
 800305e:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a5a      	ldr	r2, [pc, #360]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	4b58      	ldr	r3, [pc, #352]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a57      	ldr	r2, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d015      	beq.n	80030aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307e:	f7fd ff6b 	bl	8000f58 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fd ff67 	bl	8000f58 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0ce      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	4b4b      	ldr	r3, [pc, #300]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ee      	beq.n	8003086 <HAL_RCC_OscConfig+0x386>
 80030a8:	e014      	b.n	80030d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fd ff55 	bl	8000f58 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fd ff51 	bl	8000f58 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c8:	4b40      	ldr	r3, [pc, #256]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ee      	bne.n	80030b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4b3c      	ldr	r3, [pc, #240]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	4a3b      	ldr	r2, [pc, #236]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80a4 	beq.w	8003238 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f0:	4b36      	ldr	r3, [pc, #216]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d06b      	beq.n	80031d4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	2b02      	cmp	r3, #2
 8003102:	d149      	bne.n	8003198 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003104:	4b31      	ldr	r3, [pc, #196]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a30      	ldr	r2, [pc, #192]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800310a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800310e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fd ff22 	bl	8000f58 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003118:	f7fd ff1e 	bl	8000f58 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e087      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	4b28      	ldr	r3, [pc, #160]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	019b      	lsls	r3, r3, #6
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	085b      	lsrs	r3, r3, #1
 800314e:	3b01      	subs	r3, #1
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	4313      	orrs	r3, r2
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800315e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003162:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a18      	ldr	r2, [pc, #96]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800316a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800316e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fd fef2 	bl	8000f58 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7fd feee 	bl	8000f58 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e057      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x478>
 8003196:	e04f      	b.n	8003238 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a0b      	ldr	r2, [pc, #44]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 800319e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fd fed8 	bl	8000f58 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fd fed4 	bl	8000f58 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e03d      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_OscConfig+0x4cc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x4ac>
 80031ca:	e035      	b.n	8003238 <HAL_RCC_OscConfig+0x538>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_RCC_OscConfig+0x544>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d028      	beq.n	8003234 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d121      	bne.n	8003234 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d11a      	bne.n	8003234 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003204:	4013      	ands	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800320a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800320c:	4293      	cmp	r3, r2
 800320e:	d111      	bne.n	8003234 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	3b01      	subs	r3, #1
 800321e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0d0      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b6a      	ldr	r3, [pc, #424]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d910      	bls.n	8003290 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b67      	ldr	r3, [pc, #412]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 020f 	bic.w	r2, r3, #15
 8003276:	4965      	ldr	r1, [pc, #404]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b8      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80032ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b50      	ldr	r3, [pc, #320]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	494d      	ldr	r1, [pc, #308]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d040      	beq.n	800336c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d115      	bne.n	800332a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e07f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e073      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06b      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b39      	ldr	r3, [pc, #228]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4936      	ldr	r1, [pc, #216]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800333c:	f7fd fe0c 	bl	8000f58 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fd fe08 	bl	8000f58 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e053      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b27      	ldr	r3, [pc, #156]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d210      	bcs.n	800339c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 020f 	bic.w	r2, r3, #15
 8003382:	4922      	ldr	r1, [pc, #136]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e032      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4916      	ldr	r1, [pc, #88]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	490e      	ldr	r1, [pc, #56]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033da:	f000 f821 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490a      	ldr	r1, [pc, #40]	; (8003414 <HAL_RCC_ClockConfig+0x1cc>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1d0>)
 80033f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1d4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fa26 	bl	800084c <HAL_InitTick>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023c00 	.word	0x40023c00
 8003410:	40023800 	.word	0x40023800
 8003414:	0800b4b4 	.word	0x0800b4b4
 8003418:	20000000 	.word	0x20000000
 800341c:	20000008 	.word	0x20000008

08003420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003424:	b094      	sub	sp, #80	; 0x50
 8003426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	647b      	str	r3, [r7, #68]	; 0x44
 800342c:	2300      	movs	r3, #0
 800342e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003430:	2300      	movs	r3, #0
 8003432:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003438:	4b79      	ldr	r3, [pc, #484]	; (8003620 <HAL_RCC_GetSysClockFreq+0x200>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b08      	cmp	r3, #8
 8003442:	d00d      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x40>
 8003444:	2b08      	cmp	r3, #8
 8003446:	f200 80e1 	bhi.w	800360c <HAL_RCC_GetSysClockFreq+0x1ec>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x34>
 800344e:	2b04      	cmp	r3, #4
 8003450:	d003      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0x3a>
 8003452:	e0db      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003454:	4b73      	ldr	r3, [pc, #460]	; (8003624 <HAL_RCC_GetSysClockFreq+0x204>)
 8003456:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003458:	e0db      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800345a:	4b73      	ldr	r3, [pc, #460]	; (8003628 <HAL_RCC_GetSysClockFreq+0x208>)
 800345c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800345e:	e0d8      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003460:	4b6f      	ldr	r3, [pc, #444]	; (8003620 <HAL_RCC_GetSysClockFreq+0x200>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003468:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800346a:	4b6d      	ldr	r3, [pc, #436]	; (8003620 <HAL_RCC_GetSysClockFreq+0x200>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d063      	beq.n	800353e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003476:	4b6a      	ldr	r3, [pc, #424]	; (8003620 <HAL_RCC_GetSysClockFreq+0x200>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	2200      	movs	r2, #0
 800347e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003480:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
 800348a:	2300      	movs	r3, #0
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
 800348e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003492:	4622      	mov	r2, r4
 8003494:	462b      	mov	r3, r5
 8003496:	f04f 0000 	mov.w	r0, #0
 800349a:	f04f 0100 	mov.w	r1, #0
 800349e:	0159      	lsls	r1, r3, #5
 80034a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a4:	0150      	lsls	r0, r2, #5
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4621      	mov	r1, r4
 80034ac:	1a51      	subs	r1, r2, r1
 80034ae:	6139      	str	r1, [r7, #16]
 80034b0:	4629      	mov	r1, r5
 80034b2:	eb63 0301 	sbc.w	r3, r3, r1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c4:	4659      	mov	r1, fp
 80034c6:	018b      	lsls	r3, r1, #6
 80034c8:	4651      	mov	r1, sl
 80034ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ce:	4651      	mov	r1, sl
 80034d0:	018a      	lsls	r2, r1, #6
 80034d2:	4651      	mov	r1, sl
 80034d4:	ebb2 0801 	subs.w	r8, r2, r1
 80034d8:	4659      	mov	r1, fp
 80034da:	eb63 0901 	sbc.w	r9, r3, r1
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034f2:	4690      	mov	r8, r2
 80034f4:	4699      	mov	r9, r3
 80034f6:	4623      	mov	r3, r4
 80034f8:	eb18 0303 	adds.w	r3, r8, r3
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	462b      	mov	r3, r5
 8003500:	eb49 0303 	adc.w	r3, r9, r3
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003512:	4629      	mov	r1, r5
 8003514:	024b      	lsls	r3, r1, #9
 8003516:	4621      	mov	r1, r4
 8003518:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800351c:	4621      	mov	r1, r4
 800351e:	024a      	lsls	r2, r1, #9
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003526:	2200      	movs	r2, #0
 8003528:	62bb      	str	r3, [r7, #40]	; 0x28
 800352a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800352c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003530:	f7fc fe6e 	bl	8000210 <__aeabi_uldivmod>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4613      	mov	r3, r2
 800353a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800353c:	e058      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353e:	4b38      	ldr	r3, [pc, #224]	; (8003620 <HAL_RCC_GetSysClockFreq+0x200>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	099b      	lsrs	r3, r3, #6
 8003544:	2200      	movs	r2, #0
 8003546:	4618      	mov	r0, r3
 8003548:	4611      	mov	r1, r2
 800354a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800354e:	623b      	str	r3, [r7, #32]
 8003550:	2300      	movs	r3, #0
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
 8003554:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003558:	4642      	mov	r2, r8
 800355a:	464b      	mov	r3, r9
 800355c:	f04f 0000 	mov.w	r0, #0
 8003560:	f04f 0100 	mov.w	r1, #0
 8003564:	0159      	lsls	r1, r3, #5
 8003566:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800356a:	0150      	lsls	r0, r2, #5
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4641      	mov	r1, r8
 8003572:	ebb2 0a01 	subs.w	sl, r2, r1
 8003576:	4649      	mov	r1, r9
 8003578:	eb63 0b01 	sbc.w	fp, r3, r1
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003588:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800358c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003590:	ebb2 040a 	subs.w	r4, r2, sl
 8003594:	eb63 050b 	sbc.w	r5, r3, fp
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	00eb      	lsls	r3, r5, #3
 80035a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035a6:	00e2      	lsls	r2, r4, #3
 80035a8:	4614      	mov	r4, r2
 80035aa:	461d      	mov	r5, r3
 80035ac:	4643      	mov	r3, r8
 80035ae:	18e3      	adds	r3, r4, r3
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	464b      	mov	r3, r9
 80035b4:	eb45 0303 	adc.w	r3, r5, r3
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035c6:	4629      	mov	r1, r5
 80035c8:	028b      	lsls	r3, r1, #10
 80035ca:	4621      	mov	r1, r4
 80035cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d0:	4621      	mov	r1, r4
 80035d2:	028a      	lsls	r2, r1, #10
 80035d4:	4610      	mov	r0, r2
 80035d6:	4619      	mov	r1, r3
 80035d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035da:	2200      	movs	r2, #0
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	61fa      	str	r2, [r7, #28]
 80035e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e4:	f7fc fe14 	bl	8000210 <__aeabi_uldivmod>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4613      	mov	r3, r2
 80035ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	3301      	adds	r3, #1
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800360a:	e002      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetSysClockFreq+0x204>)
 800360e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003614:	4618      	mov	r0, r3
 8003616:	3750      	adds	r7, #80	; 0x50
 8003618:	46bd      	mov	sp, r7
 800361a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800
 8003624:	00f42400 	.word	0x00f42400
 8003628:	007a1200 	.word	0x007a1200

0800362c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <HAL_RCC_GetHCLKFreq+0x14>)
 8003632:	681b      	ldr	r3, [r3, #0]
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000000 	.word	0x20000000

08003644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003648:	f7ff fff0 	bl	800362c <HAL_RCC_GetHCLKFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	0b5b      	lsrs	r3, r3, #13
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	4903      	ldr	r1, [pc, #12]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40023800 	.word	0x40023800
 8003668:	0800b4c4 	.word	0x0800b4c4

0800366c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	220f      	movs	r2, #15
 800367a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_RCC_GetClockConfig+0x5c>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0203 	and.w	r2, r3, #3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <HAL_RCC_GetClockConfig+0x5c>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCC_GetClockConfig+0x5c>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	08db      	lsrs	r3, r3, #3
 80036a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036ae:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_RCC_GetClockConfig+0x60>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 020f 	and.w	r2, r3, #15
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	601a      	str	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40023c00 	.word	0x40023c00

080036d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d012      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036f8:	4b69      	ldr	r3, [pc, #420]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a68      	ldr	r2, [pc, #416]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003702:	6093      	str	r3, [r2, #8]
 8003704:	4b66      	ldr	r3, [pc, #408]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370c:	4964      	ldr	r1, [pc, #400]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800371a:	2301      	movs	r3, #1
 800371c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d017      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800372a:	4b5d      	ldr	r3, [pc, #372]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	4959      	ldr	r1, [pc, #356]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003748:	d101      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800374a:	2301      	movs	r3, #1
 800374c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003756:	2301      	movs	r3, #1
 8003758:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d017      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003766:	4b4e      	ldr	r3, [pc, #312]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800376c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	494a      	ldr	r1, [pc, #296]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003784:	d101      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003786:	2301      	movs	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003792:	2301      	movs	r3, #1
 8003794:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037a2:	2301      	movs	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0320 	and.w	r3, r3, #32
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 808b 	beq.w	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037b4:	4b3a      	ldr	r3, [pc, #232]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	4a39      	ldr	r2, [pc, #228]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037be:	6413      	str	r3, [r2, #64]	; 0x40
 80037c0:	4b37      	ldr	r3, [pc, #220]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037cc:	4b35      	ldr	r3, [pc, #212]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a34      	ldr	r2, [pc, #208]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d8:	f7fd fbbe 	bl	8000f58 <HAL_GetTick>
 80037dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e0:	f7fd fbba 	bl	8000f58 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e357      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037f2:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003806:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d035      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	429a      	cmp	r2, r3
 800381a:	d02e      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800381c:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003824:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003826:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a1d      	ldr	r2, [pc, #116]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	4a1a      	ldr	r2, [pc, #104]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800383e:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003844:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d114      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fd fb82 	bl	8000f58 <HAL_GetTick>
 8003854:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003856:	e00a      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fd fb7e 	bl	8000f58 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e319      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0ee      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003886:	d111      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003896:	400b      	ands	r3, r1
 8003898:	4901      	ldr	r1, [pc, #4]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
 800389e:	e00b      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
 80038a8:	0ffffcff 	.word	0x0ffffcff
 80038ac:	4baa      	ldr	r3, [pc, #680]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4aa9      	ldr	r2, [pc, #676]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038b6:	6093      	str	r3, [r2, #8]
 80038b8:	4ba7      	ldr	r3, [pc, #668]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c4:	49a4      	ldr	r1, [pc, #656]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d010      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038d6:	4ba0      	ldr	r3, [pc, #640]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038dc:	4a9e      	ldr	r2, [pc, #632]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038e6:	4b9c      	ldr	r3, [pc, #624]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	4999      	ldr	r1, [pc, #612]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003904:	4b94      	ldr	r3, [pc, #592]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003912:	4991      	ldr	r1, [pc, #580]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003926:	4b8c      	ldr	r3, [pc, #560]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003934:	4988      	ldr	r1, [pc, #544]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003948:	4b83      	ldr	r3, [pc, #524]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003956:	4980      	ldr	r1, [pc, #512]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800396a:	4b7b      	ldr	r3, [pc, #492]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003970:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4977      	ldr	r1, [pc, #476]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800398c:	4b72      	ldr	r3, [pc, #456]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	f023 0203 	bic.w	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	496f      	ldr	r1, [pc, #444]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039ae:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	f023 020c 	bic.w	r2, r3, #12
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039bc:	4966      	ldr	r1, [pc, #408]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039d0:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039de:	495e      	ldr	r1, [pc, #376]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039f2:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	4955      	ldr	r1, [pc, #340]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a14:	4b50      	ldr	r3, [pc, #320]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	494d      	ldr	r1, [pc, #308]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a36:	4b48      	ldr	r3, [pc, #288]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a44:	4944      	ldr	r1, [pc, #272]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a58:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	493c      	ldr	r1, [pc, #240]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a7a:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a88:	4933      	ldr	r1, [pc, #204]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a9c:	4b2e      	ldr	r3, [pc, #184]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aaa:	492b      	ldr	r1, [pc, #172]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d011      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003acc:	4922      	ldr	r1, [pc, #136]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003aee:	2301      	movs	r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003afe:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b04:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0c:	4912      	ldr	r1, [pc, #72]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b20:	4b0d      	ldr	r3, [pc, #52]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b30:	4909      	ldr	r1, [pc, #36]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d006      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80d9 	beq.w	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b4c:	4b02      	ldr	r3, [pc, #8]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a01      	ldr	r2, [pc, #4]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b56:	e001      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5e:	f7fd f9fb 	bl	8000f58 <HAL_GetTick>
 8003b62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b64:	e008      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b66:	f7fd f9f7 	bl	8000f58 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b64      	cmp	r3, #100	; 0x64
 8003b72:	d901      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e194      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b78:	4b6c      	ldr	r3, [pc, #432]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d021      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11d      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b98:	4b64      	ldr	r3, [pc, #400]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9e:	0c1b      	lsrs	r3, r3, #16
 8003ba0:	f003 0303 	and.w	r3, r3, #3
 8003ba4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ba6:	4b61      	ldr	r3, [pc, #388]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bac:	0e1b      	lsrs	r3, r3, #24
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	019a      	lsls	r2, r3, #6
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	061b      	lsls	r3, r3, #24
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	071b      	lsls	r3, r3, #28
 8003bcc:	4957      	ldr	r1, [pc, #348]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d004      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02e      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bfe:	d129      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c00:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c06:	0c1b      	lsrs	r3, r3, #16
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c0e:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c14:	0f1b      	lsrs	r3, r3, #28
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	019a      	lsls	r2, r3, #6
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	041b      	lsls	r3, r3, #16
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	061b      	lsls	r3, r3, #24
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	071b      	lsls	r3, r3, #28
 8003c34:	493d      	ldr	r1, [pc, #244]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c42:	f023 021f 	bic.w	r2, r3, #31
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	4937      	ldr	r1, [pc, #220]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01d      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c66:	0e1b      	lsrs	r3, r3, #24
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c6e:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c74:	0f1b      	lsrs	r3, r3, #28
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	019a      	lsls	r2, r3, #6
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	041b      	lsls	r3, r3, #16
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	061b      	lsls	r3, r3, #24
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	071b      	lsls	r3, r3, #28
 8003c94:	4925      	ldr	r1, [pc, #148]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d011      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	019a      	lsls	r2, r3, #6
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	061b      	lsls	r3, r3, #24
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	071b      	lsls	r3, r3, #28
 8003cc4:	4919      	ldr	r1, [pc, #100]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ccc:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a16      	ldr	r2, [pc, #88]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd8:	f7fd f93e 	bl	8000f58 <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ce0:	f7fd f93a 	bl	8000f58 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e0d7      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	f040 80cd 	bne.w	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a08      	ldr	r2, [pc, #32]	; (8003d2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d12:	f7fd f921 	bl	8000f58 <HAL_GetTick>
 8003d16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d1a:	f7fd f91d 	bl	8000f58 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b64      	cmp	r3, #100	; 0x64
 8003d26:	d903      	bls.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e0ba      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d30:	4b5e      	ldr	r3, [pc, #376]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3c:	d0ed      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d02e      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d12a      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d66:	4b51      	ldr	r3, [pc, #324]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d74:	4b4d      	ldr	r3, [pc, #308]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	0f1b      	lsrs	r3, r3, #28
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	019a      	lsls	r2, r3, #6
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	061b      	lsls	r3, r3, #24
 8003d94:	431a      	orrs	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	071b      	lsls	r3, r3, #28
 8003d9a:	4944      	ldr	r1, [pc, #272]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003da2:	4b42      	ldr	r3, [pc, #264]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	3b01      	subs	r3, #1
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	493d      	ldr	r1, [pc, #244]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d022      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd0:	d11d      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dd2:	4b36      	ldr	r3, [pc, #216]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	0e1b      	lsrs	r3, r3, #24
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003de0:	4b32      	ldr	r3, [pc, #200]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	0f1b      	lsrs	r3, r3, #28
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	019a      	lsls	r2, r3, #6
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	071b      	lsls	r3, r3, #28
 8003e06:	4929      	ldr	r1, [pc, #164]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d028      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	0e1b      	lsrs	r3, r3, #24
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	0c1b      	lsrs	r3, r3, #16
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	019a      	lsls	r2, r3, #6
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	431a      	orrs	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	061b      	lsls	r3, r3, #24
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	071b      	lsls	r3, r3, #28
 8003e4e:	4917      	ldr	r1, [pc, #92]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	4911      	ldr	r1, [pc, #68]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e6c:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e78:	f7fd f86e 	bl	8000f58 <HAL_GetTick>
 8003e7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e80:	f7fd f86a 	bl	8000f58 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e007      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9e:	d1ef      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40023800 	.word	0x40023800

08003eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e049      	b.n	8003f56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f841 	bl	8003f5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f000 fa00 	bl	80042f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d001      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e054      	b.n	8004036 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a26      	ldr	r2, [pc, #152]	; (8004044 <HAL_TIM_Base_Start_IT+0xd0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d022      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb6:	d01d      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a22      	ldr	r2, [pc, #136]	; (8004048 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d018      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a21      	ldr	r2, [pc, #132]	; (800404c <HAL_TIM_Base_Start_IT+0xd8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_TIM_Base_Start_IT+0xe0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d009      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <HAL_TIM_Base_Start_IT+0xe4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x80>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1b      	ldr	r2, [pc, #108]	; (800405c <HAL_TIM_Base_Start_IT+0xe8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d115      	bne.n	8004020 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_TIM_Base_Start_IT+0xec>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d015      	beq.n	8004032 <HAL_TIM_Base_Start_IT+0xbe>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d011      	beq.n	8004032 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401e:	e008      	b.n	8004032 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e000      	b.n	8004034 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004032:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000
 8004048:	40000400 	.word	0x40000400
 800404c:	40000800 	.word	0x40000800
 8004050:	40000c00 	.word	0x40000c00
 8004054:	40010400 	.word	0x40010400
 8004058:	40014000 	.word	0x40014000
 800405c:	40001800 	.word	0x40001800
 8004060:	00010007 	.word	0x00010007

08004064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b02      	cmp	r3, #2
 8004078:	d122      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b02      	cmp	r3, #2
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0202 	mvn.w	r2, #2
 8004090:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f905 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f8f7 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f908 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d122      	bne.n	8004114 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d11b      	bne.n	8004114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0204 	mvn.w	r2, #4
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8db 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f8cd 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8de 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b08      	cmp	r3, #8
 8004120:	d122      	bne.n	8004168 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b08      	cmp	r3, #8
 800412e:	d11b      	bne.n	8004168 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0208 	mvn.w	r2, #8
 8004138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2204      	movs	r2, #4
 800413e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8b1 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 8004154:	e005      	b.n	8004162 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f8a3 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f8b4 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b10      	cmp	r3, #16
 8004174:	d122      	bne.n	80041bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b10      	cmp	r3, #16
 8004182:	d11b      	bne.n	80041bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0210 	mvn.w	r2, #16
 800418c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2208      	movs	r2, #8
 8004192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f887 	bl	80042b6 <HAL_TIM_IC_CaptureCallback>
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f879 	bl	80042a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f88a 	bl	80042ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d10e      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f06f 0201 	mvn.w	r2, #1
 80041e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc fad6 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d10e      	bne.n	8004214 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b80      	cmp	r3, #128	; 0x80
 8004202:	d107      	bne.n	8004214 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800420c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f91a 	bl	8004448 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004222:	d10e      	bne.n	8004242 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b80      	cmp	r3, #128	; 0x80
 8004230:	d107      	bne.n	8004242 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800423a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f90d 	bl	800445c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d10e      	bne.n	800426e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d107      	bne.n	800426e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f838 	bl	80042de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b20      	cmp	r3, #32
 800427a:	d10e      	bne.n	800429a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b20      	cmp	r3, #32
 8004288:	d107      	bne.n	800429a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f06f 0220 	mvn.w	r2, #32
 8004292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f8cd 	bl	8004434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a40      	ldr	r2, [pc, #256]	; (8004408 <TIM_Base_SetConfig+0x114>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d013      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d00f      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3d      	ldr	r2, [pc, #244]	; (800440c <TIM_Base_SetConfig+0x118>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00b      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <TIM_Base_SetConfig+0x11c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d007      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <TIM_Base_SetConfig+0x120>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d003      	beq.n	8004334 <TIM_Base_SetConfig+0x40>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a3a      	ldr	r2, [pc, #232]	; (8004418 <TIM_Base_SetConfig+0x124>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d108      	bne.n	8004346 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <TIM_Base_SetConfig+0x114>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d02b      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004354:	d027      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2c      	ldr	r2, [pc, #176]	; (800440c <TIM_Base_SetConfig+0x118>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d023      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2b      	ldr	r2, [pc, #172]	; (8004410 <TIM_Base_SetConfig+0x11c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01f      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <TIM_Base_SetConfig+0x120>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01b      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a29      	ldr	r2, [pc, #164]	; (8004418 <TIM_Base_SetConfig+0x124>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d017      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a28      	ldr	r2, [pc, #160]	; (800441c <TIM_Base_SetConfig+0x128>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a27      	ldr	r2, [pc, #156]	; (8004420 <TIM_Base_SetConfig+0x12c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00f      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a26      	ldr	r2, [pc, #152]	; (8004424 <TIM_Base_SetConfig+0x130>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00b      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a25      	ldr	r2, [pc, #148]	; (8004428 <TIM_Base_SetConfig+0x134>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d007      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a24      	ldr	r2, [pc, #144]	; (800442c <TIM_Base_SetConfig+0x138>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a23      	ldr	r2, [pc, #140]	; (8004430 <TIM_Base_SetConfig+0x13c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d108      	bne.n	80043b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <TIM_Base_SetConfig+0x114>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_Base_SetConfig+0xf8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a0c      	ldr	r2, [pc, #48]	; (8004418 <TIM_Base_SetConfig+0x124>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d103      	bne.n	80043f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	615a      	str	r2, [r3, #20]
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	40000c00 	.word	0x40000c00
 8004418:	40010400 	.word	0x40010400
 800441c:	40014000 	.word	0x40014000
 8004420:	40014400 	.word	0x40014400
 8004424:	40014800 	.word	0x40014800
 8004428:	40001800 	.word	0x40001800
 800442c:	40001c00 	.word	0x40001c00
 8004430:	40002000 	.word	0x40002000

08004434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004470:	b084      	sub	sp, #16
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	f107 001c 	add.w	r0, r7, #28
 800447e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2b01      	cmp	r3, #1
 8004486:	d120      	bne.n	80044ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	4b20      	ldr	r3, [pc, #128]	; (800451c <USB_CoreInit+0xac>)
 800449a:	4013      	ands	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d105      	bne.n	80044be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f001 fb38 	bl	8005b34 <USB_CoreReset>
 80044c4:	4603      	mov	r3, r0
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	e010      	b.n	80044ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 fb2c 	bl	8005b34 <USB_CoreReset>
 80044dc:	4603      	mov	r3, r0
 80044de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10b      	bne.n	800450a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f043 0206 	orr.w	r2, r3, #6
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800450a:	7bfb      	ldrb	r3, [r7, #15]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004516:	b004      	add	sp, #16
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	ffbdffbf 	.word	0xffbdffbf

08004520 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	4613      	mov	r3, r2
 800452c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d165      	bne.n	8004600 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4a41      	ldr	r2, [pc, #260]	; (800463c <USB_SetTurnaroundTime+0x11c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d906      	bls.n	800454a <USB_SetTurnaroundTime+0x2a>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a40      	ldr	r2, [pc, #256]	; (8004640 <USB_SetTurnaroundTime+0x120>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d202      	bcs.n	800454a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004544:	230f      	movs	r3, #15
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	e062      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4a3c      	ldr	r2, [pc, #240]	; (8004640 <USB_SetTurnaroundTime+0x120>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d306      	bcc.n	8004560 <USB_SetTurnaroundTime+0x40>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4a3b      	ldr	r2, [pc, #236]	; (8004644 <USB_SetTurnaroundTime+0x124>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d202      	bcs.n	8004560 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800455a:	230e      	movs	r3, #14
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e057      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4a38      	ldr	r2, [pc, #224]	; (8004644 <USB_SetTurnaroundTime+0x124>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d306      	bcc.n	8004576 <USB_SetTurnaroundTime+0x56>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a37      	ldr	r2, [pc, #220]	; (8004648 <USB_SetTurnaroundTime+0x128>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d202      	bcs.n	8004576 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004570:	230d      	movs	r3, #13
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e04c      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4a33      	ldr	r2, [pc, #204]	; (8004648 <USB_SetTurnaroundTime+0x128>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d306      	bcc.n	800458c <USB_SetTurnaroundTime+0x6c>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a32      	ldr	r2, [pc, #200]	; (800464c <USB_SetTurnaroundTime+0x12c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d802      	bhi.n	800458c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004586:	230c      	movs	r3, #12
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e041      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a2f      	ldr	r2, [pc, #188]	; (800464c <USB_SetTurnaroundTime+0x12c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d906      	bls.n	80045a2 <USB_SetTurnaroundTime+0x82>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a2e      	ldr	r2, [pc, #184]	; (8004650 <USB_SetTurnaroundTime+0x130>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d802      	bhi.n	80045a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800459c:	230b      	movs	r3, #11
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e036      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <USB_SetTurnaroundTime+0x130>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d906      	bls.n	80045b8 <USB_SetTurnaroundTime+0x98>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a29      	ldr	r2, [pc, #164]	; (8004654 <USB_SetTurnaroundTime+0x134>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d802      	bhi.n	80045b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045b2:	230a      	movs	r3, #10
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e02b      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a26      	ldr	r2, [pc, #152]	; (8004654 <USB_SetTurnaroundTime+0x134>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d906      	bls.n	80045ce <USB_SetTurnaroundTime+0xae>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a25      	ldr	r2, [pc, #148]	; (8004658 <USB_SetTurnaroundTime+0x138>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d202      	bcs.n	80045ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045c8:	2309      	movs	r3, #9
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e020      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a21      	ldr	r2, [pc, #132]	; (8004658 <USB_SetTurnaroundTime+0x138>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d306      	bcc.n	80045e4 <USB_SetTurnaroundTime+0xc4>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a20      	ldr	r2, [pc, #128]	; (800465c <USB_SetTurnaroundTime+0x13c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d802      	bhi.n	80045e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045de:	2308      	movs	r3, #8
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e015      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <USB_SetTurnaroundTime+0x13c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d906      	bls.n	80045fa <USB_SetTurnaroundTime+0xda>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <USB_SetTurnaroundTime+0x140>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d202      	bcs.n	80045fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045f4:	2307      	movs	r3, #7
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e00a      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045fa:	2306      	movs	r3, #6
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e007      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004606:	2309      	movs	r3, #9
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	e001      	b.n	8004610 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800460c:	2309      	movs	r3, #9
 800460e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004628:	431a      	orrs	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	00d8acbf 	.word	0x00d8acbf
 8004640:	00e4e1c0 	.word	0x00e4e1c0
 8004644:	00f42400 	.word	0x00f42400
 8004648:	01067380 	.word	0x01067380
 800464c:	011a499f 	.word	0x011a499f
 8004650:	01312cff 	.word	0x01312cff
 8004654:	014ca43f 	.word	0x014ca43f
 8004658:	016e3600 	.word	0x016e3600
 800465c:	01a6ab1f 	.word	0x01a6ab1f
 8004660:	01e84800 	.word	0x01e84800

08004664 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 0201 	bic.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d115      	bne.n	80046f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046d6:	2001      	movs	r0, #1
 80046d8:	f7fc fc4a 	bl	8000f70 <HAL_Delay>
      ms++;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3301      	adds	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f001 f995 	bl	8005a12 <USB_GetMode>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d01e      	beq.n	800472c <USB_SetCurrentMode+0x84>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b31      	cmp	r3, #49	; 0x31
 80046f2:	d9f0      	bls.n	80046d6 <USB_SetCurrentMode+0x2e>
 80046f4:	e01a      	b.n	800472c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d115      	bne.n	8004728 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004708:	2001      	movs	r0, #1
 800470a:	f7fc fc31 	bl	8000f70 <HAL_Delay>
      ms++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f001 f97c 	bl	8005a12 <USB_GetMode>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <USB_SetCurrentMode+0x84>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b31      	cmp	r3, #49	; 0x31
 8004724:	d9f0      	bls.n	8004708 <USB_SetCurrentMode+0x60>
 8004726:	e001      	b.n	800472c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e005      	b.n	8004738 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b32      	cmp	r3, #50	; 0x32
 8004730:	d101      	bne.n	8004736 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004740:	b084      	sub	sp, #16
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800474e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e009      	b.n	8004774 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3340      	adds	r3, #64	; 0x40
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	3301      	adds	r3, #1
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b0e      	cmp	r3, #14
 8004778:	d9f2      	bls.n	8004760 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800477a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11c      	bne.n	80047ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e005      	b.n	80047c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047cc:	461a      	mov	r2, r3
 80047ce:	2300      	movs	r3, #0
 80047d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d8:	4619      	mov	r1, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e0:	461a      	mov	r2, r3
 80047e2:	680b      	ldr	r3, [r1, #0]
 80047e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d10c      	bne.n	8004806 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047f2:	2100      	movs	r1, #0
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f961 	bl	8004abc <USB_SetDevSpeed>
 80047fa:	e008      	b.n	800480e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047fc:	2101      	movs	r1, #1
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f95c 	bl	8004abc <USB_SetDevSpeed>
 8004804:	e003      	b.n	800480e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004806:	2103      	movs	r1, #3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f957 	bl	8004abc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800480e:	2110      	movs	r1, #16
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f8f3 	bl	80049fc <USB_FlushTxFifo>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f91d 	bl	8004a60 <USB_FlushRxFifo>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004836:	461a      	mov	r2, r3
 8004838:	2300      	movs	r3, #0
 800483a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004842:	461a      	mov	r2, r3
 8004844:	2300      	movs	r3, #0
 8004846:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	461a      	mov	r2, r3
 8004850:	2300      	movs	r3, #0
 8004852:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	e043      	b.n	80048e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800486c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004870:	d118      	bne.n	80048a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	461a      	mov	r2, r3
 8004886:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800488a:	6013      	str	r3, [r2, #0]
 800488c:	e013      	b.n	80048b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	461a      	mov	r2, r3
 800489c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e008      	b.n	80048b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b0:	461a      	mov	r2, r3
 80048b2:	2300      	movs	r3, #0
 80048b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c2:	461a      	mov	r2, r3
 80048c4:	2300      	movs	r3, #0
 80048c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	461a      	mov	r2, r3
 80048d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	3301      	adds	r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d3b7      	bcc.n	800485a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	e043      	b.n	8004978 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004906:	d118      	bne.n	800493a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e013      	b.n	800494c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004930:	461a      	mov	r2, r3
 8004932:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	e008      	b.n	800494c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004946:	461a      	mov	r2, r3
 8004948:	2300      	movs	r3, #0
 800494a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004958:	461a      	mov	r2, r3
 800495a:	2300      	movs	r3, #0
 800495c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	461a      	mov	r2, r3
 800496c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004970:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	3301      	adds	r3, #1
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	429a      	cmp	r2, r3
 800497e:	d3b7      	bcc.n	80048f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800498e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004992:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	f043 0210 	orr.w	r2, r3, #16
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <USB_DevInit+0x2b4>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f043 0208 	orr.w	r2, r3, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d105      	bne.n	80049e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699a      	ldr	r2, [r3, #24]
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <USB_DevInit+0x2b8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049f0:	b004      	add	sp, #16
 80049f2:	4770      	bx	lr
 80049f4:	803c3800 	.word	0x803c3800
 80049f8:	40000004 	.word	0x40000004

080049fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <USB_FlushTxFifo+0x60>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e01a      	b.n	8004a50 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	daf3      	bge.n	8004a0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	019b      	lsls	r3, r3, #6
 8004a2a:	f043 0220 	orr.w	r2, r3, #32
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3301      	adds	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	4a08      	ldr	r2, [pc, #32]	; (8004a5c <USB_FlushTxFifo+0x60>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e006      	b.n	8004a50 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d0f1      	beq.n	8004a32 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	00030d40 	.word	0x00030d40

08004a60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <USB_FlushRxFifo+0x58>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e017      	b.n	8004aac <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	daf3      	bge.n	8004a6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2210      	movs	r2, #16
 8004a8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3301      	adds	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	4a08      	ldr	r2, [pc, #32]	; (8004ab8 <USB_FlushRxFifo+0x58>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e006      	b.n	8004aac <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	2b10      	cmp	r3, #16
 8004aa8:	d0f1      	beq.n	8004a8e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	00030d40 	.word	0x00030d40

08004abc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b087      	sub	sp, #28
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0306 	and.w	r3, r3, #6
 8004b06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	75fb      	strb	r3, [r7, #23]
 8004b12:	e00a      	b.n	8004b2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d002      	beq.n	8004b20 <USB_GetDevSpeed+0x32>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b06      	cmp	r3, #6
 8004b1e:	d102      	bne.n	8004b26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b20:	2302      	movs	r3, #2
 8004b22:	75fb      	strb	r3, [r7, #23]
 8004b24:	e001      	b.n	8004b2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b26:	230f      	movs	r3, #15
 8004b28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d139      	bne.n	8004bc8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	2101      	movs	r1, #1
 8004b66:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	68f9      	ldr	r1, [r7, #12]
 8004b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d153      	bne.n	8004c34 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	78db      	ldrb	r3, [r3, #3]
 8004ba6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ba8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	059b      	lsls	r3, r3, #22
 8004bae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	0159      	lsls	r1, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	440b      	add	r3, r1
 8004bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <USB_ActivateEndpoint+0x10c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]
 8004bc6:	e035      	b.n	8004c34 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	2101      	movs	r1, #1
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	68f9      	ldr	r1, [r7, #12]
 8004be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004be6:	4313      	orrs	r3, r2
 8004be8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d119      	bne.n	8004c34 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	78db      	ldrb	r3, [r3, #3]
 8004c1a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	0159      	lsls	r1, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	440b      	add	r3, r1
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <USB_ActivateEndpoint+0x10c>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	10008000 	.word	0x10008000

08004c48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d161      	bne.n	8004d28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c7a:	d11f      	bne.n	8004cbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	0151      	lsls	r1, r2, #5
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	2101      	movs	r1, #1
 8004cce:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cdc:	4013      	ands	r3, r2
 8004cde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	69da      	ldr	r2, [r3, #28]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	68f9      	ldr	r1, [r7, #12]
 8004cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d00:	4013      	ands	r3, r2
 8004d02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	0159      	lsls	r1, r3, #5
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	440b      	add	r3, r1
 8004d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4b35      	ldr	r3, [pc, #212]	; (8004df8 <USB_DeactivateEndpoint+0x1b0>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]
 8004d26:	e060      	b.n	8004dea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d3e:	d11f      	bne.n	8004d80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	2101      	movs	r1, #1
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da0:	4013      	ands	r3, r2
 8004da2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dba:	041b      	lsls	r3, r3, #16
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	0159      	lsls	r1, r3, #5
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	440b      	add	r3, r1
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	4619      	mov	r1, r3
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <USB_DeactivateEndpoint+0x1b4>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	ec337800 	.word	0xec337800
 8004dfc:	eff37800 	.word	0xeff37800

08004e00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	f040 8163 	bne.w	80050e8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d132      	bne.n	8004e90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	0159      	lsls	r1, r3, #5
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	440b      	add	r3, r1
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	4619      	mov	r1, r3
 8004e46:	4ba5      	ldr	r3, [pc, #660]	; (80050dc <USB_EPStartXfer+0x2dc>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	0159      	lsls	r1, r3, #5
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	440b      	add	r3, r1
 8004e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e86:	4619      	mov	r1, r3
 8004e88:	4b95      	ldr	r3, [pc, #596]	; (80050e0 <USB_EPStartXfer+0x2e0>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	610b      	str	r3, [r1, #16]
 8004e8e:	e074      	b.n	8004f7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	0159      	lsls	r1, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	440b      	add	r3, r1
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4b8c      	ldr	r3, [pc, #560]	; (80050e0 <USB_EPStartXfer+0x2e0>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	0159      	lsls	r1, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4b83      	ldr	r3, [pc, #524]	; (80050dc <USB_EPStartXfer+0x2dc>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	6959      	ldr	r1, [r3, #20]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	440b      	add	r3, r1
 8004eec:	1e59      	subs	r1, r3, #1
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ef6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ef8:	4b7a      	ldr	r3, [pc, #488]	; (80050e4 <USB_EPStartXfer+0x2e4>)
 8004efa:	400b      	ands	r3, r1
 8004efc:	69b9      	ldr	r1, [r7, #24]
 8004efe:	0148      	lsls	r0, r1, #5
 8004f00:	69f9      	ldr	r1, [r7, #28]
 8004f02:	4401      	add	r1, r0
 8004f04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f22:	69b9      	ldr	r1, [r7, #24]
 8004f24:	0148      	lsls	r0, r1, #5
 8004f26:	69f9      	ldr	r1, [r7, #28]
 8004f28:	4401      	add	r1, r0
 8004f2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	78db      	ldrb	r3, [r3, #3]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d11f      	bne.n	8004f7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d14b      	bne.n	8005018 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d009      	beq.n	8004f9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f94:	461a      	mov	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	78db      	ldrb	r3, [r3, #3]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d128      	bne.n	8004ff6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d110      	bne.n	8004fd6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	0151      	lsls	r1, r2, #5
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	440a      	add	r2, r1
 8004fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	e00f      	b.n	8004ff6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005010:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e133      	b.n	8005280 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	0151      	lsls	r1, r2, #5
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	440a      	add	r2, r1
 800502e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005032:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005036:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	78db      	ldrb	r3, [r3, #3]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d015      	beq.n	800506c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 811b 	beq.w	8005280 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	2101      	movs	r1, #1
 800505c:	fa01 f303 	lsl.w	r3, r1, r3
 8005060:	69f9      	ldr	r1, [r7, #28]
 8005062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005066:	4313      	orrs	r3, r2
 8005068:	634b      	str	r3, [r1, #52]	; 0x34
 800506a:	e109      	b.n	8005280 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d110      	bne.n	800509e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	e00f      	b.n	80050be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	68d9      	ldr	r1, [r3, #12]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	781a      	ldrb	r2, [r3, #0]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	b298      	uxth	r0, r3
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	4603      	mov	r3, r0
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fa38 	bl	8005548 <USB_WritePacket>
 80050d8:	e0d2      	b.n	8005280 <USB_EPStartXfer+0x480>
 80050da:	bf00      	nop
 80050dc:	e007ffff 	.word	0xe007ffff
 80050e0:	fff80000 	.word	0xfff80000
 80050e4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	0159      	lsls	r1, r3, #5
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	440b      	add	r3, r1
 80050fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005102:	4619      	mov	r1, r3
 8005104:	4b61      	ldr	r3, [pc, #388]	; (800528c <USB_EPStartXfer+0x48c>)
 8005106:	4013      	ands	r3, r2
 8005108:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	0159      	lsls	r1, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	440b      	add	r3, r1
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	4619      	mov	r1, r3
 8005126:	4b5a      	ldr	r3, [pc, #360]	; (8005290 <USB_EPStartXfer+0x490>)
 8005128:	4013      	ands	r3, r2
 800512a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d123      	bne.n	800517c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514a:	69b9      	ldr	r1, [r7, #24]
 800514c:	0148      	lsls	r0, r1, #5
 800514e:	69f9      	ldr	r1, [r7, #28]
 8005150:	4401      	add	r1, r0
 8005152:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005156:	4313      	orrs	r3, r2
 8005158:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005174:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005178:	6113      	str	r3, [r2, #16]
 800517a:	e033      	b.n	80051e4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	695a      	ldr	r2, [r3, #20]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4413      	add	r3, r2
 8005186:	1e5a      	subs	r2, r3, #1
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005190:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	8afb      	ldrh	r3, [r7, #22]
 80051a2:	04d9      	lsls	r1, r3, #19
 80051a4:	4b3b      	ldr	r3, [pc, #236]	; (8005294 <USB_EPStartXfer+0x494>)
 80051a6:	400b      	ands	r3, r1
 80051a8:	69b9      	ldr	r1, [r7, #24]
 80051aa:	0148      	lsls	r0, r1, #5
 80051ac:	69f9      	ldr	r1, [r7, #28]
 80051ae:	4401      	add	r1, r0
 80051b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051b4:	4313      	orrs	r3, r2
 80051b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	8af9      	ldrh	r1, [r7, #22]
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	0148      	lsls	r0, r1, #5
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	4401      	add	r1, r0
 80051dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051e0:	4313      	orrs	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d10d      	bne.n	8005206 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d009      	beq.n	8005206 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	68d9      	ldr	r1, [r3, #12]
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005202:	460a      	mov	r2, r1
 8005204:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	78db      	ldrb	r3, [r3, #3]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d128      	bne.n	8005260 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d110      	bne.n	8005240 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	0151      	lsls	r1, r2, #5
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	440a      	add	r2, r1
 8005234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e00f      	b.n	8005260 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800525e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	69fa      	ldr	r2, [r7, #28]
 8005274:	440a      	add	r2, r1
 8005276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800527e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	fff80000 	.word	0xfff80000
 8005290:	e007ffff 	.word	0xe007ffff
 8005294:	1ff80000 	.word	0x1ff80000

08005298 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	f040 80cd 	bne.w	8005454 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d132      	bne.n	8005328 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	0159      	lsls	r1, r3, #5
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	440b      	add	r3, r1
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	4619      	mov	r1, r3
 80052de:	4b98      	ldr	r3, [pc, #608]	; (8005540 <USB_EP0StartXfer+0x2a8>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005302:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	0159      	lsls	r1, r3, #5
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	440b      	add	r3, r1
 800531a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531e:	4619      	mov	r1, r3
 8005320:	4b88      	ldr	r3, [pc, #544]	; (8005544 <USB_EP0StartXfer+0x2ac>)
 8005322:	4013      	ands	r3, r2
 8005324:	610b      	str	r3, [r1, #16]
 8005326:	e04e      	b.n	80053c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	0159      	lsls	r1, r3, #5
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	440b      	add	r3, r1
 800533e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005342:	4619      	mov	r1, r3
 8005344:	4b7f      	ldr	r3, [pc, #508]	; (8005544 <USB_EP0StartXfer+0x2ac>)
 8005346:	4013      	ands	r3, r2
 8005348:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	4413      	add	r3, r2
 8005352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	0159      	lsls	r1, r3, #5
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	440b      	add	r3, r1
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	4619      	mov	r1, r3
 8005366:	4b76      	ldr	r3, [pc, #472]	; (8005540 <USB_EP0StartXfer+0x2a8>)
 8005368:	4013      	ands	r3, r2
 800536a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	d903      	bls.n	8005380 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800539e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b6:	6939      	ldr	r1, [r7, #16]
 80053b8:	0148      	lsls	r0, r1, #5
 80053ba:	6979      	ldr	r1, [r7, #20]
 80053bc:	4401      	add	r1, r0
 80053be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053c2:	4313      	orrs	r3, r2
 80053c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d11e      	bne.n	800540a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d009      	beq.n	80053e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	461a      	mov	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005402:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	e092      	b.n	8005530 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005424:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005428:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d07e      	beq.n	8005530 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	2101      	movs	r1, #1
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544e:	4313      	orrs	r3, r2
 8005450:	634b      	str	r3, [r1, #52]	; 0x34
 8005452:	e06d      	b.n	8005530 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	0159      	lsls	r1, r3, #5
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	440b      	add	r3, r1
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	4619      	mov	r1, r3
 8005470:	4b34      	ldr	r3, [pc, #208]	; (8005544 <USB_EP0StartXfer+0x2ac>)
 8005472:	4013      	ands	r3, r2
 8005474:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	0159      	lsls	r1, r3, #5
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	440b      	add	r3, r1
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	4619      	mov	r1, r3
 8005492:	4b2b      	ldr	r3, [pc, #172]	; (8005540 <USB_EP0StartXfer+0x2a8>)
 8005494:	4013      	ands	r3, r2
 8005496:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	0151      	lsls	r1, r2, #5
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	440a      	add	r2, r1
 80054be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054de:	6939      	ldr	r1, [r7, #16]
 80054e0:	0148      	lsls	r0, r1, #5
 80054e2:	6979      	ldr	r1, [r7, #20]
 80054e4:	4401      	add	r1, r0
 80054e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054ea:	4313      	orrs	r3, r2
 80054ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10d      	bne.n	8005510 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	68d9      	ldr	r1, [r3, #12]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550c:	460a      	mov	r2, r1
 800550e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800552e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	371c      	adds	r7, #28
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	e007ffff 	.word	0xe007ffff
 8005544:	fff80000 	.word	0xfff80000

08005548 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005548:	b480      	push	{r7}
 800554a:	b089      	sub	sp, #36	; 0x24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	4611      	mov	r1, r2
 8005554:	461a      	mov	r2, r3
 8005556:	460b      	mov	r3, r1
 8005558:	71fb      	strb	r3, [r7, #7]
 800555a:	4613      	mov	r3, r2
 800555c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005566:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d123      	bne.n	80055b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800556e:	88bb      	ldrh	r3, [r7, #4]
 8005570:	3303      	adds	r3, #3
 8005572:	089b      	lsrs	r3, r3, #2
 8005574:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005576:	2300      	movs	r3, #0
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	e018      	b.n	80055ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	031a      	lsls	r2, r3, #12
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	4413      	add	r3, r2
 8005584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005588:	461a      	mov	r2, r3
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	3301      	adds	r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	3301      	adds	r3, #1
 800559a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	3301      	adds	r3, #1
 80055a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3301      	adds	r3, #1
 80055a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	3301      	adds	r3, #1
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d3e2      	bcc.n	800557c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3724      	adds	r7, #36	; 0x24
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b08b      	sub	sp, #44	; 0x2c
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	089b      	lsrs	r3, r3, #2
 80055de:	b29b      	uxth	r3, r3
 80055e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	f003 0303 	and.w	r3, r3, #3
 80055e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	623b      	str	r3, [r7, #32]
 80055ee:	e014      	b.n	800561a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	3301      	adds	r3, #1
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	3301      	adds	r3, #1
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	3301      	adds	r3, #1
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	3301      	adds	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	3301      	adds	r3, #1
 8005618:	623b      	str	r3, [r7, #32]
 800561a:	6a3a      	ldr	r2, [r7, #32]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	429a      	cmp	r2, r3
 8005620:	d3e6      	bcc.n	80055f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005622:	8bfb      	ldrh	r3, [r7, #30]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01e      	beq.n	8005666 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005632:	461a      	mov	r2, r3
 8005634:	f107 0310 	add.w	r3, r7, #16
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	fa22 f303 	lsr.w	r3, r2, r3
 8005648:	b2da      	uxtb	r2, r3
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	701a      	strb	r2, [r3, #0]
      i++;
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	3301      	adds	r3, #1
 8005652:	623b      	str	r3, [r7, #32]
      pDest++;
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	3301      	adds	r3, #1
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800565a:	8bfb      	ldrh	r3, [r7, #30]
 800565c:	3b01      	subs	r3, #1
 800565e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005660:	8bfb      	ldrh	r3, [r7, #30]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1ea      	bne.n	800563c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005668:	4618      	mov	r0, r3
 800566a:	372c      	adds	r7, #44	; 0x2c
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d12c      	bne.n	80056ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	db12      	blt.n	80056c8 <USB_EPSetStall+0x54>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00f      	beq.n	80056c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	e02b      	b.n	8005742 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	db12      	blt.n	8005722 <USB_EPSetStall+0xae>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00f      	beq.n	8005722 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005720:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005740:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d128      	bne.n	80057be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800578a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	78db      	ldrb	r3, [r3, #3]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d003      	beq.n	800579c <USB_EPClearStall+0x4c>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	78db      	ldrb	r3, [r3, #3]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d138      	bne.n	800580e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	0151      	lsls	r1, r2, #5
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	440a      	add	r2, r1
 80057b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	e027      	b.n	800580e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	78db      	ldrb	r3, [r3, #3]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d003      	beq.n	80057ee <USB_EPClearStall+0x9e>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	78db      	ldrb	r3, [r3, #3]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d10f      	bne.n	800580e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	440a      	add	r2, r1
 8005804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	460b      	mov	r3, r1
 8005826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800583a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800583e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005850:	68f9      	ldr	r1, [r7, #12]
 8005852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005856:	4313      	orrs	r3, r2
 8005858:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005896:	f023 0302 	bic.w	r3, r3, #2
 800589a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058c4:	f023 0303 	bic.w	r3, r3, #3
 80058c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058d8:	f043 0302 	orr.w	r3, r3, #2
 80058dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4013      	ands	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005904:	68fb      	ldr	r3, [r7, #12]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	4013      	ands	r3, r2
 8005934:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	0c1b      	lsrs	r3, r3, #16
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	4013      	ands	r3, r2
 8005968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	b29b      	uxth	r3, r3
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4013      	ands	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059a8:	68bb      	ldr	r3, [r7, #8]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	fa22 f303 	lsr.w	r3, r2, r3
 80059e6:	01db      	lsls	r3, r3, #7
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4013      	ands	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a04:	68bb      	ldr	r3, [r7, #8]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
	...

08005a30 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <USB_ActivateSetup+0x44>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	fffff800 	.word	0xfffff800

08005a78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	460b      	mov	r3, r1
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	333c      	adds	r3, #60	; 0x3c
 8005a8e:	3304      	adds	r3, #4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	4a26      	ldr	r2, [pc, #152]	; (8005b30 <USB_EP0_OutStart+0xb8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d90a      	bls.n	8005ab2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aac:	d101      	bne.n	8005ab2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e037      	b.n	8005b22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005acc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae0:	f043 0318 	orr.w	r3, r3, #24
 8005ae4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005af8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005afa:	7afb      	ldrb	r3, [r7, #11]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10f      	bne.n	8005b20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b06:	461a      	mov	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	4f54300a 	.word	0x4f54300a

08005b34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	4a13      	ldr	r2, [pc, #76]	; (8005b94 <USB_CoreReset+0x60>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e01a      	b.n	8005b86 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	daf3      	bge.n	8005b40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f043 0201 	orr.w	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	4a09      	ldr	r2, [pc, #36]	; (8005b94 <USB_CoreReset+0x60>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d901      	bls.n	8005b78 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e006      	b.n	8005b86 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d0f1      	beq.n	8005b68 <USB_CoreReset+0x34>

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	00030d40 	.word	0x00030d40

08005b98 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f103 0208 	add.w	r2, r3, #8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f103 0208 	add.w	r2, r3, #8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f103 0208 	add.w	r2, r3, #8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005be6:	bf00      	nop
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b085      	sub	sp, #20
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	601a      	str	r2, [r3, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c50:	d103      	bne.n	8005c5a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	e00c      	b.n	8005c74 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	e002      	b.n	8005c68 <vListInsert+0x2e>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d2f6      	bcs.n	8005c62 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	601a      	str	r2, [r3, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6892      	ldr	r2, [r2, #8]
 8005cc2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6852      	ldr	r2, [r2, #4]
 8005ccc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d103      	bne.n	8005ce0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	1e5a      	subs	r2, r3, #1
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10c      	bne.n	8005d32 <xQueueGenericReset+0x32>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	b672      	cpsid	i
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	b662      	cpsie	i
 8005d2c:	60fb      	str	r3, [r7, #12]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d05d      	beq.n	8005df4 <xQueueGenericReset+0xf4>
        ( pxQueue->uxLength >= 1U ) &&
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d059      	beq.n	8005df4 <xQueueGenericReset+0xf4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d48:	2100      	movs	r1, #0
 8005d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d000      	beq.n	8005d54 <xQueueGenericReset+0x54>
 8005d52:	2101      	movs	r1, #1
 8005d54:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d14c      	bne.n	8005df4 <xQueueGenericReset+0xf4>
    {
        taskENTER_CRITICAL();
 8005d5a:	f002 fb09 	bl	8008370 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d66:	6939      	ldr	r1, [r7, #16]
 8005d68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d6a:	fb01 f303 	mul.w	r3, r1, r3
 8005d6e:	441a      	add	r2, r3
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2200      	movs	r2, #0
 8005d78:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	6939      	ldr	r1, [r7, #16]
 8005d8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	441a      	add	r2, r3
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	22ff      	movs	r2, #255	; 0xff
 8005d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	22ff      	movs	r2, #255	; 0xff
 8005da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d114      	bne.n	8005dda <xQueueGenericReset+0xda>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01a      	beq.n	8005dee <xQueueGenericReset+0xee>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3310      	adds	r3, #16
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 fb35 	bl	800742c <xTaskRemoveFromEventList>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d012      	beq.n	8005dee <xQueueGenericReset+0xee>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005dc8:	4b16      	ldr	r3, [pc, #88]	; (8005e24 <xQueueGenericReset+0x124>)
 8005dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	e009      	b.n	8005dee <xQueueGenericReset+0xee>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	3310      	adds	r3, #16
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff feda 	bl	8005b98 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	3324      	adds	r3, #36	; 0x24
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fed5 	bl	8005b98 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005dee:	f002 faf3 	bl	80083d8 <vPortExitCritical>
 8005df2:	e001      	b.n	8005df8 <xQueueGenericReset+0xf8>
    }
    else
    {
        xReturn = pdFAIL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10c      	bne.n	8005e18 <xQueueGenericReset+0x118>
        __asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	b672      	cpsid	i
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	b662      	cpsie	i
 8005e12:	60bb      	str	r3, [r7, #8]
    }
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <xQueueGenericReset+0x116>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005e18:	697b      	ldr	r3, [r7, #20]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	e000ed04 	.word	0xe000ed04

08005e28 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d02e      	beq.n	8005e9e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005e40:	2100      	movs	r1, #0
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d000      	beq.n	8005e50 <xQueueGenericCreate+0x28>
 8005e4e:	2101      	movs	r1, #1
 8005e50:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d123      	bne.n	8005e9e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005e5e:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8005e62:	d81c      	bhi.n	8005e9e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	fb02 f303 	mul.w	r3, r2, r3
 8005e6c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	3348      	adds	r3, #72	; 0x48
 8005e72:	4618      	mov	r0, r3
 8005e74:	f002 fba8 	bl	80085c8 <pvPortMalloc>
 8005e78:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01e      	beq.n	8005ebe <xQueueGenericCreate+0x96>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	3348      	adds	r3, #72	; 0x48
 8005e88:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e8a:	79fa      	ldrb	r2, [r7, #7]
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	4613      	mov	r3, r2
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 f816 	bl	8005ec8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005e9c:	e00f      	b.n	8005ebe <xQueueGenericCreate+0x96>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10c      	bne.n	8005ebe <xQueueGenericCreate+0x96>
        __asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	b672      	cpsid	i
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	b662      	cpsie	i
 8005eb8:	613b      	str	r3, [r7, #16]
    }
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xQueueGenericCreate+0x94>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
    }
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d103      	bne.n	8005ee4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e002      	b.n	8005eea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	69b8      	ldr	r0, [r7, #24]
 8005efa:	f7ff ff01 	bl	8005d00 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08e      	sub	sp, #56	; 0x38
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005f16:	2300      	movs	r3, #0
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10c      	bne.n	8005f3e <xQueueGenericSend+0x36>
        __asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	b672      	cpsid	i
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	b662      	cpsie	i
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <xQueueGenericSend+0x44>
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <xQueueGenericSend+0x48>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <xQueueGenericSend+0x4a>
 8005f50:	2300      	movs	r3, #0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10c      	bne.n	8005f70 <xQueueGenericSend+0x68>
        __asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	b672      	cpsid	i
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	b662      	cpsie	i
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005f6c:	bf00      	nop
 8005f6e:	e7fe      	b.n	8005f6e <xQueueGenericSend+0x66>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d103      	bne.n	8005f7e <xQueueGenericSend+0x76>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <xQueueGenericSend+0x7a>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <xQueueGenericSend+0x7c>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10c      	bne.n	8005fa2 <xQueueGenericSend+0x9a>
        __asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	b672      	cpsid	i
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	b662      	cpsie	i
 8005f9c:	623b      	str	r3, [r7, #32]
    }
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <xQueueGenericSend+0x98>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fa2:	f001 fc59 	bl	8007858 <xTaskGetSchedulerState>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <xQueueGenericSend+0xaa>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <xQueueGenericSend+0xae>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e000      	b.n	8005fb8 <xQueueGenericSend+0xb0>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10c      	bne.n	8005fd6 <xQueueGenericSend+0xce>
        __asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	b672      	cpsid	i
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	b662      	cpsie	i
 8005fd0:	61fb      	str	r3, [r7, #28]
    }
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xQueueGenericSend+0xcc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005fd6:	f002 f9cb 	bl	8008370 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <xQueueGenericSend+0xe4>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d129      	bne.n	8006040 <xQueueGenericSend+0x138>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ff2:	f000 fa29 	bl	8006448 <prvCopyDataToQueue>
 8005ff6:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d010      	beq.n	8006022 <xQueueGenericSend+0x11a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	3324      	adds	r3, #36	; 0x24
 8006004:	4618      	mov	r0, r3
 8006006:	f001 fa11 	bl	800742c <xTaskRemoveFromEventList>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d013      	beq.n	8006038 <xQueueGenericSend+0x130>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006010:	4b3f      	ldr	r3, [pc, #252]	; (8006110 <xQueueGenericSend+0x208>)
 8006012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	e00a      	b.n	8006038 <xQueueGenericSend+0x130>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <xQueueGenericSend+0x130>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006028:	4b39      	ldr	r3, [pc, #228]	; (8006110 <xQueueGenericSend+0x208>)
 800602a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006038:	f002 f9ce 	bl	80083d8 <vPortExitCritical>
                return pdPASS;
 800603c:	2301      	movs	r3, #1
 800603e:	e063      	b.n	8006108 <xQueueGenericSend+0x200>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <xQueueGenericSend+0x146>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006046:	f002 f9c7 	bl	80083d8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800604a:	2300      	movs	r3, #0
 800604c:	e05c      	b.n	8006108 <xQueueGenericSend+0x200>
                }
                else if( xEntryTimeSet == pdFALSE )
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <xQueueGenericSend+0x15a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006054:	f107 0314 	add.w	r3, r7, #20
 8006058:	4618      	mov	r0, r3
 800605a:	f001 fabf 	bl	80075dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800605e:	2301      	movs	r3, #1
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006062:	f002 f9b9 	bl	80083d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006066:	f000 fee1 	bl	8006e2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800606a:	f002 f981 	bl	8008370 <vPortEnterCritical>
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006074:	b25b      	sxtb	r3, r3
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d103      	bne.n	8006084 <xQueueGenericSend+0x17c>
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800608a:	b25b      	sxtb	r3, r3
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d103      	bne.n	800609a <xQueueGenericSend+0x192>
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800609a:	f002 f99d 	bl	80083d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800609e:	1d3a      	adds	r2, r7, #4
 80060a0:	f107 0314 	add.w	r3, r7, #20
 80060a4:	4611      	mov	r1, r2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 faae 	bl	8007608 <xTaskCheckForTimeOut>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d124      	bne.n	80060fc <xQueueGenericSend+0x1f4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b4:	f000 fac0 	bl	8006638 <prvIsQueueFull>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d018      	beq.n	80060f0 <xQueueGenericSend+0x1e8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	3310      	adds	r3, #16
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 f942 	bl	8007350 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80060cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060ce:	f000 fa4b 	bl	8006568 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80060d2:	f000 feb9 	bl	8006e48 <xTaskResumeAll>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f47f af7c 	bne.w	8005fd6 <xQueueGenericSend+0xce>
                {
                    portYIELD_WITHIN_API();
 80060de:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <xQueueGenericSend+0x208>)
 80060e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	f3bf 8f6f 	isb	sy
 80060ee:	e772      	b.n	8005fd6 <xQueueGenericSend+0xce>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80060f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060f2:	f000 fa39 	bl	8006568 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80060f6:	f000 fea7 	bl	8006e48 <xTaskResumeAll>
 80060fa:	e76c      	b.n	8005fd6 <xQueueGenericSend+0xce>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80060fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060fe:	f000 fa33 	bl	8006568 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006102:	f000 fea1 	bl	8006e48 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006106:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006108:	4618      	mov	r0, r3
 800610a:	3738      	adds	r7, #56	; 0x38
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b090      	sub	sp, #64	; 0x40
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10c      	bne.n	8006146 <xQueueGenericSendFromISR+0x32>
        __asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	b672      	cpsid	i
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	b662      	cpsie	i
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <xQueueGenericSendFromISR+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d103      	bne.n	8006154 <xQueueGenericSendFromISR+0x40>
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <xQueueGenericSendFromISR+0x44>
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <xQueueGenericSendFromISR+0x46>
 8006158:	2300      	movs	r3, #0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10c      	bne.n	8006178 <xQueueGenericSendFromISR+0x64>
        __asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	b672      	cpsid	i
 8006164:	f383 8811 	msr	BASEPRI, r3
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	b662      	cpsie	i
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <xQueueGenericSendFromISR+0x62>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d103      	bne.n	8006186 <xQueueGenericSendFromISR+0x72>
 800617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <xQueueGenericSendFromISR+0x76>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <xQueueGenericSendFromISR+0x78>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10c      	bne.n	80061aa <xQueueGenericSendFromISR+0x96>
        __asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	b672      	cpsid	i
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	b662      	cpsie	i
 80061a4:	623b      	str	r3, [r7, #32]
    }
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <xQueueGenericSendFromISR+0x94>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061aa:	f002 f9c9 	bl	8008540 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80061ae:	f3ef 8211 	mrs	r2, BASEPRI
 80061b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b6:	b672      	cpsid	i
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	b662      	cpsie	i
 80061c6:	61fa      	str	r2, [r7, #28]
 80061c8:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80061ca:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d302      	bcc.n	80061e0 <xQueueGenericSendFromISR+0xcc>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d140      	bne.n	8006262 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80061e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061f6:	f000 f927 	bl	8006448 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80061fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d112      	bne.n	800622a <xQueueGenericSendFromISR+0x116>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	2b00      	cmp	r3, #0
 800620a:	d027      	beq.n	800625c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	3324      	adds	r3, #36	; 0x24
 8006210:	4618      	mov	r0, r3
 8006212:	f001 f90b 	bl	800742c <xTaskRemoveFromEventList>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01f      	beq.n	800625c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01c      	beq.n	800625c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	e018      	b.n	800625c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800622a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800622e:	2b7f      	cmp	r3, #127	; 0x7f
 8006230:	d10c      	bne.n	800624c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	b672      	cpsid	i
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	b662      	cpsie	i
 8006246:	617b      	str	r3, [r7, #20]
    }
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800624c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006250:	3301      	adds	r3, #1
 8006252:	b2db      	uxtb	r3, r3
 8006254:	b25a      	sxtb	r2, r3
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800625c:	2301      	movs	r3, #1
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8006260:	e001      	b.n	8006266 <xQueueGenericSendFromISR+0x152>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006262:	2300      	movs	r3, #0
 8006264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006270:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006274:	4618      	mov	r0, r3
 8006276:	3740      	adds	r7, #64	; 0x40
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08c      	sub	sp, #48	; 0x30
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006288:	2300      	movs	r3, #0
 800628a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10c      	bne.n	80062b0 <xQueueReceive+0x34>
        __asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	b672      	cpsid	i
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	b662      	cpsie	i
 80062aa:	623b      	str	r3, [r7, #32]
    }
 80062ac:	bf00      	nop
 80062ae:	e7fe      	b.n	80062ae <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <xQueueReceive+0x42>
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <xQueueReceive+0x46>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <xQueueReceive+0x48>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10c      	bne.n	80062e2 <xQueueReceive+0x66>
        __asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	b672      	cpsid	i
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	b662      	cpsie	i
 80062dc:	61fb      	str	r3, [r7, #28]
    }
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xQueueReceive+0x64>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062e2:	f001 fab9 	bl	8007858 <xTaskGetSchedulerState>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <xQueueReceive+0x76>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <xQueueReceive+0x7a>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <xQueueReceive+0x7c>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10c      	bne.n	8006316 <xQueueReceive+0x9a>
        __asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	b672      	cpsid	i
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	b662      	cpsie	i
 8006310:	61bb      	str	r3, [r7, #24]
    }
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xQueueReceive+0x98>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006316:	f002 f82b 	bl	8008370 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	d01f      	beq.n	8006366 <xQueueReceive+0xea>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800632a:	f000 f8f7 	bl	800651c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	1e5a      	subs	r2, r3, #1
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00f      	beq.n	800635e <xQueueReceive+0xe2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	3310      	adds	r3, #16
 8006342:	4618      	mov	r0, r3
 8006344:	f001 f872 	bl	800742c <xTaskRemoveFromEventList>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <xQueueReceive+0xe2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800634e:	4b3d      	ldr	r3, [pc, #244]	; (8006444 <xQueueReceive+0x1c8>)
 8006350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800635e:	f002 f83b 	bl	80083d8 <vPortExitCritical>
                return pdPASS;
 8006362:	2301      	movs	r3, #1
 8006364:	e069      	b.n	800643a <xQueueReceive+0x1be>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <xQueueReceive+0xf8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800636c:	f002 f834 	bl	80083d8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006370:	2300      	movs	r3, #0
 8006372:	e062      	b.n	800643a <xQueueReceive+0x1be>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <xQueueReceive+0x10c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800637a:	f107 0310 	add.w	r3, r7, #16
 800637e:	4618      	mov	r0, r3
 8006380:	f001 f92c 	bl	80075dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006384:	2301      	movs	r3, #1
 8006386:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006388:	f002 f826 	bl	80083d8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800638c:	f000 fd4e 	bl	8006e2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006390:	f001 ffee 	bl	8008370 <vPortEnterCritical>
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800639a:	b25b      	sxtb	r3, r3
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d103      	bne.n	80063aa <xQueueReceive+0x12e>
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063b0:	b25b      	sxtb	r3, r3
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b6:	d103      	bne.n	80063c0 <xQueueReceive+0x144>
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063c0:	f002 f80a 	bl	80083d8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063c4:	1d3a      	adds	r2, r7, #4
 80063c6:	f107 0310 	add.w	r3, r7, #16
 80063ca:	4611      	mov	r1, r2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 f91b 	bl	8007608 <xTaskCheckForTimeOut>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d123      	bne.n	8006420 <xQueueReceive+0x1a4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063da:	f000 f917 	bl	800660c <prvIsQueueEmpty>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d017      	beq.n	8006414 <xQueueReceive+0x198>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	3324      	adds	r3, #36	; 0x24
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 ffaf 	bl	8007350 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80063f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063f4:	f000 f8b8 	bl	8006568 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80063f8:	f000 fd26 	bl	8006e48 <xTaskResumeAll>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d189      	bne.n	8006316 <xQueueReceive+0x9a>
                {
                    portYIELD_WITHIN_API();
 8006402:	4b10      	ldr	r3, [pc, #64]	; (8006444 <xQueueReceive+0x1c8>)
 8006404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	e780      	b.n	8006316 <xQueueReceive+0x9a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006416:	f000 f8a7 	bl	8006568 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800641a:	f000 fd15 	bl	8006e48 <xTaskResumeAll>
 800641e:	e77a      	b.n	8006316 <xQueueReceive+0x9a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006422:	f000 f8a1 	bl	8006568 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006426:	f000 fd0f 	bl	8006e48 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800642a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800642c:	f000 f8ee 	bl	800660c <prvIsQueueEmpty>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	f43f af6f 	beq.w	8006316 <xQueueReceive+0x9a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006438:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800643a:	4618      	mov	r0, r3
 800643c:	3730      	adds	r7, #48	; 0x30
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10d      	bne.n	8006482 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d14d      	bne.n	800650a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	4618      	mov	r0, r3
 8006474:	f001 fa0e 	bl	8007894 <xTaskPriorityDisinherit>
 8006478:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	e043      	b.n	800650a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d119      	bne.n	80064bc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6858      	ldr	r0, [r3, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	461a      	mov	r2, r3
 8006492:	68b9      	ldr	r1, [r7, #8]
 8006494:	f004 fe9a 	bl	800b1cc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	441a      	add	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d32b      	bcc.n	800650a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	e026      	b.n	800650a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	68d8      	ldr	r0, [r3, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	461a      	mov	r2, r3
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	f004 fe80 	bl	800b1cc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	425b      	negs	r3, r3
 80064d6:	441a      	add	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d207      	bcs.n	80064f8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	425b      	negs	r3, r3
 80064f2:	441a      	add	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d105      	bne.n	800650a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	3b01      	subs	r3, #1
 8006508:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8006512:	697b      	ldr	r3, [r7, #20]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d018      	beq.n	8006560 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	441a      	add	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68da      	ldr	r2, [r3, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	429a      	cmp	r2, r3
 8006546:	d303      	bcc.n	8006550 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68d9      	ldr	r1, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006558:	461a      	mov	r2, r3
 800655a:	6838      	ldr	r0, [r7, #0]
 800655c:	f004 fe36 	bl	800b1cc <memcpy>
    }
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006570:	f001 fefe 	bl	8008370 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800657a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800657c:	e011      	b.n	80065a2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d012      	beq.n	80065ac <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3324      	adds	r3, #36	; 0x24
 800658a:	4618      	mov	r0, r3
 800658c:	f000 ff4e 	bl	800742c <xTaskRemoveFromEventList>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006596:	f001 f8a1 	bl	80076dc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	3b01      	subs	r3, #1
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80065a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	dce9      	bgt.n	800657e <prvUnlockQueue+0x16>
 80065aa:	e000      	b.n	80065ae <prvUnlockQueue+0x46>
                        break;
 80065ac:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	22ff      	movs	r2, #255	; 0xff
 80065b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80065b6:	f001 ff0f 	bl	80083d8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80065ba:	f001 fed9 	bl	8008370 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065c4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80065c6:	e011      	b.n	80065ec <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d012      	beq.n	80065f6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3310      	adds	r3, #16
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 ff29 	bl	800742c <xTaskRemoveFromEventList>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80065e0:	f001 f87c 	bl	80076dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80065ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dce9      	bgt.n	80065c8 <prvUnlockQueue+0x60>
 80065f4:	e000      	b.n	80065f8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80065f6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	22ff      	movs	r2, #255	; 0xff
 80065fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006600:	f001 feea 	bl	80083d8 <vPortExitCritical>
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006614:	f001 feac 	bl	8008370 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d102      	bne.n	8006626 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006620:	2301      	movs	r3, #1
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	e001      	b.n	800662a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006626:	2300      	movs	r3, #0
 8006628:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800662a:	f001 fed5 	bl	80083d8 <vPortExitCritical>

    return xReturn;
 800662e:	68fb      	ldr	r3, [r7, #12]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006640:	f001 fe96 	bl	8008370 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664c:	429a      	cmp	r2, r3
 800664e:	d102      	bne.n	8006656 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006650:	2301      	movs	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	e001      	b.n	800665a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800665a:	f001 febd 	bl	80083d8 <vPortExitCritical>

    return xReturn;
 800665e:	68fb      	ldr	r3, [r7, #12]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10c      	bne.n	8006692 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	b672      	cpsid	i
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	b662      	cpsie	i
 800668c:	60fb      	str	r3, [r7, #12]
    }
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <vQueueAddToRegistry+0x28>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8006692:	2300      	movs	r3, #0
 8006694:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d024      	beq.n	80066e6 <vQueueAddToRegistry+0x7e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	e01e      	b.n	80066e0 <vQueueAddToRegistry+0x78>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80066a2:	4a18      	ldr	r2, [pc, #96]	; (8006704 <vQueueAddToRegistry+0x9c>)
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	4413      	add	r3, r2
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d105      	bne.n	80066be <vQueueAddToRegistry+0x56>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4a13      	ldr	r2, [pc, #76]	; (8006704 <vQueueAddToRegistry+0x9c>)
 80066b8:	4413      	add	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
                    break;
 80066bc:	e013      	b.n	80066e6 <vQueueAddToRegistry+0x7e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <vQueueAddToRegistry+0x72>
 80066c4:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <vQueueAddToRegistry+0x9c>)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <vQueueAddToRegistry+0x72>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	4a0b      	ldr	r2, [pc, #44]	; (8006704 <vQueueAddToRegistry+0x9c>)
 80066d6:	4413      	add	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	3301      	adds	r3, #1
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b07      	cmp	r3, #7
 80066e4:	d9dd      	bls.n	80066a2 <vQueueAddToRegistry+0x3a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <vQueueAddToRegistry+0x90>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	200008c4 	.word	0x200008c4

08006708 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006718:	f001 fe2a 	bl	8008370 <vPortEnterCritical>
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006722:	b25b      	sxtb	r3, r3
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d103      	bne.n	8006732 <vQueueWaitForMessageRestricted+0x2a>
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006738:	b25b      	sxtb	r3, r3
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d103      	bne.n	8006748 <vQueueWaitForMessageRestricted+0x40>
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006748:	f001 fe46 	bl	80083d8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	3324      	adds	r3, #36	; 0x24
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fe1d 	bl	800739c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006762:	6978      	ldr	r0, [r7, #20]
 8006764:	f7ff ff00 	bl	8006568 <prvUnlockQueue>
    }
 8006768:	bf00      	nop
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006770:	b580      	push	{r7, lr}
 8006772:	b08c      	sub	sp, #48	; 0x30
 8006774:	af04      	add	r7, sp, #16
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4618      	mov	r0, r3
 8006786:	f001 ff1f 	bl	80085c8 <pvPortMalloc>
 800678a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00e      	beq.n	80067b0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006792:	2054      	movs	r0, #84	; 0x54
 8006794:	f001 ff18 	bl	80085c8 <pvPortMalloc>
 8006798:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	631a      	str	r2, [r3, #48]	; 0x30
 80067a6:	e005      	b.n	80067b4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80067a8:	6978      	ldr	r0, [r7, #20]
 80067aa:	f001 fff3 	bl	8008794 <vPortFree>
 80067ae:	e001      	b.n	80067b4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d013      	beq.n	80067e2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80067ba:	88fa      	ldrh	r2, [r7, #6]
 80067bc:	2300      	movs	r3, #0
 80067be:	9303      	str	r3, [sp, #12]
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f80e 	bl	80067f2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80067d6:	69f8      	ldr	r0, [r7, #28]
 80067d8:	f000 f8ac 	bl	8006934 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80067dc:	2301      	movs	r3, #1
 80067de:	61bb      	str	r3, [r7, #24]
 80067e0:	e002      	b.n	80067e8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80067e2:	f04f 33ff 	mov.w	r3, #4294967295
 80067e6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80067e8:	69bb      	ldr	r3, [r7, #24]
    }
 80067ea:	4618      	mov	r0, r3
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b088      	sub	sp, #32
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800680a:	440b      	add	r3, r1
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	f023 0307 	bic.w	r3, r3, #7
 8006818:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f003 0307 	and.w	r3, r3, #7
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00c      	beq.n	800683e <prvInitialiseNewTask+0x4c>
        __asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	b672      	cpsid	i
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	b662      	cpsie	i
 8006838:	617b      	str	r3, [r7, #20]
    }
 800683a:	bf00      	nop
 800683c:	e7fe      	b.n	800683c <prvInitialiseNewTask+0x4a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01f      	beq.n	8006884 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006844:	2300      	movs	r3, #0
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	e012      	b.n	8006870 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	4413      	add	r3, r2
 8006850:	7819      	ldrb	r1, [r3, #0]
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	3334      	adds	r3, #52	; 0x34
 800685a:	460a      	mov	r2, r1
 800685c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4413      	add	r3, r2
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d006      	beq.n	8006878 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	3301      	adds	r3, #1
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b0f      	cmp	r3, #15
 8006874:	d9e9      	bls.n	800684a <prvInitialiseNewTask+0x58>
 8006876:	e000      	b.n	800687a <prvInitialiseNewTask+0x88>
            {
                break;
 8006878:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006882:	e003      	b.n	800688c <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	2b06      	cmp	r3, #6
 8006890:	d90c      	bls.n	80068ac <prvInitialiseNewTask+0xba>
        __asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	b672      	cpsid	i
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	b662      	cpsie	i
 80068a6:	613b      	str	r3, [r7, #16]
    }
 80068a8:	bf00      	nop
 80068aa:	e7fe      	b.n	80068aa <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ae:	2b06      	cmp	r3, #6
 80068b0:	d901      	bls.n	80068b6 <prvInitialiseNewTask+0xc4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068b2:	2306      	movs	r3, #6
 80068b4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ba:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c0:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	3304      	adds	r3, #4
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff f983 	bl	8005bd8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	3318      	adds	r3, #24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff f97e 	bl	8005bd8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068e0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	f1c3 0207 	rsb	r2, r3, #7
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	334c      	adds	r3, #76	; 0x4c
 80068f6:	2204      	movs	r2, #4
 80068f8:	2100      	movs	r1, #0
 80068fa:	4618      	mov	r0, r3
 80068fc:	f004 fc74 	bl	800b1e8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	3350      	adds	r3, #80	; 0x50
 8006904:	2201      	movs	r2, #1
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f004 fc6d 	bl	800b1e8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	69b8      	ldr	r0, [r7, #24]
 8006914:	f001 fc1a 	bl	800814c <pxPortInitialiseStack>
 8006918:	4602      	mov	r2, r0
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <prvInitialiseNewTask+0x138>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006928:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800692a:	bf00      	nop
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800693c:	f001 fd18 	bl	8008370 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006940:	4b3e      	ldr	r3, [pc, #248]	; (8006a3c <prvAddNewTaskToReadyList+0x108>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3301      	adds	r3, #1
 8006946:	4a3d      	ldr	r2, [pc, #244]	; (8006a3c <prvAddNewTaskToReadyList+0x108>)
 8006948:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800694a:	4b3d      	ldr	r3, [pc, #244]	; (8006a40 <prvAddNewTaskToReadyList+0x10c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d109      	bne.n	8006966 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006952:	4a3b      	ldr	r2, [pc, #236]	; (8006a40 <prvAddNewTaskToReadyList+0x10c>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006958:	4b38      	ldr	r3, [pc, #224]	; (8006a3c <prvAddNewTaskToReadyList+0x108>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d110      	bne.n	8006982 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006960:	f000 fee0 	bl	8007724 <prvInitialiseTaskLists>
 8006964:	e00d      	b.n	8006982 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006966:	4b37      	ldr	r3, [pc, #220]	; (8006a44 <prvAddNewTaskToReadyList+0x110>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d109      	bne.n	8006982 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800696e:	4b34      	ldr	r3, [pc, #208]	; (8006a40 <prvAddNewTaskToReadyList+0x10c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	429a      	cmp	r2, r3
 800697a:	d802      	bhi.n	8006982 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800697c:	4a30      	ldr	r2, [pc, #192]	; (8006a40 <prvAddNewTaskToReadyList+0x10c>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006982:	4b31      	ldr	r3, [pc, #196]	; (8006a48 <prvAddNewTaskToReadyList+0x114>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3301      	adds	r3, #1
 8006988:	4a2f      	ldr	r2, [pc, #188]	; (8006a48 <prvAddNewTaskToReadyList+0x114>)
 800698a:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	2201      	movs	r2, #1
 8006992:	409a      	lsls	r2, r3
 8006994:	4b2d      	ldr	r3, [pc, #180]	; (8006a4c <prvAddNewTaskToReadyList+0x118>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4313      	orrs	r3, r2
 800699a:	4a2c      	ldr	r2, [pc, #176]	; (8006a4c <prvAddNewTaskToReadyList+0x118>)
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a2:	492b      	ldr	r1, [pc, #172]	; (8006a50 <prvAddNewTaskToReadyList+0x11c>)
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	3304      	adds	r3, #4
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	609a      	str	r2, [r3, #8]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	3204      	adds	r2, #4
 80069ca:	605a      	str	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	1d1a      	adds	r2, r3, #4
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	609a      	str	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4a1b      	ldr	r2, [pc, #108]	; (8006a50 <prvAddNewTaskToReadyList+0x11c>)
 80069e2:	441a      	add	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	615a      	str	r2, [r3, #20]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ec:	4918      	ldr	r1, [pc, #96]	; (8006a50 <prvAddNewTaskToReadyList+0x11c>)
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	440b      	add	r3, r1
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	1c59      	adds	r1, r3, #1
 80069fc:	4814      	ldr	r0, [pc, #80]	; (8006a50 <prvAddNewTaskToReadyList+0x11c>)
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4403      	add	r3, r0
 8006a08:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006a0a:	f001 fce5 	bl	80083d8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <prvAddNewTaskToReadyList+0x110>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00e      	beq.n	8006a34 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <prvAddNewTaskToReadyList+0x10c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d207      	bcs.n	8006a34 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006a24:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <prvAddNewTaskToReadyList+0x120>)
 8006a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006a34:	bf00      	nop
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20000a04 	.word	0x20000a04
 8006a40:	20000904 	.word	0x20000904
 8006a44:	20000a10 	.word	0x20000a10
 8006a48:	20000a20 	.word	0x20000a20
 8006a4c:	20000a0c 	.word	0x20000a0c
 8006a50:	20000908 	.word	0x20000908
 8006a54:	e000ed04 	.word	0xe000ed04

08006a58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d019      	beq.n	8006a9e <vTaskDelay+0x46>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8006a6a:	4b14      	ldr	r3, [pc, #80]	; (8006abc <vTaskDelay+0x64>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00c      	beq.n	8006a8c <vTaskDelay+0x34>
        __asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	b672      	cpsid	i
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	b662      	cpsie	i
 8006a86:	60bb      	str	r3, [r7, #8]
    }
 8006a88:	bf00      	nop
 8006a8a:	e7fe      	b.n	8006a8a <vTaskDelay+0x32>
            vTaskSuspendAll();
 8006a8c:	f000 f9ce 	bl	8006e2c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a90:	2100      	movs	r1, #0
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 ffa6 	bl	80079e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8006a98:	f000 f9d6 	bl	8006e48 <xTaskResumeAll>
 8006a9c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d107      	bne.n	8006ab4 <vTaskDelay+0x5c>
        {
            portYIELD_WITHIN_API();
 8006aa4:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <vTaskDelay+0x68>)
 8006aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006ab4:	bf00      	nop
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20000a2c 	.word	0x20000a2c
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8006acc:	f001 fc50 	bl	8008370 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d102      	bne.n	8006adc <vTaskSuspend+0x18>
 8006ad6:	4b44      	ldr	r3, [pc, #272]	; (8006be8 <vTaskSuspend+0x124>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	e000      	b.n	8006ade <vTaskSuspend+0x1a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff f8e1 	bl	8005cac <uxListRemove>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d115      	bne.n	8006b1c <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af4:	493d      	ldr	r1, [pc, #244]	; (8006bec <vTaskSuspend+0x128>)
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	440b      	add	r3, r1
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <vTaskSuspend+0x58>
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	43da      	mvns	r2, r3
 8006b12:	4b37      	ldr	r3, [pc, #220]	; (8006bf0 <vTaskSuspend+0x12c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4013      	ands	r3, r2
 8006b18:	4a35      	ldr	r2, [pc, #212]	; (8006bf0 <vTaskSuspend+0x12c>)
 8006b1a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	3318      	adds	r3, #24
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff f8bf 	bl	8005cac <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	3304      	adds	r3, #4
 8006b32:	4619      	mov	r1, r3
 8006b34:	482f      	ldr	r0, [pc, #188]	; (8006bf4 <vTaskSuspend+0x130>)
 8006b36:	f7ff f85c 	bl	8005bf2 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	e010      	b.n	8006b62 <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	4413      	add	r3, r2
 8006b46:	3350      	adds	r3, #80	; 0x50
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d105      	bne.n	8006b5c <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	4413      	add	r3, r2
 8006b56:	3350      	adds	r3, #80	; 0x50
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	ddeb      	ble.n	8006b40 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8006b68:	f001 fc36 	bl	80083d8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8006b6c:	4b22      	ldr	r3, [pc, #136]	; (8006bf8 <vTaskSuspend+0x134>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8006b74:	f001 fbfc 	bl	8008370 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8006b78:	f000 fe52 	bl	8007820 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8006b7c:	f001 fc2c 	bl	80083d8 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8006b80:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <vTaskSuspend+0x124>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d129      	bne.n	8006bde <vTaskSuspend+0x11a>
        {
            if( xSchedulerRunning != pdFALSE )
 8006b8a:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <vTaskSuspend+0x134>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d019      	beq.n	8006bc6 <vTaskSuspend+0x102>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8006b92:	4b1a      	ldr	r3, [pc, #104]	; (8006bfc <vTaskSuspend+0x138>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00c      	beq.n	8006bb4 <vTaskSuspend+0xf0>
        __asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	b672      	cpsid	i
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	b662      	cpsie	i
 8006bae:	60fb      	str	r3, [r7, #12]
    }
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <vTaskSuspend+0xee>
                portYIELD_WITHIN_API();
 8006bb4:	4b12      	ldr	r3, [pc, #72]	; (8006c00 <vTaskSuspend+0x13c>)
 8006bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006bc4:	e00b      	b.n	8006bde <vTaskSuspend+0x11a>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <vTaskSuspend+0x130>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4b0e      	ldr	r3, [pc, #56]	; (8006c04 <vTaskSuspend+0x140>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d103      	bne.n	8006bda <vTaskSuspend+0x116>
                    pxCurrentTCB = NULL;
 8006bd2:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <vTaskSuspend+0x124>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]
    }
 8006bd8:	e001      	b.n	8006bde <vTaskSuspend+0x11a>
                    vTaskSwitchContext();
 8006bda:	f000 fb5b 	bl	8007294 <vTaskSwitchContext>
    }
 8006bde:	bf00      	nop
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20000904 	.word	0x20000904
 8006bec:	20000908 	.word	0x20000908
 8006bf0:	20000a0c 	.word	0x20000a0c
 8006bf4:	200009f0 	.word	0x200009f0
 8006bf8:	20000a10 	.word	0x20000a10
 8006bfc:	20000a2c 	.word	0x20000a2c
 8006c00:	e000ed04 	.word	0xe000ed04
 8006c04:	20000a04 	.word	0x20000a04

08006c08 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10c      	bne.n	8006c38 <prvTaskIsTaskSuspended+0x30>
        __asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	b672      	cpsid	i
 8006c24:	f383 8811 	msr	BASEPRI, r3
 8006c28:	f3bf 8f6f 	isb	sy
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	b662      	cpsie	i
 8006c32:	60fb      	str	r3, [r7, #12]
    }
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <prvTaskIsTaskSuspended+0x2e>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	4a0a      	ldr	r2, [pc, #40]	; (8006c68 <prvTaskIsTaskSuspended+0x60>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d10a      	bne.n	8006c58 <prvTaskIsTaskSuspended+0x50>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	4a09      	ldr	r2, [pc, #36]	; (8006c6c <prvTaskIsTaskSuspended+0x64>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d005      	beq.n	8006c58 <prvTaskIsTaskSuspended+0x50>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <prvTaskIsTaskSuspended+0x50>
                {
                    xReturn = pdTRUE;
 8006c54:	2301      	movs	r3, #1
 8006c56:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006c58:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	200009f0 	.word	0x200009f0
 8006c6c:	200009c4 	.word	0x200009c4

08006c70 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10c      	bne.n	8006c9c <vTaskResume+0x2c>
        __asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	b672      	cpsid	i
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	b662      	cpsie	i
 8006c96:	60fb      	str	r3, [r7, #12]
    }
 8006c98:	bf00      	nop
 8006c9a:	e7fe      	b.n	8006c9a <vTaskResume+0x2a>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006c9c:	4b34      	ldr	r3, [pc, #208]	; (8006d70 <vTaskResume+0x100>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d05f      	beq.n	8006d66 <vTaskResume+0xf6>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d05c      	beq.n	8006d66 <vTaskResume+0xf6>
        {
            taskENTER_CRITICAL();
 8006cac:	f001 fb60 	bl	8008370 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006cb0:	6978      	ldr	r0, [r7, #20]
 8006cb2:	f7ff ffa9 	bl	8006c08 <prvTaskIsTaskSuspended>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d052      	beq.n	8006d62 <vTaskResume+0xf2>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe fff3 	bl	8005cac <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	2201      	movs	r2, #1
 8006ccc:	409a      	lsls	r2, r3
 8006cce:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <vTaskResume+0x104>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	4a27      	ldr	r2, [pc, #156]	; (8006d74 <vTaskResume+0x104>)
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cdc:	4926      	ldr	r1, [pc, #152]	; (8006d78 <vTaskResume+0x108>)
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	440b      	add	r3, r1
 8006ce8:	3304      	adds	r3, #4
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	613b      	str	r3, [r7, #16]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	609a      	str	r2, [r3, #8]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	60da      	str	r2, [r3, #12]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	3204      	adds	r2, #4
 8006d04:	605a      	str	r2, [r3, #4]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	609a      	str	r2, [r3, #8]
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <vTaskResume+0x108>)
 8006d1c:	441a      	add	r2, r3
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	615a      	str	r2, [r3, #20]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d26:	4914      	ldr	r1, [pc, #80]	; (8006d78 <vTaskResume+0x108>)
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	1c59      	adds	r1, r3, #1
 8006d36:	4810      	ldr	r0, [pc, #64]	; (8006d78 <vTaskResume+0x108>)
 8006d38:	4613      	mov	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4403      	add	r3, r0
 8006d42:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d48:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <vTaskResume+0x100>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d307      	bcc.n	8006d62 <vTaskResume+0xf2>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8006d52:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <vTaskResume+0x10c>)
 8006d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8006d62:	f001 fb39 	bl	80083d8 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006d66:	bf00      	nop
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000904 	.word	0x20000904
 8006d74:	20000a0c 	.word	0x20000a0c
 8006d78:	20000908 	.word	0x20000908
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <vTaskStartScheduler+0x90>)
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	2280      	movs	r2, #128	; 0x80
 8006d92:	4920      	ldr	r1, [pc, #128]	; (8006e14 <vTaskStartScheduler+0x94>)
 8006d94:	4820      	ldr	r0, [pc, #128]	; (8006e18 <vTaskStartScheduler+0x98>)
 8006d96:	f7ff fceb 	bl	8006770 <xTaskCreate>
 8006d9a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d102      	bne.n	8006da8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8006da2:	f000 fe9f 	bl	8007ae4 <xTimerCreateTimerTask>
 8006da6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d118      	bne.n	8006de0 <vTaskStartScheduler+0x60>
        __asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	b672      	cpsid	i
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	b662      	cpsie	i
 8006dc2:	60bb      	str	r3, [r7, #8]
    }
 8006dc4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006dc6:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <vTaskStartScheduler+0x9c>)
 8006dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dcc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006dce:	4b14      	ldr	r3, [pc, #80]	; (8006e20 <vTaskStartScheduler+0xa0>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006dd4:	4b13      	ldr	r3, [pc, #76]	; (8006e24 <vTaskStartScheduler+0xa4>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006dda:	f001 fa4b 	bl	8008274 <xPortStartScheduler>
 8006dde:	e010      	b.n	8006e02 <vTaskStartScheduler+0x82>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de6:	d10c      	bne.n	8006e02 <vTaskStartScheduler+0x82>
        __asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	b672      	cpsid	i
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	b662      	cpsie	i
 8006dfc:	607b      	str	r3, [r7, #4]
    }
 8006dfe:	bf00      	nop
 8006e00:	e7fe      	b.n	8006e00 <vTaskStartScheduler+0x80>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <vTaskStartScheduler+0xa8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
}
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000a28 	.word	0x20000a28
 8006e14:	0800b454 	.word	0x0800b454
 8006e18:	080076f5 	.word	0x080076f5
 8006e1c:	20000a24 	.word	0x20000a24
 8006e20:	20000a10 	.word	0x20000a10
 8006e24:	20000a08 	.word	0x20000a08
 8006e28:	20000010 	.word	0x20000010

08006e2c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006e30:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <vTaskSuspendAll+0x18>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	4a03      	ldr	r2, [pc, #12]	; (8006e44 <vTaskSuspendAll+0x18>)
 8006e38:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006e3a:	bf00      	nop
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	20000a2c 	.word	0x20000a2c

08006e48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006e56:	4b72      	ldr	r3, [pc, #456]	; (8007020 <xTaskResumeAll+0x1d8>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10c      	bne.n	8006e78 <xTaskResumeAll+0x30>
        __asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	b672      	cpsid	i
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	b662      	cpsie	i
 8006e72:	607b      	str	r3, [r7, #4]
    }
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006e78:	f001 fa7a 	bl	8008370 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006e7c:	4b68      	ldr	r3, [pc, #416]	; (8007020 <xTaskResumeAll+0x1d8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	4a67      	ldr	r2, [pc, #412]	; (8007020 <xTaskResumeAll+0x1d8>)
 8006e84:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e86:	4b66      	ldr	r3, [pc, #408]	; (8007020 <xTaskResumeAll+0x1d8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f040 80c0 	bne.w	8007010 <xTaskResumeAll+0x1c8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e90:	4b64      	ldr	r3, [pc, #400]	; (8007024 <xTaskResumeAll+0x1dc>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80bb 	beq.w	8007010 <xTaskResumeAll+0x1c8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e9a:	e08a      	b.n	8006fb2 <xTaskResumeAll+0x16a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e9c:	4b62      	ldr	r3, [pc, #392]	; (8007028 <xTaskResumeAll+0x1e0>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	69fa      	ldr	r2, [r7, #28]
 8006eb0:	6a12      	ldr	r2, [r2, #32]
 8006eb2:	609a      	str	r2, [r3, #8]
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	69fa      	ldr	r2, [r7, #28]
 8006eba:	69d2      	ldr	r2, [r2, #28]
 8006ebc:	605a      	str	r2, [r3, #4]
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	3318      	adds	r3, #24
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d103      	bne.n	8006ed2 <xTaskResumeAll+0x8a>
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	6a1a      	ldr	r2, [r3, #32]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	1e5a      	subs	r2, r3, #1
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	68d2      	ldr	r2, [r2, #12]
 8006ef0:	609a      	str	r2, [r3, #8]
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	69fa      	ldr	r2, [r7, #28]
 8006ef8:	6892      	ldr	r2, [r2, #8]
 8006efa:	605a      	str	r2, [r3, #4]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	3304      	adds	r3, #4
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d103      	bne.n	8006f10 <xTaskResumeAll+0xc8>
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	605a      	str	r2, [r3, #4]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	2200      	movs	r2, #0
 8006f14:	615a      	str	r2, [r3, #20]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	1e5a      	subs	r2, r3, #1
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	2201      	movs	r2, #1
 8006f26:	409a      	lsls	r2, r3
 8006f28:	4b40      	ldr	r3, [pc, #256]	; (800702c <xTaskResumeAll+0x1e4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	4a3f      	ldr	r2, [pc, #252]	; (800702c <xTaskResumeAll+0x1e4>)
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	493e      	ldr	r1, [pc, #248]	; (8007030 <xTaskResumeAll+0x1e8>)
 8006f38:	4613      	mov	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4413      	add	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	440b      	add	r3, r1
 8006f42:	3304      	adds	r3, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60bb      	str	r3, [r7, #8]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	609a      	str	r2, [r3, #8]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	3204      	adds	r2, #4
 8006f5e:	605a      	str	r2, [r3, #4]
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	609a      	str	r2, [r3, #8]
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4a2e      	ldr	r2, [pc, #184]	; (8007030 <xTaskResumeAll+0x1e8>)
 8006f76:	441a      	add	r2, r3
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	615a      	str	r2, [r3, #20]
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f80:	492b      	ldr	r1, [pc, #172]	; (8007030 <xTaskResumeAll+0x1e8>)
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	1c59      	adds	r1, r3, #1
 8006f90:	4827      	ldr	r0, [pc, #156]	; (8007030 <xTaskResumeAll+0x1e8>)
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4403      	add	r3, r0
 8006f9c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa2:	4b24      	ldr	r3, [pc, #144]	; (8007034 <xTaskResumeAll+0x1ec>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d302      	bcc.n	8006fb2 <xTaskResumeAll+0x16a>
                    {
                        xYieldPending = pdTRUE;
 8006fac:	4b22      	ldr	r3, [pc, #136]	; (8007038 <xTaskResumeAll+0x1f0>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fb2:	4b1d      	ldr	r3, [pc, #116]	; (8007028 <xTaskResumeAll+0x1e0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f47f af70 	bne.w	8006e9c <xTaskResumeAll+0x54>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <xTaskResumeAll+0x17e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006fc2:	f000 fc2d 	bl	8007820 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fc6:	4b1d      	ldr	r3, [pc, #116]	; (800703c <xTaskResumeAll+0x1f4>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d010      	beq.n	8006ff4 <xTaskResumeAll+0x1ac>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006fd2:	f000 f847 	bl	8007064 <xTaskIncrementTick>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <xTaskResumeAll+0x19a>
                            {
                                xYieldPending = pdTRUE;
 8006fdc:	4b16      	ldr	r3, [pc, #88]	; (8007038 <xTaskResumeAll+0x1f0>)
 8006fde:	2201      	movs	r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f1      	bne.n	8006fd2 <xTaskResumeAll+0x18a>

                        xPendedTicks = 0;
 8006fee:	4b13      	ldr	r3, [pc, #76]	; (800703c <xTaskResumeAll+0x1f4>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006ff4:	4b10      	ldr	r3, [pc, #64]	; (8007038 <xTaskResumeAll+0x1f0>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d009      	beq.n	8007010 <xTaskResumeAll+0x1c8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007000:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <xTaskResumeAll+0x1f8>)
 8007002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007010:	f001 f9e2 	bl	80083d8 <vPortExitCritical>

    return xAlreadyYielded;
 8007014:	69bb      	ldr	r3, [r7, #24]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3720      	adds	r7, #32
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000a2c 	.word	0x20000a2c
 8007024:	20000a04 	.word	0x20000a04
 8007028:	200009c4 	.word	0x200009c4
 800702c:	20000a0c 	.word	0x20000a0c
 8007030:	20000908 	.word	0x20000908
 8007034:	20000904 	.word	0x20000904
 8007038:	20000a18 	.word	0x20000a18
 800703c:	20000a14 	.word	0x20000a14
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800704a:	4b05      	ldr	r3, [pc, #20]	; (8007060 <xTaskGetTickCount+0x1c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007050:	687b      	ldr	r3, [r7, #4]
}
 8007052:	4618      	mov	r0, r3
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000a08 	.word	0x20000a08

08007064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	; 0x28
 8007068:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800706e:	4b7e      	ldr	r3, [pc, #504]	; (8007268 <xTaskIncrementTick+0x204>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 80ee 	bne.w	8007254 <xTaskIncrementTick+0x1f0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007078:	4b7c      	ldr	r3, [pc, #496]	; (800726c <xTaskIncrementTick+0x208>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007080:	4a7a      	ldr	r2, [pc, #488]	; (800726c <xTaskIncrementTick+0x208>)
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d122      	bne.n	80070d2 <xTaskIncrementTick+0x6e>
        {
            taskSWITCH_DELAYED_LISTS();
 800708c:	4b78      	ldr	r3, [pc, #480]	; (8007270 <xTaskIncrementTick+0x20c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00c      	beq.n	80070b0 <xTaskIncrementTick+0x4c>
        __asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709a:	b672      	cpsid	i
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	b662      	cpsie	i
 80070aa:	607b      	str	r3, [r7, #4]
    }
 80070ac:	bf00      	nop
 80070ae:	e7fe      	b.n	80070ae <xTaskIncrementTick+0x4a>
 80070b0:	4b6f      	ldr	r3, [pc, #444]	; (8007270 <xTaskIncrementTick+0x20c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	4b6f      	ldr	r3, [pc, #444]	; (8007274 <xTaskIncrementTick+0x210>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a6d      	ldr	r2, [pc, #436]	; (8007270 <xTaskIncrementTick+0x20c>)
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	4a6d      	ldr	r2, [pc, #436]	; (8007274 <xTaskIncrementTick+0x210>)
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	4b6c      	ldr	r3, [pc, #432]	; (8007278 <xTaskIncrementTick+0x214>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3301      	adds	r3, #1
 80070ca:	4a6b      	ldr	r2, [pc, #428]	; (8007278 <xTaskIncrementTick+0x214>)
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	f000 fba7 	bl	8007820 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80070d2:	4b6a      	ldr	r3, [pc, #424]	; (800727c <xTaskIncrementTick+0x218>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6a3a      	ldr	r2, [r7, #32]
 80070d8:	429a      	cmp	r2, r3
 80070da:	f0c0 80a6 	bcc.w	800722a <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070de:	4b64      	ldr	r3, [pc, #400]	; (8007270 <xTaskIncrementTick+0x20c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d104      	bne.n	80070f2 <xTaskIncrementTick+0x8e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e8:	4b64      	ldr	r3, [pc, #400]	; (800727c <xTaskIncrementTick+0x218>)
 80070ea:	f04f 32ff 	mov.w	r2, #4294967295
 80070ee:	601a      	str	r2, [r3, #0]
                    break;
 80070f0:	e09b      	b.n	800722a <xTaskIncrementTick+0x1c6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f2:	4b5f      	ldr	r3, [pc, #380]	; (8007270 <xTaskIncrementTick+0x20c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007102:	6a3a      	ldr	r2, [r7, #32]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	429a      	cmp	r2, r3
 8007108:	d203      	bcs.n	8007112 <xTaskIncrementTick+0xae>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800710a:	4a5c      	ldr	r2, [pc, #368]	; (800727c <xTaskIncrementTick+0x218>)
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007110:	e08b      	b.n	800722a <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	613b      	str	r3, [r7, #16]
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	68d2      	ldr	r2, [r2, #12]
 8007120:	609a      	str	r2, [r3, #8]
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	6892      	ldr	r2, [r2, #8]
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	3304      	adds	r3, #4
 8007134:	429a      	cmp	r2, r3
 8007136:	d103      	bne.n	8007140 <xTaskIncrementTick+0xdc>
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	605a      	str	r2, [r3, #4]
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2200      	movs	r2, #0
 8007144:	615a      	str	r2, [r3, #20]
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	1e5a      	subs	r2, r3, #1
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007154:	2b00      	cmp	r3, #0
 8007156:	d01e      	beq.n	8007196 <xTaskIncrementTick+0x132>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	6a12      	ldr	r2, [r2, #32]
 8007166:	609a      	str	r2, [r3, #8]
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	69d2      	ldr	r2, [r2, #28]
 8007170:	605a      	str	r2, [r3, #4]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	3318      	adds	r3, #24
 800717a:	429a      	cmp	r2, r3
 800717c:	d103      	bne.n	8007186 <xTaskIncrementTick+0x122>
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	6a1a      	ldr	r2, [r3, #32]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2200      	movs	r2, #0
 800718a:	629a      	str	r2, [r3, #40]	; 0x28
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	1e5a      	subs	r2, r3, #1
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	2201      	movs	r2, #1
 800719c:	409a      	lsls	r2, r3
 800719e:	4b38      	ldr	r3, [pc, #224]	; (8007280 <xTaskIncrementTick+0x21c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	4a36      	ldr	r2, [pc, #216]	; (8007280 <xTaskIncrementTick+0x21c>)
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ac:	4935      	ldr	r1, [pc, #212]	; (8007284 <xTaskIncrementTick+0x220>)
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	3304      	adds	r3, #4
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	609a      	str	r2, [r3, #8]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	60da      	str	r2, [r3, #12]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	3204      	adds	r2, #4
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	1d1a      	adds	r2, r3, #4
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	609a      	str	r2, [r3, #8]
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e2:	4613      	mov	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4a26      	ldr	r2, [pc, #152]	; (8007284 <xTaskIncrementTick+0x220>)
 80071ec:	441a      	add	r2, r3
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	615a      	str	r2, [r3, #20]
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f6:	4923      	ldr	r1, [pc, #140]	; (8007284 <xTaskIncrementTick+0x220>)
 80071f8:	4613      	mov	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	440b      	add	r3, r1
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	1c59      	adds	r1, r3, #1
 8007206:	481f      	ldr	r0, [pc, #124]	; (8007284 <xTaskIncrementTick+0x220>)
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4403      	add	r3, r0
 8007212:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	4b1b      	ldr	r3, [pc, #108]	; (8007288 <xTaskIncrementTick+0x224>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	429a      	cmp	r2, r3
 8007220:	f4ff af5d 	bcc.w	80070de <xTaskIncrementTick+0x7a>
                            {
                                xSwitchRequired = pdTRUE;
 8007224:	2301      	movs	r3, #1
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007228:	e759      	b.n	80070de <xTaskIncrementTick+0x7a>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800722a:	4b17      	ldr	r3, [pc, #92]	; (8007288 <xTaskIncrementTick+0x224>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007230:	4914      	ldr	r1, [pc, #80]	; (8007284 <xTaskIncrementTick+0x220>)
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	440b      	add	r3, r1
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d901      	bls.n	8007246 <xTaskIncrementTick+0x1e2>
                {
                    xSwitchRequired = pdTRUE;
 8007242:	2301      	movs	r3, #1
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8007246:	4b11      	ldr	r3, [pc, #68]	; (800728c <xTaskIncrementTick+0x228>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d007      	beq.n	800725e <xTaskIncrementTick+0x1fa>
                {
                    xSwitchRequired = pdTRUE;
 800724e:	2301      	movs	r3, #1
 8007250:	627b      	str	r3, [r7, #36]	; 0x24
 8007252:	e004      	b.n	800725e <xTaskIncrementTick+0x1fa>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007254:	4b0e      	ldr	r3, [pc, #56]	; (8007290 <xTaskIncrementTick+0x22c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3301      	adds	r3, #1
 800725a:	4a0d      	ldr	r2, [pc, #52]	; (8007290 <xTaskIncrementTick+0x22c>)
 800725c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007260:	4618      	mov	r0, r3
 8007262:	3728      	adds	r7, #40	; 0x28
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	20000a2c 	.word	0x20000a2c
 800726c:	20000a08 	.word	0x20000a08
 8007270:	200009bc 	.word	0x200009bc
 8007274:	200009c0 	.word	0x200009c0
 8007278:	20000a1c 	.word	0x20000a1c
 800727c:	20000a24 	.word	0x20000a24
 8007280:	20000a0c 	.word	0x20000a0c
 8007284:	20000908 	.word	0x20000908
 8007288:	20000904 	.word	0x20000904
 800728c:	20000a18 	.word	0x20000a18
 8007290:	20000a14 	.word	0x20000a14

08007294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800729a:	4b28      	ldr	r3, [pc, #160]	; (800733c <vTaskSwitchContext+0xa8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80072a2:	4b27      	ldr	r3, [pc, #156]	; (8007340 <vTaskSwitchContext+0xac>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80072a8:	e041      	b.n	800732e <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 80072aa:	4b25      	ldr	r3, [pc, #148]	; (8007340 <vTaskSwitchContext+0xac>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b0:	4b24      	ldr	r3, [pc, #144]	; (8007344 <vTaskSwitchContext+0xb0>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	fab3 f383 	clz	r3, r3
 80072bc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	f1c3 031f 	rsb	r3, r3, #31
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	4920      	ldr	r1, [pc, #128]	; (8007348 <vTaskSwitchContext+0xb4>)
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	440b      	add	r3, r1
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10c      	bne.n	80072f4 <vTaskSwitchContext+0x60>
        __asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	b672      	cpsid	i
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	b662      	cpsie	i
 80072ee:	607b      	str	r3, [r7, #4]
    }
 80072f0:	bf00      	nop
 80072f2:	e7fe      	b.n	80072f2 <vTaskSwitchContext+0x5e>
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4a12      	ldr	r2, [pc, #72]	; (8007348 <vTaskSwitchContext+0xb4>)
 8007300:	4413      	add	r3, r2
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	605a      	str	r2, [r3, #4]
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3308      	adds	r3, #8
 8007316:	429a      	cmp	r2, r3
 8007318:	d104      	bne.n	8007324 <vTaskSwitchContext+0x90>
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	605a      	str	r2, [r3, #4]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	4a08      	ldr	r2, [pc, #32]	; (800734c <vTaskSwitchContext+0xb8>)
 800732c:	6013      	str	r3, [r2, #0]
}
 800732e:	bf00      	nop
 8007330:	371c      	adds	r7, #28
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	20000a2c 	.word	0x20000a2c
 8007340:	20000a18 	.word	0x20000a18
 8007344:	20000a0c 	.word	0x20000a0c
 8007348:	20000908 	.word	0x20000908
 800734c:	20000904 	.word	0x20000904

08007350 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10c      	bne.n	800737a <vTaskPlaceOnEventList+0x2a>
        __asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	b672      	cpsid	i
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	b662      	cpsie	i
 8007374:	60fb      	str	r3, [r7, #12]
    }
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800737a:	4b07      	ldr	r3, [pc, #28]	; (8007398 <vTaskPlaceOnEventList+0x48>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3318      	adds	r3, #24
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fe fc59 	bl	8005c3a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007388:	2101      	movs	r1, #1
 800738a:	6838      	ldr	r0, [r7, #0]
 800738c:	f000 fb2a 	bl	80079e4 <prvAddCurrentTaskToDelayedList>
}
 8007390:	bf00      	nop
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20000904 	.word	0x20000904

0800739c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10c      	bne.n	80073c8 <vTaskPlaceOnEventListRestricted+0x2c>
        __asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	b672      	cpsid	i
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	b662      	cpsie	i
 80073c2:	613b      	str	r3, [r7, #16]
    }
 80073c4:	bf00      	nop
 80073c6:	e7fe      	b.n	80073c6 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	4b16      	ldr	r3, [pc, #88]	; (8007428 <vTaskPlaceOnEventListRestricted+0x8c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	61da      	str	r2, [r3, #28]
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <vTaskPlaceOnEventListRestricted+0x8c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	6892      	ldr	r2, [r2, #8]
 80073de:	621a      	str	r2, [r3, #32]
 80073e0:	4b11      	ldr	r3, [pc, #68]	; (8007428 <vTaskPlaceOnEventListRestricted+0x8c>)
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	3218      	adds	r2, #24
 80073ea:	605a      	str	r2, [r3, #4]
 80073ec:	4b0e      	ldr	r3, [pc, #56]	; (8007428 <vTaskPlaceOnEventListRestricted+0x8c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f103 0218 	add.w	r2, r3, #24
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	609a      	str	r2, [r3, #8]
 80073f8:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <vTaskPlaceOnEventListRestricted+0x8c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	629a      	str	r2, [r3, #40]	; 0x28
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <vTaskPlaceOnEventListRestricted+0x7a>
        {
            xTicksToWait = portMAX_DELAY;
 8007410:	f04f 33ff 	mov.w	r3, #4294967295
 8007414:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	68b8      	ldr	r0, [r7, #8]
 800741a:	f000 fae3 	bl	80079e4 <prvAddCurrentTaskToDelayedList>
    }
 800741e:	bf00      	nop
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000904 	.word	0x20000904

0800742c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800742c:	b480      	push	{r7}
 800742e:	b08b      	sub	sp, #44	; 0x2c
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10c      	bne.n	800745c <xTaskRemoveFromEventList+0x30>
        __asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	b672      	cpsid	i
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	b662      	cpsie	i
 8007456:	60fb      	str	r3, [r7, #12]
    }
 8007458:	bf00      	nop
 800745a:	e7fe      	b.n	800745a <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	6a3a      	ldr	r2, [r7, #32]
 8007468:	6a12      	ldr	r2, [r2, #32]
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	6a3a      	ldr	r2, [r7, #32]
 8007472:	69d2      	ldr	r2, [r2, #28]
 8007474:	605a      	str	r2, [r3, #4]
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	3318      	adds	r3, #24
 800747e:	429a      	cmp	r2, r3
 8007480:	d103      	bne.n	800748a <xTaskRemoveFromEventList+0x5e>
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	2200      	movs	r2, #0
 800748e:	629a      	str	r2, [r3, #40]	; 0x28
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	1e5a      	subs	r2, r3, #1
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800749a:	4b4a      	ldr	r3, [pc, #296]	; (80075c4 <xTaskRemoveFromEventList+0x198>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d15e      	bne.n	8007560 <xTaskRemoveFromEventList+0x134>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	6a3a      	ldr	r2, [r7, #32]
 80074ae:	68d2      	ldr	r2, [r2, #12]
 80074b0:	609a      	str	r2, [r3, #8]
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	6a3a      	ldr	r2, [r7, #32]
 80074b8:	6892      	ldr	r2, [r2, #8]
 80074ba:	605a      	str	r2, [r3, #4]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	3304      	adds	r3, #4
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d103      	bne.n	80074d0 <xTaskRemoveFromEventList+0xa4>
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	605a      	str	r2, [r3, #4]
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	2200      	movs	r2, #0
 80074d4:	615a      	str	r2, [r3, #20]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	1e5a      	subs	r2, r3, #1
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	2201      	movs	r2, #1
 80074e6:	409a      	lsls	r2, r3
 80074e8:	4b37      	ldr	r3, [pc, #220]	; (80075c8 <xTaskRemoveFromEventList+0x19c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	4a36      	ldr	r2, [pc, #216]	; (80075c8 <xTaskRemoveFromEventList+0x19c>)
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f6:	4935      	ldr	r1, [pc, #212]	; (80075cc <xTaskRemoveFromEventList+0x1a0>)
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	440b      	add	r3, r1
 8007502:	3304      	adds	r3, #4
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	613b      	str	r3, [r7, #16]
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	609a      	str	r2, [r3, #8]
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	60da      	str	r2, [r3, #12]
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	6a3a      	ldr	r2, [r7, #32]
 800751c:	3204      	adds	r2, #4
 800751e:	605a      	str	r2, [r3, #4]
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	1d1a      	adds	r2, r3, #4
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	609a      	str	r2, [r3, #8]
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4a25      	ldr	r2, [pc, #148]	; (80075cc <xTaskRemoveFromEventList+0x1a0>)
 8007536:	441a      	add	r2, r3
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	615a      	str	r2, [r3, #20]
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007540:	4922      	ldr	r1, [pc, #136]	; (80075cc <xTaskRemoveFromEventList+0x1a0>)
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	1c59      	adds	r1, r3, #1
 8007550:	481e      	ldr	r0, [pc, #120]	; (80075cc <xTaskRemoveFromEventList+0x1a0>)
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4403      	add	r3, r0
 800755c:	6019      	str	r1, [r3, #0]
 800755e:	e01b      	b.n	8007598 <xTaskRemoveFromEventList+0x16c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007560:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <xTaskRemoveFromEventList+0x1a4>)
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	61da      	str	r2, [r3, #28]
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	6a3b      	ldr	r3, [r7, #32]
 8007572:	621a      	str	r2, [r3, #32]
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	6a3a      	ldr	r2, [r7, #32]
 800757a:	3218      	adds	r2, #24
 800757c:	605a      	str	r2, [r3, #4]
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	f103 0218 	add.w	r2, r3, #24
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	609a      	str	r2, [r3, #8]
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	4a11      	ldr	r2, [pc, #68]	; (80075d0 <xTaskRemoveFromEventList+0x1a4>)
 800758c:	629a      	str	r2, [r3, #40]	; 0x28
 800758e:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <xTaskRemoveFromEventList+0x1a4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3301      	adds	r3, #1
 8007594:	4a0e      	ldr	r2, [pc, #56]	; (80075d0 <xTaskRemoveFromEventList+0x1a4>)
 8007596:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759c:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <xTaskRemoveFromEventList+0x1a8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d905      	bls.n	80075b2 <xTaskRemoveFromEventList+0x186>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80075a6:	2301      	movs	r3, #1
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80075aa:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <xTaskRemoveFromEventList+0x1ac>)
 80075ac:	2201      	movs	r2, #1
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	e001      	b.n	80075b6 <xTaskRemoveFromEventList+0x18a>
    }
    else
    {
        xReturn = pdFALSE;
 80075b2:	2300      	movs	r3, #0
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80075b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	372c      	adds	r7, #44	; 0x2c
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	20000a2c 	.word	0x20000a2c
 80075c8:	20000a0c 	.word	0x20000a0c
 80075cc:	20000908 	.word	0x20000908
 80075d0:	200009c4 	.word	0x200009c4
 80075d4:	20000904 	.word	0x20000904
 80075d8:	20000a18 	.word	0x20000a18

080075dc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075e4:	4b06      	ldr	r3, [pc, #24]	; (8007600 <vTaskInternalSetTimeOutState+0x24>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80075ec:	4b05      	ldr	r3, [pc, #20]	; (8007604 <vTaskInternalSetTimeOutState+0x28>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	605a      	str	r2, [r3, #4]
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	20000a1c 	.word	0x20000a1c
 8007604:	20000a08 	.word	0x20000a08

08007608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10c      	bne.n	8007632 <xTaskCheckForTimeOut+0x2a>
        __asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	b672      	cpsid	i
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	b662      	cpsie	i
 800762c:	613b      	str	r3, [r7, #16]
    }
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10c      	bne.n	8007652 <xTaskCheckForTimeOut+0x4a>
        __asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	b672      	cpsid	i
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	b662      	cpsie	i
 800764c:	60fb      	str	r3, [r7, #12]
    }
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <xTaskCheckForTimeOut+0x48>

    taskENTER_CRITICAL();
 8007652:	f000 fe8d 	bl	8008370 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007656:	4b1f      	ldr	r3, [pc, #124]	; (80076d4 <xTaskCheckForTimeOut+0xcc>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	69ba      	ldr	r2, [r7, #24]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766e:	d102      	bne.n	8007676 <xTaskCheckForTimeOut+0x6e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007670:	2300      	movs	r3, #0
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	e026      	b.n	80076c4 <xTaskCheckForTimeOut+0xbc>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <xTaskCheckForTimeOut+0xd0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d00a      	beq.n	8007698 <xTaskCheckForTimeOut+0x90>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	429a      	cmp	r2, r3
 800768a:	d305      	bcc.n	8007698 <xTaskCheckForTimeOut+0x90>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800768c:	2301      	movs	r3, #1
 800768e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e015      	b.n	80076c4 <xTaskCheckForTimeOut+0xbc>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d20b      	bcs.n	80076ba <xTaskCheckForTimeOut+0xb2>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	1ad2      	subs	r2, r2, r3
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff ff94 	bl	80075dc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80076b4:	2300      	movs	r3, #0
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e004      	b.n	80076c4 <xTaskCheckForTimeOut+0xbc>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80076c4:	f000 fe88 	bl	80083d8 <vPortExitCritical>

    return xReturn;
 80076c8:	69fb      	ldr	r3, [r7, #28]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3720      	adds	r7, #32
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000a08 	.word	0x20000a08
 80076d8:	20000a1c 	.word	0x20000a1c

080076dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80076e0:	4b03      	ldr	r3, [pc, #12]	; (80076f0 <vTaskMissedYield+0x14>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	601a      	str	r2, [r3, #0]
}
 80076e6:	bf00      	nop
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	20000a18 	.word	0x20000a18

080076f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80076fc:	f000 f852 	bl	80077a4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007700:	4b06      	ldr	r3, [pc, #24]	; (800771c <prvIdleTask+0x28>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d9f9      	bls.n	80076fc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8007708:	4b05      	ldr	r3, [pc, #20]	; (8007720 <prvIdleTask+0x2c>)
 800770a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007718:	e7f0      	b.n	80076fc <prvIdleTask+0x8>
 800771a:	bf00      	nop
 800771c:	20000908 	.word	0x20000908
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800772a:	2300      	movs	r3, #0
 800772c:	607b      	str	r3, [r7, #4]
 800772e:	e00c      	b.n	800774a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4a12      	ldr	r2, [pc, #72]	; (8007784 <prvInitialiseTaskLists+0x60>)
 800773c:	4413      	add	r3, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fa2a 	bl	8005b98 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3301      	adds	r3, #1
 8007748:	607b      	str	r3, [r7, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b06      	cmp	r3, #6
 800774e:	d9ef      	bls.n	8007730 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007750:	480d      	ldr	r0, [pc, #52]	; (8007788 <prvInitialiseTaskLists+0x64>)
 8007752:	f7fe fa21 	bl	8005b98 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007756:	480d      	ldr	r0, [pc, #52]	; (800778c <prvInitialiseTaskLists+0x68>)
 8007758:	f7fe fa1e 	bl	8005b98 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800775c:	480c      	ldr	r0, [pc, #48]	; (8007790 <prvInitialiseTaskLists+0x6c>)
 800775e:	f7fe fa1b 	bl	8005b98 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007762:	480c      	ldr	r0, [pc, #48]	; (8007794 <prvInitialiseTaskLists+0x70>)
 8007764:	f7fe fa18 	bl	8005b98 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007768:	480b      	ldr	r0, [pc, #44]	; (8007798 <prvInitialiseTaskLists+0x74>)
 800776a:	f7fe fa15 	bl	8005b98 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800776e:	4b0b      	ldr	r3, [pc, #44]	; (800779c <prvInitialiseTaskLists+0x78>)
 8007770:	4a05      	ldr	r2, [pc, #20]	; (8007788 <prvInitialiseTaskLists+0x64>)
 8007772:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007774:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <prvInitialiseTaskLists+0x7c>)
 8007776:	4a05      	ldr	r2, [pc, #20]	; (800778c <prvInitialiseTaskLists+0x68>)
 8007778:	601a      	str	r2, [r3, #0]
}
 800777a:	bf00      	nop
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20000908 	.word	0x20000908
 8007788:	20000994 	.word	0x20000994
 800778c:	200009a8 	.word	0x200009a8
 8007790:	200009c4 	.word	0x200009c4
 8007794:	200009d8 	.word	0x200009d8
 8007798:	200009f0 	.word	0x200009f0
 800779c:	200009bc 	.word	0x200009bc
 80077a0:	200009c0 	.word	0x200009c0

080077a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077aa:	e019      	b.n	80077e0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80077ac:	f000 fde0 	bl	8008370 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077b0:	4b10      	ldr	r3, [pc, #64]	; (80077f4 <prvCheckTasksWaitingTermination+0x50>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fe fa75 	bl	8005cac <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80077c2:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <prvCheckTasksWaitingTermination+0x54>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	4a0b      	ldr	r2, [pc, #44]	; (80077f8 <prvCheckTasksWaitingTermination+0x54>)
 80077ca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80077cc:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <prvCheckTasksWaitingTermination+0x58>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <prvCheckTasksWaitingTermination+0x58>)
 80077d4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80077d6:	f000 fdff 	bl	80083d8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f810 	bl	8007800 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077e0:	4b06      	ldr	r3, [pc, #24]	; (80077fc <prvCheckTasksWaitingTermination+0x58>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1e1      	bne.n	80077ac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80077e8:	bf00      	nop
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	200009d8 	.word	0x200009d8
 80077f8:	20000a04 	.word	0x20000a04
 80077fc:	200009ec 	.word	0x200009ec

08007800 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	4618      	mov	r0, r3
 800780e:	f000 ffc1 	bl	8008794 <vPortFree>
                vPortFree( pxTCB );
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 ffbe 	bl	8008794 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007824:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <prvResetNextTaskUnblockTime+0x30>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800782e:	4b09      	ldr	r3, [pc, #36]	; (8007854 <prvResetNextTaskUnblockTime+0x34>)
 8007830:	f04f 32ff 	mov.w	r2, #4294967295
 8007834:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007836:	e005      	b.n	8007844 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007838:	4b05      	ldr	r3, [pc, #20]	; (8007850 <prvResetNextTaskUnblockTime+0x30>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a04      	ldr	r2, [pc, #16]	; (8007854 <prvResetNextTaskUnblockTime+0x34>)
 8007842:	6013      	str	r3, [r2, #0]
}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	200009bc 	.word	0x200009bc
 8007854:	20000a24 	.word	0x20000a24

08007858 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800785e:	4b0b      	ldr	r3, [pc, #44]	; (800788c <xTaskGetSchedulerState+0x34>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d102      	bne.n	800786c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007866:	2301      	movs	r3, #1
 8007868:	607b      	str	r3, [r7, #4]
 800786a:	e008      	b.n	800787e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800786c:	4b08      	ldr	r3, [pc, #32]	; (8007890 <xTaskGetSchedulerState+0x38>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007874:	2302      	movs	r3, #2
 8007876:	607b      	str	r3, [r7, #4]
 8007878:	e001      	b.n	800787e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800787a:	2300      	movs	r3, #0
 800787c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800787e:	687b      	ldr	r3, [r7, #4]
    }
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	20000a10 	.word	0x20000a10
 8007890:	20000a2c 	.word	0x20000a2c

08007894 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 8090 	beq.w	80079cc <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80078ac:	4b4a      	ldr	r3, [pc, #296]	; (80079d8 <xTaskPriorityDisinherit+0x144>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d00c      	beq.n	80078d0 <xTaskPriorityDisinherit+0x3c>
        __asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	b672      	cpsid	i
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	b662      	cpsie	i
 80078ca:	613b      	str	r3, [r7, #16]
    }
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10c      	bne.n	80078f2 <xTaskPriorityDisinherit+0x5e>
        __asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	b672      	cpsid	i
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	b662      	cpsie	i
 80078ec:	60fb      	str	r3, [r7, #12]
    }
 80078ee:	bf00      	nop
 80078f0:	e7fe      	b.n	80078f0 <xTaskPriorityDisinherit+0x5c>
            ( pxTCB->uxMutexesHeld )--;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f6:	1e5a      	subs	r2, r3, #1
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007904:	429a      	cmp	r2, r3
 8007906:	d061      	beq.n	80079cc <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790c:	2b00      	cmp	r3, #0
 800790e:	d15d      	bne.n	80079cc <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	3304      	adds	r3, #4
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe f9c9 	bl	8005cac <uxListRemove>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <xTaskPriorityDisinherit+0xa2>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	2201      	movs	r2, #1
 8007926:	fa02 f303 	lsl.w	r3, r2, r3
 800792a:	43da      	mvns	r2, r3
 800792c:	4b2b      	ldr	r3, [pc, #172]	; (80079dc <xTaskPriorityDisinherit+0x148>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4013      	ands	r3, r2
 8007932:	4a2a      	ldr	r2, [pc, #168]	; (80079dc <xTaskPriorityDisinherit+0x148>)
 8007934:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007942:	f1c3 0207 	rsb	r2, r3, #7
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	2201      	movs	r2, #1
 8007950:	409a      	lsls	r2, r3
 8007952:	4b22      	ldr	r3, [pc, #136]	; (80079dc <xTaskPriorityDisinherit+0x148>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4313      	orrs	r3, r2
 8007958:	4a20      	ldr	r2, [pc, #128]	; (80079dc <xTaskPriorityDisinherit+0x148>)
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007960:	491f      	ldr	r1, [pc, #124]	; (80079e0 <xTaskPriorityDisinherit+0x14c>)
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	3304      	adds	r3, #4
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	609a      	str	r2, [r3, #8]
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	60da      	str	r2, [r3, #12]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	3204      	adds	r2, #4
 8007988:	605a      	str	r2, [r3, #4]
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	1d1a      	adds	r2, r3, #4
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	609a      	str	r2, [r3, #8]
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4a10      	ldr	r2, [pc, #64]	; (80079e0 <xTaskPriorityDisinherit+0x14c>)
 80079a0:	441a      	add	r2, r3
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	615a      	str	r2, [r3, #20]
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079aa:	490d      	ldr	r1, [pc, #52]	; (80079e0 <xTaskPriorityDisinherit+0x14c>)
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	1c59      	adds	r1, r3, #1
 80079ba:	4809      	ldr	r0, [pc, #36]	; (80079e0 <xTaskPriorityDisinherit+0x14c>)
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4403      	add	r3, r0
 80079c6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80079c8:	2301      	movs	r3, #1
 80079ca:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80079cc:	69fb      	ldr	r3, [r7, #28]
    }
 80079ce:	4618      	mov	r0, r3
 80079d0:	3720      	adds	r7, #32
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	20000904 	.word	0x20000904
 80079dc:	20000a0c 	.word	0x20000a0c
 80079e0:	20000908 	.word	0x20000908

080079e4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80079ee:	4b36      	ldr	r3, [pc, #216]	; (8007ac8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079f4:	4b35      	ldr	r3, [pc, #212]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7fe f956 	bl	8005cac <uxListRemove>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10b      	bne.n	8007a1e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a06:	4b31      	ldr	r3, [pc, #196]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a12:	43da      	mvns	r2, r3
 8007a14:	4b2e      	ldr	r3, [pc, #184]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xec>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	4a2d      	ldr	r2, [pc, #180]	; (8007ad0 <prvAddCurrentTaskToDelayedList+0xec>)
 8007a1c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d124      	bne.n	8007a70 <prvAddCurrentTaskToDelayedList+0x8c>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d021      	beq.n	8007a70 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a2c:	4b29      	ldr	r3, [pc, #164]	; (8007ad4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	4b26      	ldr	r3, [pc, #152]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	609a      	str	r2, [r3, #8]
 8007a3a:	4b24      	ldr	r3, [pc, #144]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	6892      	ldr	r2, [r2, #8]
 8007a42:	60da      	str	r2, [r3, #12]
 8007a44:	4b21      	ldr	r3, [pc, #132]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	3204      	adds	r2, #4
 8007a4e:	605a      	str	r2, [r3, #4]
 8007a50:	4b1e      	ldr	r3, [pc, #120]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	1d1a      	adds	r2, r3, #4
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	609a      	str	r2, [r3, #8]
 8007a5a:	4b1c      	ldr	r3, [pc, #112]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1d      	ldr	r2, [pc, #116]	; (8007ad4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007a60:	615a      	str	r2, [r3, #20]
 8007a62:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3301      	adds	r3, #1
 8007a68:	4a1a      	ldr	r2, [pc, #104]	; (8007ad4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007a6e:	e026      	b.n	8007abe <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4413      	add	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a78:	4b14      	ldr	r3, [pc, #80]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d209      	bcs.n	8007a9c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a88:	4b13      	ldr	r3, [pc, #76]	; (8007ad8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3304      	adds	r3, #4
 8007a92:	4619      	mov	r1, r3
 8007a94:	4610      	mov	r0, r2
 8007a96:	f7fe f8d0 	bl	8005c3a <vListInsert>
}
 8007a9a:	e010      	b.n	8007abe <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a9c:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <prvAddCurrentTaskToDelayedList+0xf8>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <prvAddCurrentTaskToDelayedList+0xe8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f7fe f8c6 	bl	8005c3a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007aae:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d202      	bcs.n	8007abe <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8007ab8:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6013      	str	r3, [r2, #0]
}
 8007abe:	bf00      	nop
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000a08 	.word	0x20000a08
 8007acc:	20000904 	.word	0x20000904
 8007ad0:	20000a0c 	.word	0x20000a0c
 8007ad4:	200009f0 	.word	0x200009f0
 8007ad8:	200009c0 	.word	0x200009c0
 8007adc:	200009bc 	.word	0x200009bc
 8007ae0:	20000a24 	.word	0x20000a24

08007ae4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007aee:	f000 faf7 	bl	80080e0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007af2:	4b12      	ldr	r3, [pc, #72]	; (8007b3c <xTimerCreateTimerTask+0x58>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8007afa:	4b11      	ldr	r3, [pc, #68]	; (8007b40 <xTimerCreateTimerTask+0x5c>)
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	2306      	movs	r3, #6
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	2300      	movs	r3, #0
 8007b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b08:	490e      	ldr	r1, [pc, #56]	; (8007b44 <xTimerCreateTimerTask+0x60>)
 8007b0a:	480f      	ldr	r0, [pc, #60]	; (8007b48 <xTimerCreateTimerTask+0x64>)
 8007b0c:	f7fe fe30 	bl	8006770 <xTaskCreate>
 8007b10:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10c      	bne.n	8007b32 <xTimerCreateTimerTask+0x4e>
        __asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	b672      	cpsid	i
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	b662      	cpsie	i
 8007b2c:	603b      	str	r3, [r7, #0]
    }
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xTimerCreateTimerTask+0x4c>
        return xReturn;
 8007b32:	687b      	ldr	r3, [r7, #4]
    }
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20000a60 	.word	0x20000a60
 8007b40:	20000a64 	.word	0x20000a64
 8007b44:	0800b45c 	.word	0x0800b45c
 8007b48:	08007d49 	.word	0x08007d49

08007b4c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b088      	sub	sp, #32
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007b5a:	2028      	movs	r0, #40	; 0x28
 8007b5c:	f000 fd34 	bl	80085c8 <pvPortMalloc>
 8007b60:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00d      	beq.n	8007b84 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	9301      	str	r3, [sp, #4]
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f000 f805 	bl	8007b8e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8007b84:	697b      	ldr	r3, [r7, #20]
        }
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b086      	sub	sp, #24
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60f8      	str	r0, [r7, #12]
 8007b96:	60b9      	str	r1, [r7, #8]
 8007b98:	607a      	str	r2, [r7, #4]
 8007b9a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10c      	bne.n	8007bbc <prvInitialiseNewTimer+0x2e>
        __asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	b672      	cpsid	i
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	b662      	cpsie	i
 8007bb6:	617b      	str	r3, [r7, #20]
    }
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <prvInitialiseNewTimer+0x2c>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8007bbc:	f000 fa90 	bl	80080e0 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	6a3a      	ldr	r2, [r7, #32]
 8007bd6:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	3304      	adds	r3, #4
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fd fffb 	bl	8005bd8 <vListInitialiseItem>

        if( uxAutoReload != pdFALSE )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d008      	beq.n	8007bfa <prvInitialiseNewTimer+0x6c>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bee:	f043 0304 	orr.w	r3, r3, #4
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8007bfa:	bf00      	nop
 8007bfc:	3718      	adds	r7, #24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08a      	sub	sp, #40	; 0x28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10c      	bne.n	8007c36 <xTimerGenericCommand+0x32>
        __asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	b672      	cpsid	i
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	b662      	cpsie	i
 8007c30:	623b      	str	r3, [r7, #32]
    }
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xTimerGenericCommand+0x30>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007c36:	4b1a      	ldr	r3, [pc, #104]	; (8007ca0 <xTimerGenericCommand+0x9c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d02a      	beq.n	8007c94 <xTimerGenericCommand+0x90>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b05      	cmp	r3, #5
 8007c4e:	dc18      	bgt.n	8007c82 <xTimerGenericCommand+0x7e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c50:	f7ff fe02 	bl	8007858 <xTaskGetSchedulerState>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d109      	bne.n	8007c6e <xTimerGenericCommand+0x6a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c5a:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <xTimerGenericCommand+0x9c>)
 8007c5c:	6818      	ldr	r0, [r3, #0]
 8007c5e:	f107 0114 	add.w	r1, r7, #20
 8007c62:	2300      	movs	r3, #0
 8007c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c66:	f7fe f94f 	bl	8005f08 <xQueueGenericSend>
 8007c6a:	6278      	str	r0, [r7, #36]	; 0x24
 8007c6c:	e012      	b.n	8007c94 <xTimerGenericCommand+0x90>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <xTimerGenericCommand+0x9c>)
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	f107 0114 	add.w	r1, r7, #20
 8007c76:	2300      	movs	r3, #0
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f7fe f945 	bl	8005f08 <xQueueGenericSend>
 8007c7e:	6278      	str	r0, [r7, #36]	; 0x24
 8007c80:	e008      	b.n	8007c94 <xTimerGenericCommand+0x90>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <xTimerGenericCommand+0x9c>)
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	f107 0114 	add.w	r1, r7, #20
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	f7fe fa41 	bl	8006114 <xQueueGenericSendFromISR>
 8007c92:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007c96:	4618      	mov	r0, r3
 8007c98:	3728      	adds	r7, #40	; 0x28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000a60 	.word	0x20000a60

08007ca4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007cb0:	e008      	b.n	8007cc4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	4413      	add	r3, r2
 8007cba:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	699a      	ldr	r2, [r3, #24]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	18d1      	adds	r1, r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 f8dd 	bl	8007e90 <prvInsertTimerInActiveList>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1ea      	bne.n	8007cb2 <prvReloadTimer+0xe>
        }
    }
 8007cdc:	bf00      	nop
 8007cde:	bf00      	nop
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cf2:	4b14      	ldr	r3, [pc, #80]	; (8007d44 <prvProcessExpiredTimer+0x5c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	3304      	adds	r3, #4
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fd ffd3 	bl	8005cac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff ffc3 	bl	8007ca4 <prvReloadTimer>
 8007d1e:	e008      	b.n	8007d32 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d26:	f023 0301 	bic.w	r3, r3, #1
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	4798      	blx	r3
    }
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20000a58 	.word	0x20000a58

08007d48 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 f857 	bl	8007e08 <prvGetNextExpireTime>
 8007d5a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f803 	bl	8007d6c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007d66:	f000 f8d5 	bl	8007f14 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d6a:	e7f1      	b.n	8007d50 <prvTimerTask+0x8>

08007d6c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007d76:	f7ff f859 	bl	8006e2c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d7a:	f107 0308 	add.w	r3, r7, #8
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 f866 	bl	8007e50 <prvSampleTimeNow>
 8007d84:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d130      	bne.n	8007dee <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10a      	bne.n	8007da8 <prvProcessTimerOrBlockTask+0x3c>
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d806      	bhi.n	8007da8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007d9a:	f7ff f855 	bl	8006e48 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff ffa1 	bl	8007ce8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007da6:	e024      	b.n	8007df2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d008      	beq.n	8007dc0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <prvProcessTimerOrBlockTask+0x90>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <prvProcessTimerOrBlockTask+0x50>
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <prvProcessTimerOrBlockTask+0x52>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <prvProcessTimerOrBlockTask+0x94>)
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f7fe fc9b 	bl	8006708 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007dd2:	f7ff f839 	bl	8006e48 <xTaskResumeAll>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10a      	bne.n	8007df2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <prvProcessTimerOrBlockTask+0x98>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
    }
 8007dec:	e001      	b.n	8007df2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007dee:	f7ff f82b 	bl	8006e48 <xTaskResumeAll>
    }
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000a5c 	.word	0x20000a5c
 8007e00:	20000a60 	.word	0x20000a60
 8007e04:	e000ed04 	.word	0xe000ed04

08007e08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e10:	4b0e      	ldr	r3, [pc, #56]	; (8007e4c <prvGetNextExpireTime+0x44>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <prvGetNextExpireTime+0x16>
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	e000      	b.n	8007e20 <prvGetNextExpireTime+0x18>
 8007e1e:	2200      	movs	r2, #0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d105      	bne.n	8007e38 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e2c:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <prvGetNextExpireTime+0x44>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	e001      	b.n	8007e3c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
    }
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20000a58 	.word	0x20000a58

08007e50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007e58:	f7ff f8f4 	bl	8007044 <xTaskGetTickCount>
 8007e5c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007e5e:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <prvSampleTimeNow+0x3c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d205      	bcs.n	8007e74 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007e68:	f000 f914 	bl	8008094 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	e002      	b.n	8007e7a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007e7a:	4a04      	ldr	r2, [pc, #16]	; (8007e8c <prvSampleTimeNow+0x3c>)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007e80:	68fb      	ldr	r3, [r7, #12]
    }
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000a68 	.word	0x20000a68

08007e90 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d812      	bhi.n	8007edc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	1ad2      	subs	r2, r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d302      	bcc.n	8007eca <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	e01b      	b.n	8007f02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007eca:	4b10      	ldr	r3, [pc, #64]	; (8007f0c <prvInsertTimerInActiveList+0x7c>)
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f7fd feb0 	bl	8005c3a <vListInsert>
 8007eda:	e012      	b.n	8007f02 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d206      	bcs.n	8007ef2 <prvInsertTimerInActiveList+0x62>
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d302      	bcc.n	8007ef2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]
 8007ef0:	e007      	b.n	8007f02 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ef2:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <prvInsertTimerInActiveList+0x80>)
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	4619      	mov	r1, r3
 8007efc:	4610      	mov	r0, r2
 8007efe:	f7fd fe9c 	bl	8005c3a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007f02:	697b      	ldr	r3, [r7, #20]
    }
 8007f04:	4618      	mov	r0, r3
 8007f06:	3718      	adds	r7, #24
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20000a5c 	.word	0x20000a5c
 8007f10:	20000a58 	.word	0x20000a58

08007f14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f1a:	e0a8      	b.n	800806e <prvProcessReceivedCommands+0x15a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f2c0 80a4 	blt.w	800806c <prvProcessReceivedCommands+0x158>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d004      	beq.n	8007f3a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	3304      	adds	r3, #4
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fd feb9 	bl	8005cac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f3a:	1d3b      	adds	r3, r7, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff ff87 	bl	8007e50 <prvSampleTimeNow>
 8007f42:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	f200 8090 	bhi.w	800806e <prvProcessReceivedCommands+0x15a>
 8007f4e:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <prvProcessReceivedCommands+0x40>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007f79 	.word	0x08007f79
 8007f58:	08007f79 	.word	0x08007f79
 8007f5c:	08007fe1 	.word	0x08007fe1
 8007f60:	08007ff5 	.word	0x08007ff5
 8007f64:	08008043 	.word	0x08008043
 8007f68:	08007f79 	.word	0x08007f79
 8007f6c:	08007f79 	.word	0x08007f79
 8007f70:	08007fe1 	.word	0x08007fe1
 8007f74:	08007ff5 	.word	0x08007ff5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	18d1      	adds	r1, r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	69f8      	ldr	r0, [r7, #28]
 8007f98:	f7ff ff7a 	bl	8007e90 <prvInsertTimerInActiveList>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d065      	beq.n	800806e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d009      	beq.n	8007fc4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	69f8      	ldr	r0, [r7, #28]
 8007fbe:	f7ff fe71 	bl	8007ca4 <prvReloadTimer>
 8007fc2:	e008      	b.n	8007fd6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fca:	f023 0301 	bic.w	r3, r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	69f8      	ldr	r0, [r7, #28]
 8007fdc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007fde:	e046      	b.n	800806e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007fe6:	f023 0301 	bic.w	r3, r3, #1
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8007ff2:	e03c      	b.n	800806e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ffa:	f043 0301 	orr.w	r3, r3, #1
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10c      	bne.n	800802e <prvProcessReceivedCommands+0x11a>
        __asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	b672      	cpsid	i
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	b662      	cpsie	i
 8008028:	617b      	str	r3, [r7, #20]
    }
 800802a:	bf00      	nop
 800802c:	e7fe      	b.n	800802c <prvProcessReceivedCommands+0x118>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	699a      	ldr	r2, [r3, #24]
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	18d1      	adds	r1, r2, r3
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	69f8      	ldr	r0, [r7, #28]
 800803c:	f7ff ff28 	bl	8007e90 <prvInsertTimerInActiveList>
                        break;
 8008040:	e015      	b.n	800806e <prvProcessReceivedCommands+0x15a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d103      	bne.n	8008058 <prvProcessReceivedCommands+0x144>
                                {
                                    vPortFree( pxTimer );
 8008050:	69f8      	ldr	r0, [r7, #28]
 8008052:	f000 fb9f 	bl	8008794 <vPortFree>
 8008056:	e00a      	b.n	800806e <prvProcessReceivedCommands+0x15a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800805e:	f023 0301 	bic.w	r3, r3, #1
 8008062:	b2da      	uxtb	r2, r3
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800806a:	e000      	b.n	800806e <prvProcessReceivedCommands+0x15a>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800806c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800806e:	4b08      	ldr	r3, [pc, #32]	; (8008090 <prvProcessReceivedCommands+0x17c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f107 0108 	add.w	r1, r7, #8
 8008076:	2200      	movs	r2, #0
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe f8ff 	bl	800627c <xQueueReceive>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	f47f af4b 	bne.w	8007f1c <prvProcessReceivedCommands+0x8>
        }
    }
 8008086:	bf00      	nop
 8008088:	bf00      	nop
 800808a:	3720      	adds	r7, #32
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	20000a60 	.word	0x20000a60

08008094 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800809a:	e009      	b.n	80080b0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800809c:	4b0e      	ldr	r3, [pc, #56]	; (80080d8 <prvSwitchTimerLists+0x44>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80080a6:	f04f 31ff 	mov.w	r1, #4294967295
 80080aa:	6838      	ldr	r0, [r7, #0]
 80080ac:	f7ff fe1c 	bl	8007ce8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080b0:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <prvSwitchTimerLists+0x44>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1f0      	bne.n	800809c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <prvSwitchTimerLists+0x44>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80080c0:	4b06      	ldr	r3, [pc, #24]	; (80080dc <prvSwitchTimerLists+0x48>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a04      	ldr	r2, [pc, #16]	; (80080d8 <prvSwitchTimerLists+0x44>)
 80080c6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80080c8:	4a04      	ldr	r2, [pc, #16]	; (80080dc <prvSwitchTimerLists+0x48>)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6013      	str	r3, [r2, #0]
    }
 80080ce:	bf00      	nop
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000a58 	.word	0x20000a58
 80080dc:	20000a5c 	.word	0x20000a5c

080080e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80080e4:	f000 f944 	bl	8008370 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80080e8:	4b12      	ldr	r3, [pc, #72]	; (8008134 <prvCheckForValidListAndQueue+0x54>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d11d      	bne.n	800812c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80080f0:	4811      	ldr	r0, [pc, #68]	; (8008138 <prvCheckForValidListAndQueue+0x58>)
 80080f2:	f7fd fd51 	bl	8005b98 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80080f6:	4811      	ldr	r0, [pc, #68]	; (800813c <prvCheckForValidListAndQueue+0x5c>)
 80080f8:	f7fd fd4e 	bl	8005b98 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80080fc:	4b10      	ldr	r3, [pc, #64]	; (8008140 <prvCheckForValidListAndQueue+0x60>)
 80080fe:	4a0e      	ldr	r2, [pc, #56]	; (8008138 <prvCheckForValidListAndQueue+0x58>)
 8008100:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008102:	4b10      	ldr	r3, [pc, #64]	; (8008144 <prvCheckForValidListAndQueue+0x64>)
 8008104:	4a0d      	ldr	r2, [pc, #52]	; (800813c <prvCheckForValidListAndQueue+0x5c>)
 8008106:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008108:	2200      	movs	r2, #0
 800810a:	210c      	movs	r1, #12
 800810c:	200a      	movs	r0, #10
 800810e:	f7fd fe8b 	bl	8005e28 <xQueueGenericCreate>
 8008112:	4603      	mov	r3, r0
 8008114:	4a07      	ldr	r2, [pc, #28]	; (8008134 <prvCheckForValidListAndQueue+0x54>)
 8008116:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008118:	4b06      	ldr	r3, [pc, #24]	; (8008134 <prvCheckForValidListAndQueue+0x54>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008120:	4b04      	ldr	r3, [pc, #16]	; (8008134 <prvCheckForValidListAndQueue+0x54>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4908      	ldr	r1, [pc, #32]	; (8008148 <prvCheckForValidListAndQueue+0x68>)
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fa9e 	bl	8006668 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800812c:	f000 f954 	bl	80083d8 <vPortExitCritical>
    }
 8008130:	bf00      	nop
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000a60 	.word	0x20000a60
 8008138:	20000a30 	.word	0x20000a30
 800813c:	20000a44 	.word	0x20000a44
 8008140:	20000a58 	.word	0x20000a58
 8008144:	20000a5c 	.word	0x20000a5c
 8008148:	0800b464 	.word	0x0800b464

0800814c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3b04      	subs	r3, #4
 800815c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008164:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3b04      	subs	r3, #4
 800816a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f023 0201 	bic.w	r2, r3, #1
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3b04      	subs	r3, #4
 800817a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800817c:	4a0c      	ldr	r2, [pc, #48]	; (80081b0 <pxPortInitialiseStack+0x64>)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3b14      	subs	r3, #20
 8008186:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3b04      	subs	r3, #4
 8008192:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f06f 0202 	mvn.w	r2, #2
 800819a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3b20      	subs	r3, #32
 80081a0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80081a2:	68fb      	ldr	r3, [r7, #12]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	080081b5 	.word	0x080081b5

080081b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80081be:	4b14      	ldr	r3, [pc, #80]	; (8008210 <prvTaskExitError+0x5c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c6:	d00c      	beq.n	80081e2 <prvTaskExitError+0x2e>
        __asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	b672      	cpsid	i
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	b662      	cpsie	i
 80081dc:	60fb      	str	r3, [r7, #12]
    }
 80081de:	bf00      	nop
 80081e0:	e7fe      	b.n	80081e0 <prvTaskExitError+0x2c>
        __asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e6:	b672      	cpsid	i
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	b662      	cpsie	i
 80081f6:	60bb      	str	r3, [r7, #8]
    }
 80081f8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80081fa:	bf00      	nop
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0fc      	beq.n	80081fc <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008202:	bf00      	nop
 8008204:	bf00      	nop
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	20000014 	.word	0x20000014
	...

08008220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <pxCurrentTCBConst2>)
 8008222:	6819      	ldr	r1, [r3, #0]
 8008224:	6808      	ldr	r0, [r1, #0]
 8008226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822a:	f380 8809 	msr	PSP, r0
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f04f 0000 	mov.w	r0, #0
 8008236:	f380 8811 	msr	BASEPRI, r0
 800823a:	4770      	bx	lr
 800823c:	f3af 8000 	nop.w

08008240 <pxCurrentTCBConst2>:
 8008240:	20000904 	.word	0x20000904
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop

08008248 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008248:	4808      	ldr	r0, [pc, #32]	; (800826c <prvPortStartFirstTask+0x24>)
 800824a:	6800      	ldr	r0, [r0, #0]
 800824c:	6800      	ldr	r0, [r0, #0]
 800824e:	f380 8808 	msr	MSP, r0
 8008252:	f04f 0000 	mov.w	r0, #0
 8008256:	f380 8814 	msr	CONTROL, r0
 800825a:	b662      	cpsie	i
 800825c:	b661      	cpsie	f
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	df00      	svc	0
 8008268:	bf00      	nop
 800826a:	0000      	.short	0x0000
 800826c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop

08008274 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800827a:	4b37      	ldr	r3, [pc, #220]	; (8008358 <xPortStartScheduler+0xe4>)
 800827c:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	22ff      	movs	r2, #255	; 0xff
 800828a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800829c:	b2da      	uxtb	r2, r3
 800829e:	4b2f      	ldr	r3, [pc, #188]	; (800835c <xPortStartScheduler+0xe8>)
 80082a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082a2:	4b2f      	ldr	r3, [pc, #188]	; (8008360 <xPortStartScheduler+0xec>)
 80082a4:	2207      	movs	r2, #7
 80082a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082a8:	e009      	b.n	80082be <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80082aa:	4b2d      	ldr	r3, [pc, #180]	; (8008360 <xPortStartScheduler+0xec>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	4a2b      	ldr	r2, [pc, #172]	; (8008360 <xPortStartScheduler+0xec>)
 80082b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082b4:	78fb      	ldrb	r3, [r7, #3]
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c6:	2b80      	cmp	r3, #128	; 0x80
 80082c8:	d0ef      	beq.n	80082aa <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082ca:	4b25      	ldr	r3, [pc, #148]	; (8008360 <xPortStartScheduler+0xec>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f1c3 0307 	rsb	r3, r3, #7
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d00c      	beq.n	80082f0 <xPortStartScheduler+0x7c>
        __asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082da:	b672      	cpsid	i
 80082dc:	f383 8811 	msr	BASEPRI, r3
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	b662      	cpsie	i
 80082ea:	60bb      	str	r3, [r7, #8]
    }
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <xPortStartScheduler+0x7a>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082f0:	4b1b      	ldr	r3, [pc, #108]	; (8008360 <xPortStartScheduler+0xec>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	021b      	lsls	r3, r3, #8
 80082f6:	4a1a      	ldr	r2, [pc, #104]	; (8008360 <xPortStartScheduler+0xec>)
 80082f8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082fa:	4b19      	ldr	r3, [pc, #100]	; (8008360 <xPortStartScheduler+0xec>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008302:	4a17      	ldr	r2, [pc, #92]	; (8008360 <xPortStartScheduler+0xec>)
 8008304:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	b2da      	uxtb	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800830e:	4b15      	ldr	r3, [pc, #84]	; (8008364 <xPortStartScheduler+0xf0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a14      	ldr	r2, [pc, #80]	; (8008364 <xPortStartScheduler+0xf0>)
 8008314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008318:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800831a:	4b12      	ldr	r3, [pc, #72]	; (8008364 <xPortStartScheduler+0xf0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a11      	ldr	r2, [pc, #68]	; (8008364 <xPortStartScheduler+0xf0>)
 8008320:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008324:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008326:	f000 f8db 	bl	80084e0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800832a:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <xPortStartScheduler+0xf4>)
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008330:	f000 f8fa 	bl	8008528 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008334:	4b0d      	ldr	r3, [pc, #52]	; (800836c <xPortStartScheduler+0xf8>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a0c      	ldr	r2, [pc, #48]	; (800836c <xPortStartScheduler+0xf8>)
 800833a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800833e:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008340:	f7ff ff82 	bl	8008248 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008344:	f7fe ffa6 	bl	8007294 <vTaskSwitchContext>
    prvTaskExitError();
 8008348:	f7ff ff34 	bl	80081b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	e000e400 	.word	0xe000e400
 800835c:	20000a6c 	.word	0x20000a6c
 8008360:	20000a70 	.word	0x20000a70
 8008364:	e000ed20 	.word	0xe000ed20
 8008368:	20000014 	.word	0x20000014
 800836c:	e000ef34 	.word	0xe000ef34

08008370 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
        __asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	b672      	cpsid	i
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	b662      	cpsie	i
 800838a:	607b      	str	r3, [r7, #4]
    }
 800838c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800838e:	4b10      	ldr	r3, [pc, #64]	; (80083d0 <vPortEnterCritical+0x60>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	3301      	adds	r3, #1
 8008394:	4a0e      	ldr	r2, [pc, #56]	; (80083d0 <vPortEnterCritical+0x60>)
 8008396:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008398:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <vPortEnterCritical+0x60>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d111      	bne.n	80083c4 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083a0:	4b0c      	ldr	r3, [pc, #48]	; (80083d4 <vPortEnterCritical+0x64>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00c      	beq.n	80083c4 <vPortEnterCritical+0x54>
        __asm volatile
 80083aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ae:	b672      	cpsid	i
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	b662      	cpsie	i
 80083be:	603b      	str	r3, [r7, #0]
    }
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <vPortEnterCritical+0x52>
    }
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr
 80083d0:	20000014 	.word	0x20000014
 80083d4:	e000ed04 	.word	0xe000ed04

080083d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <vPortExitCritical+0x54>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10c      	bne.n	8008400 <vPortExitCritical+0x28>
        __asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	b672      	cpsid	i
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	b662      	cpsie	i
 80083fa:	607b      	str	r3, [r7, #4]
    }
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8008400:	4b0a      	ldr	r3, [pc, #40]	; (800842c <vPortExitCritical+0x54>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	3b01      	subs	r3, #1
 8008406:	4a09      	ldr	r2, [pc, #36]	; (800842c <vPortExitCritical+0x54>)
 8008408:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800840a:	4b08      	ldr	r3, [pc, #32]	; (800842c <vPortExitCritical+0x54>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d105      	bne.n	800841e <vPortExitCritical+0x46>
 8008412:	2300      	movs	r3, #0
 8008414:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	f383 8811 	msr	BASEPRI, r3
    }
 800841c:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	20000014 	.word	0x20000014

08008430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008430:	f3ef 8009 	mrs	r0, PSP
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	4b15      	ldr	r3, [pc, #84]	; (8008490 <pxCurrentTCBConst>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	f01e 0f10 	tst.w	lr, #16
 8008440:	bf08      	it	eq
 8008442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	6010      	str	r0, [r2, #0]
 800844c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008454:	b672      	cpsid	i
 8008456:	f380 8811 	msr	BASEPRI, r0
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	b662      	cpsie	i
 8008464:	f7fe ff16 	bl	8007294 <vTaskSwitchContext>
 8008468:	f04f 0000 	mov.w	r0, #0
 800846c:	f380 8811 	msr	BASEPRI, r0
 8008470:	bc09      	pop	{r0, r3}
 8008472:	6819      	ldr	r1, [r3, #0]
 8008474:	6808      	ldr	r0, [r1, #0]
 8008476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847a:	f01e 0f10 	tst.w	lr, #16
 800847e:	bf08      	it	eq
 8008480:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008484:	f380 8809 	msr	PSP, r0
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop

08008490 <pxCurrentTCBConst>:
 8008490:	20000904 	.word	0x20000904
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop

08008498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
        __asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	b672      	cpsid	i
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	b662      	cpsie	i
 80084b2:	607b      	str	r3, [r7, #4]
    }
 80084b4:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80084b6:	f7fe fdd5 	bl	8007064 <xTaskIncrementTick>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084c0:	4b06      	ldr	r3, [pc, #24]	; (80084dc <SysTick_Handler+0x44>)
 80084c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	2300      	movs	r3, #0
 80084ca:	603b      	str	r3, [r7, #0]
        __asm volatile
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	f383 8811 	msr	BASEPRI, r3
    }
 80084d2:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	e000ed04 	.word	0xe000ed04

080084e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084e4:	4b0b      	ldr	r3, [pc, #44]	; (8008514 <vPortSetupTimerInterrupt+0x34>)
 80084e6:	2200      	movs	r2, #0
 80084e8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084ea:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <vPortSetupTimerInterrupt+0x38>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084f0:	4b0a      	ldr	r3, [pc, #40]	; (800851c <vPortSetupTimerInterrupt+0x3c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a0a      	ldr	r2, [pc, #40]	; (8008520 <vPortSetupTimerInterrupt+0x40>)
 80084f6:	fba2 2303 	umull	r2, r3, r2, r3
 80084fa:	099b      	lsrs	r3, r3, #6
 80084fc:	4a09      	ldr	r2, [pc, #36]	; (8008524 <vPortSetupTimerInterrupt+0x44>)
 80084fe:	3b01      	subs	r3, #1
 8008500:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008502:	4b04      	ldr	r3, [pc, #16]	; (8008514 <vPortSetupTimerInterrupt+0x34>)
 8008504:	2207      	movs	r2, #7
 8008506:	601a      	str	r2, [r3, #0]
}
 8008508:	bf00      	nop
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	e000e010 	.word	0xe000e010
 8008518:	e000e018 	.word	0xe000e018
 800851c:	20000000 	.word	0x20000000
 8008520:	10624dd3 	.word	0x10624dd3
 8008524:	e000e014 	.word	0xe000e014

08008528 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008528:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008538 <vPortEnableVFP+0x10>
 800852c:	6801      	ldr	r1, [r0, #0]
 800852e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008532:	6001      	str	r1, [r0, #0]
 8008534:	4770      	bx	lr
 8008536:	0000      	.short	0x0000
 8008538:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800853c:	bf00      	nop
 800853e:	bf00      	nop

08008540 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008546:	f3ef 8305 	mrs	r3, IPSR
 800854a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b0f      	cmp	r3, #15
 8008550:	d916      	bls.n	8008580 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008552:	4a19      	ldr	r2, [pc, #100]	; (80085b8 <vPortValidateInterruptPriority+0x78>)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800855c:	4b17      	ldr	r3, [pc, #92]	; (80085bc <vPortValidateInterruptPriority+0x7c>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	7afa      	ldrb	r2, [r7, #11]
 8008562:	429a      	cmp	r2, r3
 8008564:	d20c      	bcs.n	8008580 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	b672      	cpsid	i
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	b662      	cpsie	i
 800857a:	607b      	str	r3, [r7, #4]
    }
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008580:	4b0f      	ldr	r3, [pc, #60]	; (80085c0 <vPortValidateInterruptPriority+0x80>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008588:	4b0e      	ldr	r3, [pc, #56]	; (80085c4 <vPortValidateInterruptPriority+0x84>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d90c      	bls.n	80085aa <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	b672      	cpsid	i
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	b662      	cpsie	i
 80085a4:	603b      	str	r3, [r7, #0]
    }
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <vPortValidateInterruptPriority+0x68>
    }
 80085aa:	bf00      	nop
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr
 80085b6:	bf00      	nop
 80085b8:	e000e3f0 	.word	0xe000e3f0
 80085bc:	20000a6c 	.word	0x20000a6c
 80085c0:	e000ed0c 	.word	0xe000ed0c
 80085c4:	20000a70 	.word	0x20000a70

080085c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08a      	sub	sp, #40	; 0x28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80085d4:	f7fe fc2a 	bl	8006e2c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80085d8:	4b68      	ldr	r3, [pc, #416]	; (800877c <pvPortMalloc+0x1b4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80085e0:	f000 f93e 	bl	8008860 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085e4:	4b66      	ldr	r3, [pc, #408]	; (8008780 <pvPortMalloc+0x1b8>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 80ab 	bne.w	8008748 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d02f      	beq.n	8008658 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80085f8:	2208      	movs	r2, #8
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d229      	bcs.n	8008658 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 8008604:	2208      	movs	r2, #8
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4413      	add	r3, r2
 800860a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f003 0307 	and.w	r3, r3, #7
 8008612:	2b00      	cmp	r3, #0
 8008614:	d023      	beq.n	800865e <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f023 0307 	bic.w	r3, r3, #7
 800861c:	3308      	adds	r3, #8
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	429a      	cmp	r2, r3
 8008622:	d216      	bcs.n	8008652 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f023 0307 	bic.w	r3, r3, #7
 800862a:	3308      	adds	r3, #8
 800862c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	2b00      	cmp	r3, #0
 8008636:	d012      	beq.n	800865e <pvPortMalloc+0x96>
        __asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	b672      	cpsid	i
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	b662      	cpsie	i
 800864c:	617b      	str	r3, [r7, #20]
    }
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008652:	2300      	movs	r3, #0
 8008654:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008656:	e002      	b.n	800865e <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8008658:	2300      	movs	r3, #0
 800865a:	607b      	str	r3, [r7, #4]
 800865c:	e000      	b.n	8008660 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800865e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d070      	beq.n	8008748 <pvPortMalloc+0x180>
 8008666:	4b47      	ldr	r3, [pc, #284]	; (8008784 <pvPortMalloc+0x1bc>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	429a      	cmp	r2, r3
 800866e:	d86b      	bhi.n	8008748 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008670:	4b45      	ldr	r3, [pc, #276]	; (8008788 <pvPortMalloc+0x1c0>)
 8008672:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008674:	4b44      	ldr	r3, [pc, #272]	; (8008788 <pvPortMalloc+0x1c0>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800867a:	e004      	b.n	8008686 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d903      	bls.n	8008698 <pvPortMalloc+0xd0>
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f1      	bne.n	800867c <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8008698:	4b38      	ldr	r3, [pc, #224]	; (800877c <pvPortMalloc+0x1b4>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800869e:	429a      	cmp	r2, r3
 80086a0:	d052      	beq.n	8008748 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2208      	movs	r2, #8
 80086a8:	4413      	add	r3, r2
 80086aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	1ad2      	subs	r2, r2, r3
 80086bc:	2308      	movs	r3, #8
 80086be:	005b      	lsls	r3, r3, #1
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d921      	bls.n	8008708 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4413      	add	r3, r2
 80086ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00c      	beq.n	80086f0 <pvPortMalloc+0x128>
        __asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	b672      	cpsid	i
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	b662      	cpsie	i
 80086ea:	613b      	str	r3, [r7, #16]
    }
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	1ad2      	subs	r2, r2, r3
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008702:	69b8      	ldr	r0, [r7, #24]
 8008704:	f000 f90e 	bl	8008924 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008708:	4b1e      	ldr	r3, [pc, #120]	; (8008784 <pvPortMalloc+0x1bc>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	4a1c      	ldr	r2, [pc, #112]	; (8008784 <pvPortMalloc+0x1bc>)
 8008714:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008716:	4b1b      	ldr	r3, [pc, #108]	; (8008784 <pvPortMalloc+0x1bc>)
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	4b1c      	ldr	r3, [pc, #112]	; (800878c <pvPortMalloc+0x1c4>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	429a      	cmp	r2, r3
 8008720:	d203      	bcs.n	800872a <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008722:	4b18      	ldr	r3, [pc, #96]	; (8008784 <pvPortMalloc+0x1bc>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a19      	ldr	r2, [pc, #100]	; (800878c <pvPortMalloc+0x1c4>)
 8008728:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	4b14      	ldr	r3, [pc, #80]	; (8008780 <pvPortMalloc+0x1b8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	431a      	orrs	r2, r3
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800873e:	4b14      	ldr	r3, [pc, #80]	; (8008790 <pvPortMalloc+0x1c8>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3301      	adds	r3, #1
 8008744:	4a12      	ldr	r2, [pc, #72]	; (8008790 <pvPortMalloc+0x1c8>)
 8008746:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008748:	f7fe fb7e 	bl	8006e48 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	f003 0307 	and.w	r3, r3, #7
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00c      	beq.n	8008770 <pvPortMalloc+0x1a8>
        __asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	b672      	cpsid	i
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	b662      	cpsie	i
 800876a:	60fb      	str	r3, [r7, #12]
    }
 800876c:	bf00      	nop
 800876e:	e7fe      	b.n	800876e <pvPortMalloc+0x1a6>
    return pvReturn;
 8008770:	69fb      	ldr	r3, [r7, #28]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3728      	adds	r7, #40	; 0x28
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	2000467c 	.word	0x2000467c
 8008780:	20004690 	.word	0x20004690
 8008784:	20004680 	.word	0x20004680
 8008788:	20004674 	.word	0x20004674
 800878c:	20004684 	.word	0x20004684
 8008790:	20004688 	.word	0x20004688

08008794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d051      	beq.n	800884a <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80087a6:	2308      	movs	r3, #8
 80087a8:	425b      	negs	r3, r3
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4413      	add	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	4b26      	ldr	r3, [pc, #152]	; (8008854 <vPortFree+0xc0>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4013      	ands	r3, r2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10c      	bne.n	80087dc <vPortFree+0x48>
        __asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	b672      	cpsid	i
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	b662      	cpsie	i
 80087d6:	60fb      	str	r3, [r7, #12]
    }
 80087d8:	bf00      	nop
 80087da:	e7fe      	b.n	80087da <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00c      	beq.n	80087fe <vPortFree+0x6a>
        __asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	b672      	cpsid	i
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	b662      	cpsie	i
 80087f8:	60bb      	str	r3, [r7, #8]
    }
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	4b14      	ldr	r3, [pc, #80]	; (8008854 <vPortFree+0xc0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4013      	ands	r3, r2
 8008808:	2b00      	cmp	r3, #0
 800880a:	d01e      	beq.n	800884a <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d11a      	bne.n	800884a <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	685a      	ldr	r2, [r3, #4]
 8008818:	4b0e      	ldr	r3, [pc, #56]	; (8008854 <vPortFree+0xc0>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	43db      	mvns	r3, r3
 800881e:	401a      	ands	r2, r3
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008824:	f7fe fb02 	bl	8006e2c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <vPortFree+0xc4>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4413      	add	r3, r2
 8008832:	4a09      	ldr	r2, [pc, #36]	; (8008858 <vPortFree+0xc4>)
 8008834:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008836:	6938      	ldr	r0, [r7, #16]
 8008838:	f000 f874 	bl	8008924 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800883c:	4b07      	ldr	r3, [pc, #28]	; (800885c <vPortFree+0xc8>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3301      	adds	r3, #1
 8008842:	4a06      	ldr	r2, [pc, #24]	; (800885c <vPortFree+0xc8>)
 8008844:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008846:	f7fe faff 	bl	8006e48 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800884a:	bf00      	nop
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20004690 	.word	0x20004690
 8008858:	20004680 	.word	0x20004680
 800885c:	2000468c 	.word	0x2000468c

08008860 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008866:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800886a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800886c:	4b27      	ldr	r3, [pc, #156]	; (800890c <prvHeapInit+0xac>)
 800886e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00c      	beq.n	8008894 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3307      	adds	r3, #7
 800887e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 0307 	bic.w	r3, r3, #7
 8008886:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	4a1f      	ldr	r2, [pc, #124]	; (800890c <prvHeapInit+0xac>)
 8008890:	4413      	add	r3, r2
 8008892:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008898:	4a1d      	ldr	r2, [pc, #116]	; (8008910 <prvHeapInit+0xb0>)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800889e:	4b1c      	ldr	r3, [pc, #112]	; (8008910 <prvHeapInit+0xb0>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	4413      	add	r3, r2
 80088aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80088ac:	2208      	movs	r2, #8
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0307 	bic.w	r3, r3, #7
 80088ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4a15      	ldr	r2, [pc, #84]	; (8008914 <prvHeapInit+0xb4>)
 80088c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80088c2:	4b14      	ldr	r3, [pc, #80]	; (8008914 <prvHeapInit+0xb4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2200      	movs	r2, #0
 80088c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80088ca:	4b12      	ldr	r3, [pc, #72]	; (8008914 <prvHeapInit+0xb4>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	1ad2      	subs	r2, r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088e0:	4b0c      	ldr	r3, [pc, #48]	; (8008914 <prvHeapInit+0xb4>)
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	4a0a      	ldr	r2, [pc, #40]	; (8008918 <prvHeapInit+0xb8>)
 80088ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	4a09      	ldr	r2, [pc, #36]	; (800891c <prvHeapInit+0xbc>)
 80088f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088f8:	4b09      	ldr	r3, [pc, #36]	; (8008920 <prvHeapInit+0xc0>)
 80088fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088fe:	601a      	str	r2, [r3, #0]
}
 8008900:	bf00      	nop
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	20000a74 	.word	0x20000a74
 8008910:	20004674 	.word	0x20004674
 8008914:	2000467c 	.word	0x2000467c
 8008918:	20004684 	.word	0x20004684
 800891c:	20004680 	.word	0x20004680
 8008920:	20004690 	.word	0x20004690

08008924 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800892c:	4b28      	ldr	r3, [pc, #160]	; (80089d0 <prvInsertBlockIntoFreeList+0xac>)
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	e002      	b.n	8008938 <prvInsertBlockIntoFreeList+0x14>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	429a      	cmp	r2, r3
 8008940:	d8f7      	bhi.n	8008932 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	4413      	add	r3, r2
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	429a      	cmp	r2, r3
 8008952:	d108      	bne.n	8008966 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	685a      	ldr	r2, [r3, #4]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	441a      	add	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	441a      	add	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d118      	bne.n	80089ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4b15      	ldr	r3, [pc, #84]	; (80089d4 <prvInsertBlockIntoFreeList+0xb0>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d00d      	beq.n	80089a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	441a      	add	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	e008      	b.n	80089b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089a2:	4b0c      	ldr	r3, [pc, #48]	; (80089d4 <prvInsertBlockIntoFreeList+0xb0>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e003      	b.n	80089b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d002      	beq.n	80089c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop
 80089d0:	20004674 	.word	0x20004674
 80089d4:	2000467c 	.word	0x2000467c

080089d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80089e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80089e8:	f002 fbe0 	bl	800b1ac <malloc>
 80089ec:	4603      	mov	r3, r0
 80089ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d105      	bne.n	8008a02 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80089fe:	2302      	movs	r3, #2
 8008a00:	e066      	b.n	8008ad0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	7c1b      	ldrb	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d119      	bne.n	8008a46 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a16:	2202      	movs	r2, #2
 8008a18:	2181      	movs	r1, #129	; 0x81
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f002 f87f 	bl	800ab1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f002 f875 	bl	800ab1e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2210      	movs	r2, #16
 8008a40:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008a44:	e016      	b.n	8008a74 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a46:	2340      	movs	r3, #64	; 0x40
 8008a48:	2202      	movs	r2, #2
 8008a4a:	2181      	movs	r1, #129	; 0x81
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f002 f866 	bl	800ab1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a58:	2340      	movs	r3, #64	; 0x40
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f002 f85d 	bl	800ab1e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2210      	movs	r2, #16
 8008a70:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a74:	2308      	movs	r3, #8
 8008a76:	2203      	movs	r2, #3
 8008a78:	2182      	movs	r1, #130	; 0x82
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f002 f84f 	bl	800ab1e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7c1b      	ldrb	r3, [r3, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f002 f920 	bl	800acfc <USBD_LL_PrepareReceive>
 8008abc:	e007      	b.n	8008ace <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ac4:	2340      	movs	r3, #64	; 0x40
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f002 f917 	bl	800acfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ae8:	2181      	movs	r1, #129	; 0x81
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f002 f83d 	bl	800ab6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008af6:	2101      	movs	r1, #1
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f002 f836 	bl	800ab6a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b06:	2182      	movs	r1, #130	; 0x82
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f002 f82e 	bl	800ab6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00e      	beq.n	8008b46 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f002 fb3f 	bl	800b1bc <free>
    pdev->pClassData = NULL;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d03a      	beq.n	8008bf0 <USBD_CDC_Setup+0xa0>
 8008b7a:	2b20      	cmp	r3, #32
 8008b7c:	f040 8097 	bne.w	8008cae <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	88db      	ldrh	r3, [r3, #6]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d029      	beq.n	8008bdc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b25b      	sxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	da11      	bge.n	8008bb6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008b9e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	88d2      	ldrh	r2, [r2, #6]
 8008ba4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008ba6:	6939      	ldr	r1, [r7, #16]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	88db      	ldrh	r3, [r3, #6]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 fad6 	bl	800a160 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008bb4:	e082      	b.n	8008cbc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	785a      	ldrb	r2, [r3, #1]
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	88db      	ldrh	r3, [r3, #6]
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008bcc:	6939      	ldr	r1, [r7, #16]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	88db      	ldrh	r3, [r3, #6]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 faef 	bl	800a1b8 <USBD_CtlPrepareRx>
    break;
 8008bda:	e06f      	b.n	8008cbc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	7850      	ldrb	r0, [r2, #1]
 8008be8:	2200      	movs	r2, #0
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	4798      	blx	r3
    break;
 8008bee:	e065      	b.n	8008cbc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	785b      	ldrb	r3, [r3, #1]
 8008bf4:	2b0b      	cmp	r3, #11
 8008bf6:	d84f      	bhi.n	8008c98 <USBD_CDC_Setup+0x148>
 8008bf8:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <USBD_CDC_Setup+0xb0>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c31 	.word	0x08008c31
 8008c04:	08008ca7 	.word	0x08008ca7
 8008c08:	08008c99 	.word	0x08008c99
 8008c0c:	08008c99 	.word	0x08008c99
 8008c10:	08008c99 	.word	0x08008c99
 8008c14:	08008c99 	.word	0x08008c99
 8008c18:	08008c99 	.word	0x08008c99
 8008c1c:	08008c99 	.word	0x08008c99
 8008c20:	08008c99 	.word	0x08008c99
 8008c24:	08008c99 	.word	0x08008c99
 8008c28:	08008c59 	.word	0x08008c59
 8008c2c:	08008c81 	.word	0x08008c81
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d107      	bne.n	8008c4a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c3a:	f107 030c 	add.w	r3, r7, #12
 8008c3e:	2202      	movs	r2, #2
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f001 fa8c 	bl	800a160 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008c48:	e030      	b.n	8008cac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 fa16 	bl	800a07e <USBD_CtlError>
        ret = USBD_FAIL;
 8008c52:	2303      	movs	r3, #3
 8008c54:	75fb      	strb	r3, [r7, #23]
      break;
 8008c56:	e029      	b.n	8008cac <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d107      	bne.n	8008c72 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c62:	f107 030f 	add.w	r3, r7, #15
 8008c66:	2201      	movs	r2, #1
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 fa78 	bl	800a160 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008c70:	e01c      	b.n	8008cac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 fa02 	bl	800a07e <USBD_CtlError>
        ret = USBD_FAIL;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c7e:	e015      	b.n	8008cac <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d00f      	beq.n	8008caa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f001 f9f6 	bl	800a07e <USBD_CtlError>
        ret = USBD_FAIL;
 8008c92:	2303      	movs	r3, #3
 8008c94:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008c96:	e008      	b.n	8008caa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 f9ef 	bl	800a07e <USBD_CtlError>
      ret = USBD_FAIL;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca4:	e002      	b.n	8008cac <USBD_CDC_Setup+0x15c>
      break;
 8008ca6:	bf00      	nop
 8008ca8:	e008      	b.n	8008cbc <USBD_CDC_Setup+0x16c>
      break;
 8008caa:	bf00      	nop
    }
    break;
 8008cac:	e006      	b.n	8008cbc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 f9e4 	bl	800a07e <USBD_CtlError>
    ret = USBD_FAIL;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	75fb      	strb	r3, [r7, #23]
    break;
 8008cba:	bf00      	nop
  }

  return (uint8_t)ret;
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop

08008cc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e049      	b.n	8008d7e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008cf0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008cf2:	78fa      	ldrb	r2, [r7, #3]
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	440b      	add	r3, r1
 8008d00:	3318      	adds	r3, #24
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d029      	beq.n	8008d5c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	3318      	adds	r3, #24
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	78f9      	ldrb	r1, [r7, #3]
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	1a5b      	subs	r3, r3, r1
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4403      	add	r3, r0
 8008d28:	3344      	adds	r3, #68	; 0x44
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d110      	bne.n	8008d5c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008d3a:	78fa      	ldrb	r2, [r7, #3]
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	3318      	adds	r3, #24
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d4e:	78f9      	ldrb	r1, [r7, #3]
 8008d50:	2300      	movs	r3, #0
 8008d52:	2200      	movs	r2, #0
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 ffb0 	bl	800acba <USBD_LL_Transmit>
 8008d5a:	e00f      	b.n	8008d7c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008d78:	78fa      	ldrb	r2, [r7, #3]
 8008d7a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	460b      	mov	r3, r1
 8008d90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e015      	b.n	8008dd4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f001 ffc6 	bl	800ad3e <USBD_LL_GetRxDataSize>
 8008db2:	4602      	mov	r2, r0
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d015      	beq.n	8008e22 <USBD_CDC_EP0_RxReady+0x46>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008dfc:	2bff      	cmp	r3, #255	; 0xff
 8008dfe:	d010      	beq.n	8008e22 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008e0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008e16:	b292      	uxth	r2, r2
 8008e18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	22ff      	movs	r2, #255	; 0xff
 8008e1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2243      	movs	r2, #67	; 0x43
 8008e38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008e3a:	4b03      	ldr	r3, [pc, #12]	; (8008e48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	200000a0 	.word	0x200000a0

08008e4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2243      	movs	r2, #67	; 0x43
 8008e58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008e5a:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	2000005c 	.word	0x2000005c

08008e6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2243      	movs	r2, #67	; 0x43
 8008e78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008e7a:	4b03      	ldr	r3, [pc, #12]	; (8008e88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	200000e4 	.word	0x200000e4

08008e8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	220a      	movs	r2, #10
 8008e98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e9a:	4b03      	ldr	r3, [pc, #12]	; (8008ea8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	20000018 	.word	0x20000018

08008eac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e004      	b.n	8008eca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b087      	sub	sp, #28
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	60f8      	str	r0, [r7, #12]
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ee8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f18:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f3e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008f40:	2301      	movs	r3, #1
 8008f42:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e01a      	b.n	8008f88 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d114      	bne.n	8008f86 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008f7a:	2181      	movs	r1, #129	; 0x81
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fe9c 	bl	800acba <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e016      	b.n	8008fdc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	7c1b      	ldrb	r3, [r3, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d109      	bne.n	8008fca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f001 fe9a 	bl	800acfc <USBD_LL_PrepareReceive>
 8008fc8:	e007      	b.n	8008fda <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fd0:	2340      	movs	r3, #64	; 0x40
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 fe91 	bl	800acfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e025      	b.n	8009048 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009014:	2b00      	cmp	r3, #0
 8009016:	d003      	beq.n	8009020 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	79fa      	ldrb	r2, [r7, #7]
 800903a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f001 fd07 	bl	800aa50 <USBD_LL_Init>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009046:	7dfb      	ldrb	r3, [r7, #23]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	e010      	b.n	800908a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	f107 020e 	add.w	r2, r7, #14
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
 8009080:	4602      	mov	r2, r0
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 fd24 	bl	800aae8 <USBD_LL_Start>
 80090a0:	4603      	mov	r3, r0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d009      	beq.n	80090ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	78fa      	ldrb	r2, [r7, #3]
 80090e4:	4611      	mov	r1, r2
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	4798      	blx	r3
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910a:	2b00      	cmp	r3, #0
 800910c:	d007      	beq.n	800911e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	78fa      	ldrb	r2, [r7, #3]
 8009118:	4611      	mov	r1, r2
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	4798      	blx	r3
  }

  return USBD_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 ff65 	bl	800a00a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800914e:	461a      	mov	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800915c:	f003 031f 	and.w	r3, r3, #31
 8009160:	2b02      	cmp	r3, #2
 8009162:	d01a      	beq.n	800919a <USBD_LL_SetupStage+0x72>
 8009164:	2b02      	cmp	r3, #2
 8009166:	d822      	bhi.n	80091ae <USBD_LL_SetupStage+0x86>
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <USBD_LL_SetupStage+0x4a>
 800916c:	2b01      	cmp	r3, #1
 800916e:	d00a      	beq.n	8009186 <USBD_LL_SetupStage+0x5e>
 8009170:	e01d      	b.n	80091ae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa18 	bl	80095b0 <USBD_StdDevReq>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
      break;
 8009184:	e020      	b.n	80091c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800918c:	4619      	mov	r1, r3
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 fa7c 	bl	800968c <USBD_StdItfReq>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]
      break;
 8009198:	e016      	b.n	80091c8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 faba 	bl	800971c <USBD_StdEPReq>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]
      break;
 80091ac:	e00c      	b.n	80091c8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f001 fcf3 	bl	800aba8 <USBD_LL_StallEP>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
      break;
 80091c6:	bf00      	nop
  }

  return ret;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b086      	sub	sp, #24
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	460b      	mov	r3, r1
 80091dc:	607a      	str	r2, [r7, #4]
 80091de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80091e0:	7afb      	ldrb	r3, [r7, #11]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d137      	bne.n	8009256 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80091ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	d14a      	bne.n	800928e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	429a      	cmp	r2, r3
 8009202:	d913      	bls.n	800922c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	689a      	ldr	r2, [r3, #8]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	1ad2      	subs	r2, r2, r3
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	68da      	ldr	r2, [r3, #12]
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	4293      	cmp	r3, r2
 800921c:	bf28      	it	cs
 800921e:	4613      	movcs	r3, r2
 8009220:	461a      	mov	r2, r3
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 ffe4 	bl	800a1f2 <USBD_CtlContinueRx>
 800922a:	e030      	b.n	800928e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00a      	beq.n	800924e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800923e:	2b03      	cmp	r3, #3
 8009240:	d105      	bne.n	800924e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f000 ffe0 	bl	800a214 <USBD_CtlSendStatus>
 8009254:	e01b      	b.n	800928e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d013      	beq.n	800928a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009268:	2b03      	cmp	r3, #3
 800926a:	d10e      	bne.n	800928a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	7afa      	ldrb	r2, [r7, #11]
 8009276:	4611      	mov	r1, r2
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	4798      	blx	r3
 800927c:	4603      	mov	r3, r0
 800927e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009280:	7dfb      	ldrb	r3, [r7, #23]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	e002      	b.n	8009290 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800928a:	2303      	movs	r3, #3
 800928c:	e000      	b.n	8009290 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	460b      	mov	r3, r1
 80092a2:	607a      	str	r2, [r7, #4]
 80092a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80092a6:	7afb      	ldrb	r3, [r7, #11]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d16a      	bne.n	8009382 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	3314      	adds	r3, #20
 80092b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d155      	bne.n	8009368 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d914      	bls.n	80092f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	1ad2      	subs	r2, r2, r3
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	461a      	mov	r2, r3
 80092dc:	6879      	ldr	r1, [r7, #4]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f000 ff59 	bl	800a196 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e4:	2300      	movs	r3, #0
 80092e6:	2200      	movs	r2, #0
 80092e8:	2100      	movs	r1, #0
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f001 fd06 	bl	800acfc <USBD_LL_PrepareReceive>
 80092f0:	e03a      	b.n	8009368 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	68da      	ldr	r2, [r3, #12]
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d11c      	bne.n	8009338 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009306:	429a      	cmp	r2, r3
 8009308:	d316      	bcc.n	8009338 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009314:	429a      	cmp	r2, r3
 8009316:	d20f      	bcs.n	8009338 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009318:	2200      	movs	r2, #0
 800931a:	2100      	movs	r1, #0
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 ff3a 	bl	800a196 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800932a:	2300      	movs	r3, #0
 800932c:	2200      	movs	r2, #0
 800932e:	2100      	movs	r1, #0
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f001 fce3 	bl	800acfc <USBD_LL_PrepareReceive>
 8009336:	e017      	b.n	8009368 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00a      	beq.n	800935a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800934a:	2b03      	cmp	r3, #3
 800934c:	d105      	bne.n	800935a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800935a:	2180      	movs	r1, #128	; 0x80
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f001 fc23 	bl	800aba8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 ff69 	bl	800a23a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800936e:	2b01      	cmp	r3, #1
 8009370:	d123      	bne.n	80093ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	f7ff fe99 	bl	80090aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009380:	e01b      	b.n	80093ba <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d013      	beq.n	80093b6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009394:	2b03      	cmp	r3, #3
 8009396:	d10e      	bne.n	80093b6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	7afa      	ldrb	r2, [r7, #11]
 80093a2:	4611      	mov	r1, r2
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	4798      	blx	r3
 80093a8:	4603      	mov	r3, r0
 80093aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	e002      	b.n	80093bc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e000      	b.n	80093bc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d009      	beq.n	8009408 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	6852      	ldr	r2, [r2, #4]
 8009400:	b2d2      	uxtb	r2, r2
 8009402:	4611      	mov	r1, r2
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009408:	2340      	movs	r3, #64	; 0x40
 800940a:	2200      	movs	r2, #0
 800940c:	2100      	movs	r1, #0
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f001 fb85 	bl	800ab1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2240      	movs	r2, #64	; 0x40
 8009420:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009424:	2340      	movs	r3, #64	; 0x40
 8009426:	2200      	movs	r2, #0
 8009428:	2180      	movs	r1, #128	; 0x80
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 fb77 	bl	800ab1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2240      	movs	r2, #64	; 0x40
 800943a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009446:	b480      	push	{r7}
 8009448:	b083      	sub	sp, #12
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	460b      	mov	r3, r1
 8009450:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2204      	movs	r2, #4
 800947e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800949e:	2b04      	cmp	r3, #4
 80094a0:	d105      	bne.n	80094ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d10b      	bne.n	80094e6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr

0800950a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800950a:	b480      	push	{r7}
 800950c:	b083      	sub	sp, #12
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	460b      	mov	r3, r1
 8009514:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr

0800953a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	2b00      	cmp	r3, #0
 8009552:	d009      	beq.n	8009568 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	6852      	ldr	r2, [r2, #4]
 8009560:	b2d2      	uxtb	r2, r2
 8009562:	4611      	mov	r1, r2
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	4798      	blx	r3
  }

  return USBD_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009572:	b480      	push	{r7}
 8009574:	b087      	sub	sp, #28
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	3301      	adds	r3, #1
 8009588:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009590:	8a3b      	ldrh	r3, [r7, #16]
 8009592:	021b      	lsls	r3, r3, #8
 8009594:	b21a      	sxth	r2, r3
 8009596:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800959a:	4313      	orrs	r3, r2
 800959c:	b21b      	sxth	r3, r3
 800959e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80095a0:	89fb      	ldrh	r3, [r7, #14]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
	...

080095b0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095c6:	2b40      	cmp	r3, #64	; 0x40
 80095c8:	d005      	beq.n	80095d6 <USBD_StdDevReq+0x26>
 80095ca:	2b40      	cmp	r3, #64	; 0x40
 80095cc:	d853      	bhi.n	8009676 <USBD_StdDevReq+0xc6>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00b      	beq.n	80095ea <USBD_StdDevReq+0x3a>
 80095d2:	2b20      	cmp	r3, #32
 80095d4:	d14f      	bne.n	8009676 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
 80095e4:	4603      	mov	r3, r0
 80095e6:	73fb      	strb	r3, [r7, #15]
    break;
 80095e8:	e04a      	b.n	8009680 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	785b      	ldrb	r3, [r3, #1]
 80095ee:	2b09      	cmp	r3, #9
 80095f0:	d83b      	bhi.n	800966a <USBD_StdDevReq+0xba>
 80095f2:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <USBD_StdDevReq+0x48>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	0800964d 	.word	0x0800964d
 80095fc:	08009661 	.word	0x08009661
 8009600:	0800966b 	.word	0x0800966b
 8009604:	08009657 	.word	0x08009657
 8009608:	0800966b 	.word	0x0800966b
 800960c:	0800962b 	.word	0x0800962b
 8009610:	08009621 	.word	0x08009621
 8009614:	0800966b 	.word	0x0800966b
 8009618:	08009643 	.word	0x08009643
 800961c:	08009635 	.word	0x08009635
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8009620:	6839      	ldr	r1, [r7, #0]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f9d8 	bl	80099d8 <USBD_GetDescriptor>
      break;
 8009628:	e024      	b.n	8009674 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fb67 	bl	8009d00 <USBD_SetAddress>
      break;
 8009632:	e01f      	b.n	8009674 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fba6 	bl	8009d88 <USBD_SetConfig>
 800963c:	4603      	mov	r3, r0
 800963e:	73fb      	strb	r3, [r7, #15]
      break;
 8009640:	e018      	b.n	8009674 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fc43 	bl	8009ed0 <USBD_GetConfig>
      break;
 800964a:	e013      	b.n	8009674 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 fc73 	bl	8009f3a <USBD_GetStatus>
      break;
 8009654:	e00e      	b.n	8009674 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8009656:	6839      	ldr	r1, [r7, #0]
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fca1 	bl	8009fa0 <USBD_SetFeature>
      break;
 800965e:	e009      	b.n	8009674 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fcb0 	bl	8009fc8 <USBD_ClrFeature>
      break;
 8009668:	e004      	b.n	8009674 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fd06 	bl	800a07e <USBD_CtlError>
      break;
 8009672:	bf00      	nop
    }
    break;
 8009674:	e004      	b.n	8009680 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fd00 	bl	800a07e <USBD_CtlError>
    break;
 800967e:	bf00      	nop
  }

  return ret;
 8009680:	7bfb      	ldrb	r3, [r7, #15]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop

0800968c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096a2:	2b40      	cmp	r3, #64	; 0x40
 80096a4:	d005      	beq.n	80096b2 <USBD_StdItfReq+0x26>
 80096a6:	2b40      	cmp	r3, #64	; 0x40
 80096a8:	d82e      	bhi.n	8009708 <USBD_StdItfReq+0x7c>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <USBD_StdItfReq+0x26>
 80096ae:	2b20      	cmp	r3, #32
 80096b0:	d12a      	bne.n	8009708 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b8:	3b01      	subs	r3, #1
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d81d      	bhi.n	80096fa <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	889b      	ldrh	r3, [r3, #4]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d813      	bhi.n	80096f0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
 80096d6:	4603      	mov	r3, r0
 80096d8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	88db      	ldrh	r3, [r3, #6]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d110      	bne.n	8009704 <USBD_StdItfReq+0x78>
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10d      	bne.n	8009704 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fd93 	bl	800a214 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80096ee:	e009      	b.n	8009704 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fcc3 	bl	800a07e <USBD_CtlError>
      break;
 80096f8:	e004      	b.n	8009704 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fcbe 	bl	800a07e <USBD_CtlError>
      break;
 8009702:	e000      	b.n	8009706 <USBD_StdItfReq+0x7a>
      break;
 8009704:	bf00      	nop
    }
    break;
 8009706:	e004      	b.n	8009712 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fcb7 	bl	800a07e <USBD_CtlError>
    break;
 8009710:	bf00      	nop
  }

  return ret;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	889b      	ldrh	r3, [r3, #4]
 800972e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009738:	2b40      	cmp	r3, #64	; 0x40
 800973a:	d007      	beq.n	800974c <USBD_StdEPReq+0x30>
 800973c:	2b40      	cmp	r3, #64	; 0x40
 800973e:	f200 8140 	bhi.w	80099c2 <USBD_StdEPReq+0x2a6>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00c      	beq.n	8009760 <USBD_StdEPReq+0x44>
 8009746:	2b20      	cmp	r3, #32
 8009748:	f040 813b 	bne.w	80099c2 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	4798      	blx	r3
 800975a:	4603      	mov	r3, r0
 800975c:	73fb      	strb	r3, [r7, #15]
    break;
 800975e:	e135      	b.n	80099cc <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	785b      	ldrb	r3, [r3, #1]
 8009764:	2b03      	cmp	r3, #3
 8009766:	d007      	beq.n	8009778 <USBD_StdEPReq+0x5c>
 8009768:	2b03      	cmp	r3, #3
 800976a:	f300 8124 	bgt.w	80099b6 <USBD_StdEPReq+0x29a>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d07b      	beq.n	800986a <USBD_StdEPReq+0x14e>
 8009772:	2b01      	cmp	r3, #1
 8009774:	d03b      	beq.n	80097ee <USBD_StdEPReq+0xd2>
 8009776:	e11e      	b.n	80099b6 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800977e:	2b02      	cmp	r3, #2
 8009780:	d002      	beq.n	8009788 <USBD_StdEPReq+0x6c>
 8009782:	2b03      	cmp	r3, #3
 8009784:	d016      	beq.n	80097b4 <USBD_StdEPReq+0x98>
 8009786:	e02c      	b.n	80097e2 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00d      	beq.n	80097aa <USBD_StdEPReq+0x8e>
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	2b80      	cmp	r3, #128	; 0x80
 8009792:	d00a      	beq.n	80097aa <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 fa05 	bl	800aba8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800979e:	2180      	movs	r1, #128	; 0x80
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f001 fa01 	bl	800aba8 <USBD_LL_StallEP>
 80097a6:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80097a8:	e020      	b.n	80097ec <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fc66 	bl	800a07e <USBD_CtlError>
        break;
 80097b2:	e01b      	b.n	80097ec <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	885b      	ldrh	r3, [r3, #2]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10e      	bne.n	80097da <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00b      	beq.n	80097da <USBD_StdEPReq+0xbe>
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	2b80      	cmp	r3, #128	; 0x80
 80097c6:	d008      	beq.n	80097da <USBD_StdEPReq+0xbe>
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	88db      	ldrh	r3, [r3, #6]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d104      	bne.n	80097da <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80097d0:	7bbb      	ldrb	r3, [r7, #14]
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f001 f9e7 	bl	800aba8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fd1a 	bl	800a214 <USBD_CtlSendStatus>

        break;
 80097e0:	e004      	b.n	80097ec <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fc4a 	bl	800a07e <USBD_CtlError>
        break;
 80097ea:	bf00      	nop
      }
      break;
 80097ec:	e0e8      	b.n	80099c0 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d002      	beq.n	80097fe <USBD_StdEPReq+0xe2>
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d016      	beq.n	800982a <USBD_StdEPReq+0x10e>
 80097fc:	e02e      	b.n	800985c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00d      	beq.n	8009820 <USBD_StdEPReq+0x104>
 8009804:	7bbb      	ldrb	r3, [r7, #14]
 8009806:	2b80      	cmp	r3, #128	; 0x80
 8009808:	d00a      	beq.n	8009820 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	4619      	mov	r1, r3
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f001 f9ca 	bl	800aba8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009814:	2180      	movs	r1, #128	; 0x80
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f001 f9c6 	bl	800aba8 <USBD_LL_StallEP>
 800981c:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800981e:	e023      	b.n	8009868 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fc2b 	bl	800a07e <USBD_CtlError>
        break;
 8009828:	e01e      	b.n	8009868 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	885b      	ldrh	r3, [r3, #2]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d119      	bne.n	8009866 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009838:	2b00      	cmp	r3, #0
 800983a:	d004      	beq.n	8009846 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f001 f9d0 	bl	800abe6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fce4 	bl	800a214 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	4798      	blx	r3
        }
        break;
 800985a:	e004      	b.n	8009866 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fc0d 	bl	800a07e <USBD_CtlError>
        break;
 8009864:	e000      	b.n	8009868 <USBD_StdEPReq+0x14c>
        break;
 8009866:	bf00      	nop
      }
      break;
 8009868:	e0aa      	b.n	80099c0 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009870:	2b02      	cmp	r3, #2
 8009872:	d002      	beq.n	800987a <USBD_StdEPReq+0x15e>
 8009874:	2b03      	cmp	r3, #3
 8009876:	d032      	beq.n	80098de <USBD_StdEPReq+0x1c2>
 8009878:	e097      	b.n	80099aa <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800987a:	7bbb      	ldrb	r3, [r7, #14]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d007      	beq.n	8009890 <USBD_StdEPReq+0x174>
 8009880:	7bbb      	ldrb	r3, [r7, #14]
 8009882:	2b80      	cmp	r3, #128	; 0x80
 8009884:	d004      	beq.n	8009890 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fbf8 	bl	800a07e <USBD_CtlError>
          break;
 800988e:	e091      	b.n	80099b4 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009894:	2b00      	cmp	r3, #0
 8009896:	da0b      	bge.n	80098b0 <USBD_StdEPReq+0x194>
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800989e:	4613      	mov	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	4413      	add	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	3310      	adds	r3, #16
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	4413      	add	r3, r2
 80098ac:	3304      	adds	r3, #4
 80098ae:	e00b      	b.n	80098c8 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 80098b0:	7bbb      	ldrb	r3, [r7, #14]
 80098b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	4413      	add	r3, r2
 80098c6:	3304      	adds	r3, #4
 80098c8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2202      	movs	r2, #2
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 fc42 	bl	800a160 <USBD_CtlSendData>
        break;
 80098dc:	e06a      	b.n	80099b4 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80098de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	da11      	bge.n	800990a <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	f003 020f 	and.w	r2, r3, #15
 80098ec:	6879      	ldr	r1, [r7, #4]
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	440b      	add	r3, r1
 80098f8:	3324      	adds	r3, #36	; 0x24
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d117      	bne.n	8009930 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 fbbb 	bl	800a07e <USBD_CtlError>
            break;
 8009908:	e054      	b.n	80099b4 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	f003 020f 	and.w	r2, r3, #15
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	440b      	add	r3, r1
 800991c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d104      	bne.n	8009930 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fba8 	bl	800a07e <USBD_CtlError>
            break;
 800992e:	e041      	b.n	80099b4 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009934:	2b00      	cmp	r3, #0
 8009936:	da0b      	bge.n	8009950 <USBD_StdEPReq+0x234>
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	3310      	adds	r3, #16
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	4413      	add	r3, r2
 800994c:	3304      	adds	r3, #4
 800994e:	e00b      	b.n	8009968 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	4413      	add	r3, r2
 8009966:	3304      	adds	r3, #4
 8009968:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800996a:	7bbb      	ldrb	r3, [r7, #14]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <USBD_StdEPReq+0x25a>
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	2b80      	cmp	r3, #128	; 0x80
 8009974:	d103      	bne.n	800997e <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	2200      	movs	r2, #0
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	e00e      	b.n	800999c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f001 f94e 	bl	800ac24 <USBD_LL_IsStallEP>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2201      	movs	r2, #1
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	e002      	b.n	800999c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2202      	movs	r2, #2
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fbdc 	bl	800a160 <USBD_CtlSendData>
          break;
 80099a8:	e004      	b.n	80099b4 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fb66 	bl	800a07e <USBD_CtlError>
        break;
 80099b2:	bf00      	nop
      }
      break;
 80099b4:	e004      	b.n	80099c0 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fb60 	bl	800a07e <USBD_CtlError>
      break;
 80099be:	bf00      	nop
    }
    break;
 80099c0:	e004      	b.n	80099cc <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fb5a 	bl	800a07e <USBD_CtlError>
    break;
 80099ca:	bf00      	nop
  }

  return ret;
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
	...

080099d8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099e2:	2300      	movs	r3, #0
 80099e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	885b      	ldrh	r3, [r3, #2]
 80099f2:	0a1b      	lsrs	r3, r3, #8
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	2b0e      	cmp	r3, #14
 80099fa:	f200 8152 	bhi.w	8009ca2 <USBD_GetDescriptor+0x2ca>
 80099fe:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <USBD_GetDescriptor+0x2c>)
 8009a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a04:	08009a75 	.word	0x08009a75
 8009a08:	08009a8d 	.word	0x08009a8d
 8009a0c:	08009acd 	.word	0x08009acd
 8009a10:	08009ca3 	.word	0x08009ca3
 8009a14:	08009ca3 	.word	0x08009ca3
 8009a18:	08009c43 	.word	0x08009c43
 8009a1c:	08009c6f 	.word	0x08009c6f
 8009a20:	08009ca3 	.word	0x08009ca3
 8009a24:	08009ca3 	.word	0x08009ca3
 8009a28:	08009ca3 	.word	0x08009ca3
 8009a2c:	08009ca3 	.word	0x08009ca3
 8009a30:	08009ca3 	.word	0x08009ca3
 8009a34:	08009ca3 	.word	0x08009ca3
 8009a38:	08009ca3 	.word	0x08009ca3
 8009a3c:	08009a41 	.word	0x08009a41
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00b      	beq.n	8009a64 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	7c12      	ldrb	r2, [r2, #16]
 8009a58:	f107 0108 	add.w	r1, r7, #8
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
 8009a60:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009a62:	e126      	b.n	8009cb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fb09 	bl	800a07e <USBD_CtlError>
      err++;
 8009a6c:	7afb      	ldrb	r3, [r7, #11]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	72fb      	strb	r3, [r7, #11]
    break;
 8009a72:	e11e      	b.n	8009cb2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	7c12      	ldrb	r2, [r2, #16]
 8009a80:	f107 0108 	add.w	r1, r7, #8
 8009a84:	4610      	mov	r0, r2
 8009a86:	4798      	blx	r3
 8009a88:	60f8      	str	r0, [r7, #12]
    break;
 8009a8a:	e112      	b.n	8009cb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	7c1b      	ldrb	r3, [r3, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10d      	bne.n	8009ab0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a9c:	f107 0208 	add.w	r2, r7, #8
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	4798      	blx	r3
 8009aa4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	2202      	movs	r2, #2
 8009aac:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009aae:	e100      	b.n	8009cb2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	f107 0208 	add.w	r2, r7, #8
 8009abc:	4610      	mov	r0, r2
 8009abe:	4798      	blx	r3
 8009ac0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	701a      	strb	r2, [r3, #0]
    break;
 8009aca:	e0f2      	b.n	8009cb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	885b      	ldrh	r3, [r3, #2]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b05      	cmp	r3, #5
 8009ad4:	f200 80ac 	bhi.w	8009c30 <USBD_GetDescriptor+0x258>
 8009ad8:	a201      	add	r2, pc, #4	; (adr r2, 8009ae0 <USBD_GetDescriptor+0x108>)
 8009ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ade:	bf00      	nop
 8009ae0:	08009af9 	.word	0x08009af9
 8009ae4:	08009b2d 	.word	0x08009b2d
 8009ae8:	08009b61 	.word	0x08009b61
 8009aec:	08009b95 	.word	0x08009b95
 8009af0:	08009bc9 	.word	0x08009bc9
 8009af4:	08009bfd 	.word	0x08009bfd
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00b      	beq.n	8009b1c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	7c12      	ldrb	r2, [r2, #16]
 8009b10:	f107 0108 	add.w	r1, r7, #8
 8009b14:	4610      	mov	r0, r2
 8009b16:	4798      	blx	r3
 8009b18:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b1a:	e091      	b.n	8009c40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 faad 	bl	800a07e <USBD_CtlError>
        err++;
 8009b24:	7afb      	ldrb	r3, [r7, #11]
 8009b26:	3301      	adds	r3, #1
 8009b28:	72fb      	strb	r3, [r7, #11]
      break;
 8009b2a:	e089      	b.n	8009c40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00b      	beq.n	8009b50 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	7c12      	ldrb	r2, [r2, #16]
 8009b44:	f107 0108 	add.w	r1, r7, #8
 8009b48:	4610      	mov	r0, r2
 8009b4a:	4798      	blx	r3
 8009b4c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b4e:	e077      	b.n	8009c40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fa93 	bl	800a07e <USBD_CtlError>
        err++;
 8009b58:	7afb      	ldrb	r3, [r7, #11]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	72fb      	strb	r3, [r7, #11]
      break;
 8009b5e:	e06f      	b.n	8009c40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00b      	beq.n	8009b84 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	7c12      	ldrb	r2, [r2, #16]
 8009b78:	f107 0108 	add.w	r1, r7, #8
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	4798      	blx	r3
 8009b80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b82:	e05d      	b.n	8009c40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa79 	bl	800a07e <USBD_CtlError>
        err++;
 8009b8c:	7afb      	ldrb	r3, [r7, #11]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	72fb      	strb	r3, [r7, #11]
      break;
 8009b92:	e055      	b.n	8009c40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00b      	beq.n	8009bb8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	7c12      	ldrb	r2, [r2, #16]
 8009bac:	f107 0108 	add.w	r1, r7, #8
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	4798      	blx	r3
 8009bb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bb6:	e043      	b.n	8009c40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fa5f 	bl	800a07e <USBD_CtlError>
        err++;
 8009bc0:	7afb      	ldrb	r3, [r7, #11]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	72fb      	strb	r3, [r7, #11]
      break;
 8009bc6:	e03b      	b.n	8009c40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00b      	beq.n	8009bec <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	7c12      	ldrb	r2, [r2, #16]
 8009be0:	f107 0108 	add.w	r1, r7, #8
 8009be4:	4610      	mov	r0, r2
 8009be6:	4798      	blx	r3
 8009be8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bea:	e029      	b.n	8009c40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009bec:	6839      	ldr	r1, [r7, #0]
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fa45 	bl	800a07e <USBD_CtlError>
        err++;
 8009bf4:	7afb      	ldrb	r3, [r7, #11]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	72fb      	strb	r3, [r7, #11]
      break;
 8009bfa:	e021      	b.n	8009c40 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00b      	beq.n	8009c20 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	7c12      	ldrb	r2, [r2, #16]
 8009c14:	f107 0108 	add.w	r1, r7, #8
 8009c18:	4610      	mov	r0, r2
 8009c1a:	4798      	blx	r3
 8009c1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c1e:	e00f      	b.n	8009c40 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009c20:	6839      	ldr	r1, [r7, #0]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa2b 	bl	800a07e <USBD_CtlError>
        err++;
 8009c28:	7afb      	ldrb	r3, [r7, #11]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	72fb      	strb	r3, [r7, #11]
      break;
 8009c2e:	e007      	b.n	8009c40 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fa23 	bl	800a07e <USBD_CtlError>
      err++;
 8009c38:	7afb      	ldrb	r3, [r7, #11]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009c3e:	bf00      	nop
    }
    break;
 8009c40:	e037      	b.n	8009cb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	7c1b      	ldrb	r3, [r3, #16]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d109      	bne.n	8009c5e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c52:	f107 0208 	add.w	r2, r7, #8
 8009c56:	4610      	mov	r0, r2
 8009c58:	4798      	blx	r3
 8009c5a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009c5c:	e029      	b.n	8009cb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fa0c 	bl	800a07e <USBD_CtlError>
      err++;
 8009c66:	7afb      	ldrb	r3, [r7, #11]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	72fb      	strb	r3, [r7, #11]
    break;
 8009c6c:	e021      	b.n	8009cb2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	7c1b      	ldrb	r3, [r3, #16]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10d      	bne.n	8009c92 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c7e:	f107 0208 	add.w	r2, r7, #8
 8009c82:	4610      	mov	r0, r2
 8009c84:	4798      	blx	r3
 8009c86:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	2207      	movs	r2, #7
 8009c8e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009c90:	e00f      	b.n	8009cb2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f9f2 	bl	800a07e <USBD_CtlError>
      err++;
 8009c9a:	7afb      	ldrb	r3, [r7, #11]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	72fb      	strb	r3, [r7, #11]
    break;
 8009ca0:	e007      	b.n	8009cb2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f9ea 	bl	800a07e <USBD_CtlError>
    err++;
 8009caa:	7afb      	ldrb	r3, [r7, #11]
 8009cac:	3301      	adds	r3, #1
 8009cae:	72fb      	strb	r3, [r7, #11]
    break;
 8009cb0:	bf00      	nop
  }

  if (err != 0U)
 8009cb2:	7afb      	ldrb	r3, [r7, #11]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d11e      	bne.n	8009cf6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	88db      	ldrh	r3, [r3, #6]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d016      	beq.n	8009cee <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8009cc0:	893b      	ldrh	r3, [r7, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00e      	beq.n	8009ce4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	88da      	ldrh	r2, [r3, #6]
 8009cca:	893b      	ldrh	r3, [r7, #8]
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	bf28      	it	cs
 8009cd0:	4613      	movcs	r3, r2
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009cd6:	893b      	ldrh	r3, [r7, #8]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fa3f 	bl	800a160 <USBD_CtlSendData>
 8009ce2:	e009      	b.n	8009cf8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f9c9 	bl	800a07e <USBD_CtlError>
 8009cec:	e004      	b.n	8009cf8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fa90 	bl	800a214 <USBD_CtlSendStatus>
 8009cf4:	e000      	b.n	8009cf8 <USBD_GetDescriptor+0x320>
    return;
 8009cf6:	bf00      	nop
    }
  }
}
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop

08009d00 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	889b      	ldrh	r3, [r3, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d130      	bne.n	8009d74 <USBD_SetAddress+0x74>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	88db      	ldrh	r3, [r3, #6]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d12c      	bne.n	8009d74 <USBD_SetAddress+0x74>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	885b      	ldrh	r3, [r3, #2]
 8009d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8009d20:	d828      	bhi.n	8009d74 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	885b      	ldrh	r3, [r3, #2]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d104      	bne.n	8009d42 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f99f 	bl	800a07e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d40:	e01d      	b.n	8009d7e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7bfa      	ldrb	r2, [r7, #15]
 8009d46:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 ff94 	bl	800ac7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fa5d 	bl	800a214 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2202      	movs	r2, #2
 8009d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d68:	e009      	b.n	8009d7e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d72:	e004      	b.n	8009d7e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f981 	bl	800a07e <USBD_CtlError>
  }
}
 8009d7c:	bf00      	nop
 8009d7e:	bf00      	nop
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	885b      	ldrh	r3, [r3, #2]
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	4b4b      	ldr	r3, [pc, #300]	; (8009ecc <USBD_SetConfig+0x144>)
 8009d9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009da0:	4b4a      	ldr	r3, [pc, #296]	; (8009ecc <USBD_SetConfig+0x144>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d905      	bls.n	8009db4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f967 	bl	800a07e <USBD_CtlError>
    return USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e087      	b.n	8009ec4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d002      	beq.n	8009dc4 <USBD_SetConfig+0x3c>
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d025      	beq.n	8009e0e <USBD_SetConfig+0x86>
 8009dc2:	e071      	b.n	8009ea8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009dc4:	4b41      	ldr	r3, [pc, #260]	; (8009ecc <USBD_SetConfig+0x144>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01c      	beq.n	8009e06 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009dcc:	4b3f      	ldr	r3, [pc, #252]	; (8009ecc <USBD_SetConfig+0x144>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009dd6:	4b3d      	ldr	r3, [pc, #244]	; (8009ecc <USBD_SetConfig+0x144>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7ff f96f 	bl	80090c0 <USBD_SetClassConfig>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d004      	beq.n	8009df6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f945 	bl	800a07e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009df4:	e065      	b.n	8009ec2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fa0c 	bl	800a214 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2203      	movs	r2, #3
 8009e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009e04:	e05d      	b.n	8009ec2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fa04 	bl	800a214 <USBD_CtlSendStatus>
    break;
 8009e0c:	e059      	b.n	8009ec2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009e0e:	4b2f      	ldr	r3, [pc, #188]	; (8009ecc <USBD_SetConfig+0x144>)
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d112      	bne.n	8009e3c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2202      	movs	r2, #2
 8009e1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009e1e:	4b2b      	ldr	r3, [pc, #172]	; (8009ecc <USBD_SetConfig+0x144>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e28:	4b28      	ldr	r3, [pc, #160]	; (8009ecc <USBD_SetConfig+0x144>)
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f7ff f962 	bl	80090f8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f9ed 	bl	800a214 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009e3a:	e042      	b.n	8009ec2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009e3c:	4b23      	ldr	r3, [pc, #140]	; (8009ecc <USBD_SetConfig+0x144>)
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	461a      	mov	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d02a      	beq.n	8009ea0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f7ff f950 	bl	80090f8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009e58:	4b1c      	ldr	r3, [pc, #112]	; (8009ecc <USBD_SetConfig+0x144>)
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e62:	4b1a      	ldr	r3, [pc, #104]	; (8009ecc <USBD_SetConfig+0x144>)
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff f929 	bl	80090c0 <USBD_SetClassConfig>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00f      	beq.n	8009e98 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f8ff 	bl	800a07e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff f935 	bl	80090f8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2202      	movs	r2, #2
 8009e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009e96:	e014      	b.n	8009ec2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f9bb 	bl	800a214 <USBD_CtlSendStatus>
    break;
 8009e9e:	e010      	b.n	8009ec2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f9b7 	bl	800a214 <USBD_CtlSendStatus>
    break;
 8009ea6:	e00c      	b.n	8009ec2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f8e7 	bl	800a07e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009eb0:	4b06      	ldr	r3, [pc, #24]	; (8009ecc <USBD_SetConfig+0x144>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff f91e 	bl	80090f8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec0:	bf00      	nop
  }

  return ret;
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	20004694 	.word	0x20004694

08009ed0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	88db      	ldrh	r3, [r3, #6]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d004      	beq.n	8009eec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f8ca 	bl	800a07e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009eea:	e022      	b.n	8009f32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	dc02      	bgt.n	8009efc <USBD_GetConfig+0x2c>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	dc03      	bgt.n	8009f02 <USBD_GetConfig+0x32>
 8009efa:	e015      	b.n	8009f28 <USBD_GetConfig+0x58>
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d00b      	beq.n	8009f18 <USBD_GetConfig+0x48>
 8009f00:	e012      	b.n	8009f28 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f925 	bl	800a160 <USBD_CtlSendData>
      break;
 8009f16:	e00c      	b.n	8009f32 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	3304      	adds	r3, #4
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 f91d 	bl	800a160 <USBD_CtlSendData>
      break;
 8009f26:	e004      	b.n	8009f32 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f8a7 	bl	800a07e <USBD_CtlError>
      break;
 8009f30:	bf00      	nop
}
 8009f32:	bf00      	nop
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b082      	sub	sp, #8
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d81e      	bhi.n	8009f8e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	88db      	ldrh	r3, [r3, #6]
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d004      	beq.n	8009f62 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f88f 	bl	800a07e <USBD_CtlError>
      break;
 8009f60:	e01a      	b.n	8009f98 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d005      	beq.n	8009f7e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	f043 0202 	orr.w	r2, r3, #2
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	330c      	adds	r3, #12
 8009f82:	2202      	movs	r2, #2
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f8ea 	bl	800a160 <USBD_CtlSendData>
    break;
 8009f8c:	e004      	b.n	8009f98 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009f8e:	6839      	ldr	r1, [r7, #0]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f874 	bl	800a07e <USBD_CtlError>
    break;
 8009f96:	bf00      	nop
  }
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	885b      	ldrh	r3, [r3, #2]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d106      	bne.n	8009fc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f92a 	bl	800a214 <USBD_CtlSendStatus>
  }
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d80b      	bhi.n	8009ff6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	885b      	ldrh	r3, [r3, #2]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d10c      	bne.n	800a000 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f910 	bl	800a214 <USBD_CtlSendStatus>
      }
      break;
 8009ff4:	e004      	b.n	800a000 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ff6:	6839      	ldr	r1, [r7, #0]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 f840 	bl	800a07e <USBD_CtlError>
      break;
 8009ffe:	e000      	b.n	800a002 <USBD_ClrFeature+0x3a>
      break;
 800a000:	bf00      	nop
  }
}
 800a002:	bf00      	nop
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	781a      	ldrb	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3301      	adds	r3, #1
 800a024:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	781a      	ldrb	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3301      	adds	r3, #1
 800a032:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f7ff fa9c 	bl	8009572 <SWAPBYTE>
 800a03a:	4603      	mov	r3, r0
 800a03c:	461a      	mov	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3301      	adds	r3, #1
 800a046:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3301      	adds	r3, #1
 800a04c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f7ff fa8f 	bl	8009572 <SWAPBYTE>
 800a054:	4603      	mov	r3, r0
 800a056:	461a      	mov	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	3301      	adds	r3, #1
 800a060:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3301      	adds	r3, #1
 800a066:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7ff fa82 	bl	8009572 <SWAPBYTE>
 800a06e:	4603      	mov	r3, r0
 800a070:	461a      	mov	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	80da      	strh	r2, [r3, #6]
}
 800a076:	bf00      	nop
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b082      	sub	sp, #8
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a088:	2180      	movs	r1, #128	; 0x80
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fd8c 	bl	800aba8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a090:	2100      	movs	r1, #0
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fd88 	bl	800aba8 <USBD_LL_StallEP>
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d036      	beq.n	800a124 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a0ba:	6938      	ldr	r0, [r7, #16]
 800a0bc:	f000 f836 	bl	800a12c <USBD_GetLen>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	005b      	lsls	r3, r3, #1
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	7812      	ldrb	r2, [r2, #0]
 800a0d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0da:	7dfb      	ldrb	r3, [r7, #23]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a0f0:	e013      	b.n	800a11a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a0f2:	7dfb      	ldrb	r3, [r7, #23]
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	693a      	ldr	r2, [r7, #16]
 800a0fa:	7812      	ldrb	r2, [r2, #0]
 800a0fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	3301      	adds	r3, #1
 800a102:	613b      	str	r3, [r7, #16]
    idx++;
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	3301      	adds	r3, #1
 800a108:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a10a:	7dfb      	ldrb	r3, [r7, #23]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	4413      	add	r3, r2
 800a110:	2200      	movs	r2, #0
 800a112:	701a      	strb	r2, [r3, #0]
    idx++;
 800a114:	7dfb      	ldrb	r3, [r7, #23]
 800a116:	3301      	adds	r3, #1
 800a118:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e7      	bne.n	800a0f2 <USBD_GetString+0x52>
 800a122:	e000      	b.n	800a126 <USBD_GetString+0x86>
    return;
 800a124:	bf00      	nop
  }
}
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a13c:	e005      	b.n	800a14a <USBD_GetLen+0x1e>
  {
    len++;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
 800a140:	3301      	adds	r3, #1
 800a142:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	3301      	adds	r3, #1
 800a148:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1f5      	bne.n	800a13e <USBD_GetLen+0x12>
  }

  return len;
 800a152:	7bfb      	ldrb	r3, [r7, #15]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2202      	movs	r2, #2
 800a170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	2100      	movs	r1, #0
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f000 fd97 	bl	800acba <USBD_LL_Transmit>

  return USBD_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b084      	sub	sp, #16
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	60f8      	str	r0, [r7, #12]
 800a19e:	60b9      	str	r1, [r7, #8]
 800a1a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 fd86 	bl	800acba <USBD_LL_Transmit>

  return USBD_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2203      	movs	r2, #3
 800a1c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 fd8a 	bl	800acfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	2100      	movs	r1, #0
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 fd79 	bl	800acfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2204      	movs	r2, #4
 800a220:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a224:	2300      	movs	r3, #0
 800a226:	2200      	movs	r2, #0
 800a228:	2100      	movs	r1, #0
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fd45 	bl	800acba <USBD_LL_Transmit>

  return USBD_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b082      	sub	sp, #8
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2205      	movs	r2, #5
 800a246:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a24a:	2300      	movs	r3, #0
 800a24c:	2200      	movs	r2, #0
 800a24e:	2100      	movs	r1, #0
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fd53 	bl	800acfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a264:	2200      	movs	r2, #0
 800a266:	4912      	ldr	r1, [pc, #72]	; (800a2b0 <MX_USB_DEVICE_Init+0x50>)
 800a268:	4812      	ldr	r0, [pc, #72]	; (800a2b4 <MX_USB_DEVICE_Init+0x54>)
 800a26a:	f7fe febb 	bl	8008fe4 <USBD_Init>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a274:	f7f6 faa0 	bl	80007b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a278:	490f      	ldr	r1, [pc, #60]	; (800a2b8 <MX_USB_DEVICE_Init+0x58>)
 800a27a:	480e      	ldr	r0, [pc, #56]	; (800a2b4 <MX_USB_DEVICE_Init+0x54>)
 800a27c:	f7fe fee8 	bl	8009050 <USBD_RegisterClass>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a286:	f7f6 fa97 	bl	80007b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a28a:	490c      	ldr	r1, [pc, #48]	; (800a2bc <MX_USB_DEVICE_Init+0x5c>)
 800a28c:	4809      	ldr	r0, [pc, #36]	; (800a2b4 <MX_USB_DEVICE_Init+0x54>)
 800a28e:	f7fe fe0d 	bl	8008eac <USBD_CDC_RegisterInterface>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a298:	f7f6 fa8e 	bl	80007b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a29c:	4805      	ldr	r0, [pc, #20]	; (800a2b4 <MX_USB_DEVICE_Init+0x54>)
 800a29e:	f7fe fef8 	bl	8009092 <USBD_Start>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2a8:	f7f6 fa86 	bl	80007b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2ac:	bf00      	nop
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	2000013c 	.word	0x2000013c
 800a2b4:	20004698 	.word	0x20004698
 800a2b8:	20000024 	.word	0x20000024
 800a2bc:	20000128 	.word	0x20000128

0800a2c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4905      	ldr	r1, [pc, #20]	; (800a2dc <CDC_Init_FS+0x1c>)
 800a2c8:	4805      	ldr	r0, [pc, #20]	; (800a2e0 <CDC_Init_FS+0x20>)
 800a2ca:	f7fe fe04 	bl	8008ed6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a2ce:	4905      	ldr	r1, [pc, #20]	; (800a2e4 <CDC_Init_FS+0x24>)
 800a2d0:	4803      	ldr	r0, [pc, #12]	; (800a2e0 <CDC_Init_FS+0x20>)
 800a2d2:	f7fe fe19 	bl	8008f08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a2d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	20005168 	.word	0x20005168
 800a2e0:	20004698 	.word	0x20004698
 800a2e4:	20004968 	.word	0x20004968

0800a2e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a2ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	6039      	str	r1, [r7, #0]
 800a302:	71fb      	strb	r3, [r7, #7]
 800a304:	4613      	mov	r3, r2
 800a306:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0};
 800a308:	2300      	movs	r3, #0
 800a30a:	60bb      	str	r3, [r7, #8]
 800a30c:	f107 030c 	add.w	r3, r7, #12
 800a310:	2100      	movs	r1, #0
 800a312:	460a      	mov	r2, r1
 800a314:	801a      	strh	r2, [r3, #0]
 800a316:	460a      	mov	r2, r1
 800a318:	709a      	strb	r2, [r3, #2]
  switch(cmd)
 800a31a:	79fb      	ldrb	r3, [r7, #7]
 800a31c:	2b23      	cmp	r3, #35	; 0x23
 800a31e:	d87d      	bhi.n	800a41c <CDC_Control_FS+0x124>
 800a320:	a201      	add	r2, pc, #4	; (adr r2, 800a328 <CDC_Control_FS+0x30>)
 800a322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a326:	bf00      	nop
 800a328:	0800a41d 	.word	0x0800a41d
 800a32c:	0800a41d 	.word	0x0800a41d
 800a330:	0800a41d 	.word	0x0800a41d
 800a334:	0800a41d 	.word	0x0800a41d
 800a338:	0800a41d 	.word	0x0800a41d
 800a33c:	0800a41d 	.word	0x0800a41d
 800a340:	0800a41d 	.word	0x0800a41d
 800a344:	0800a41d 	.word	0x0800a41d
 800a348:	0800a41d 	.word	0x0800a41d
 800a34c:	0800a41d 	.word	0x0800a41d
 800a350:	0800a41d 	.word	0x0800a41d
 800a354:	0800a41d 	.word	0x0800a41d
 800a358:	0800a41d 	.word	0x0800a41d
 800a35c:	0800a41d 	.word	0x0800a41d
 800a360:	0800a41d 	.word	0x0800a41d
 800a364:	0800a41d 	.word	0x0800a41d
 800a368:	0800a41d 	.word	0x0800a41d
 800a36c:	0800a41d 	.word	0x0800a41d
 800a370:	0800a41d 	.word	0x0800a41d
 800a374:	0800a41d 	.word	0x0800a41d
 800a378:	0800a41d 	.word	0x0800a41d
 800a37c:	0800a41d 	.word	0x0800a41d
 800a380:	0800a41d 	.word	0x0800a41d
 800a384:	0800a41d 	.word	0x0800a41d
 800a388:	0800a41d 	.word	0x0800a41d
 800a38c:	0800a41d 	.word	0x0800a41d
 800a390:	0800a41d 	.word	0x0800a41d
 800a394:	0800a41d 	.word	0x0800a41d
 800a398:	0800a41d 	.word	0x0800a41d
 800a39c:	0800a41d 	.word	0x0800a41d
 800a3a0:	0800a41d 	.word	0x0800a41d
 800a3a4:	0800a41d 	.word	0x0800a41d
 800a3a8:	0800a3b9 	.word	0x0800a3b9
 800a3ac:	0800a3e5 	.word	0x0800a3e5
 800a3b0:	0800a41d 	.word	0x0800a41d
 800a3b4:	0800a41d 	.word	0x0800a41d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	785b      	ldrb	r3, [r3, #1]
 800a3c2:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	789b      	ldrb	r3, [r3, #2]
 800a3c8:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	78db      	ldrb	r3, [r3, #3]
 800a3ce:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	791b      	ldrb	r3, [r3, #4]
 800a3d4:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	795b      	ldrb	r3, [r3, #5]
 800a3da:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	799b      	ldrb	r3, [r3, #6]
 800a3e0:	73bb      	strb	r3, [r7, #14]
    break;
 800a3e2:	e01c      	b.n	800a41e <CDC_Control_FS+0x126>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = tempbuf[0];
 800a3e4:	7a3a      	ldrb	r2, [r7, #8]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = tempbuf[1];
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	7a7a      	ldrb	r2, [r7, #9]
 800a3f0:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = tempbuf[2];
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	3302      	adds	r3, #2
 800a3f6:	7aba      	ldrb	r2, [r7, #10]
 800a3f8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = tempbuf[3];
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	3303      	adds	r3, #3
 800a3fe:	7afa      	ldrb	r2, [r7, #11]
 800a400:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = tempbuf[4];
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	3304      	adds	r3, #4
 800a406:	7b3a      	ldrb	r2, [r7, #12]
 800a408:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = tempbuf[5];
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	3305      	adds	r3, #5
 800a40e:	7b7a      	ldrb	r2, [r7, #13]
 800a410:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = tempbuf[6];
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	3306      	adds	r3, #6
 800a416:	7bba      	ldrb	r2, [r7, #14]
 800a418:	701a      	strb	r2, [r3, #0]
    break;
 800a41a:	e000      	b.n	800a41e <CDC_Control_FS+0x126>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a41c:	bf00      	nop
  }

  return (USBD_OK);
 800a41e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a420:	4618      	mov	r0, r3
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b088      	sub	sp, #32
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	unsigned long ulMask = 0x00;
 800a436:	2300      	movs	r3, #0
 800a438:	61fb      	str	r3, [r7, #28]
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800a43a:	2300      	movs	r3, #0
 800a43c:	60fb      	str	r3, [r7, #12]

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	4819      	ldr	r0, [pc, #100]	; (800a4a8 <CDC_Receive_FS+0x7c>)
 800a442:	f7fe fd61 	bl	8008f08 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a446:	4818      	ldr	r0, [pc, #96]	; (800a4a8 <CDC_Receive_FS+0x7c>)
 800a448:	f7fe fda2 	bl	8008f90 <USBD_CDC_ReceivePacket>
        __asm volatile
 800a44c:	f3ef 8211 	mrs	r2, BASEPRI
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	b672      	cpsid	i
 800a456:	f383 8811 	msr	BASEPRI, r3
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	b662      	cpsie	i
 800a464:	61ba      	str	r2, [r7, #24]
 800a466:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 800a468:	69bb      	ldr	r3, [r7, #24]

	ulMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a46a:	61fb      	str	r3, [r7, #28]
	if (pdTRUE != xQueueSendFromISR( xCMDRxQueue,Buf, &xHigherPriorityTaskWoken )) {
 800a46c:	4b0f      	ldr	r3, [pc, #60]	; (800a4ac <CDC_Receive_FS+0x80>)
 800a46e:	6818      	ldr	r0, [r3, #0]
 800a470:	f107 020c 	add.w	r2, r7, #12
 800a474:	2300      	movs	r3, #0
 800a476:	6879      	ldr	r1, [r7, #4]
 800a478:	f7fb fe4c 	bl	8006114 <xQueueGenericSendFromISR>
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	613b      	str	r3, [r7, #16]
        __asm volatile
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f383 8811 	msr	BASEPRI, r3
    }
 800a486:	bf00      	nop
		/* Run out of space. */
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulMask );

	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d007      	beq.n	800a49e <CDC_Receive_FS+0x72>
 800a48e:	4b08      	ldr	r3, [pc, #32]	; (800a4b0 <CDC_Receive_FS+0x84>)
 800a490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	f3bf 8f6f 	isb	sy
	return (USBD_OK);
 800a49e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3720      	adds	r7, #32
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	20004698 	.word	0x20004698
 800a4ac:	200008bc 	.word	0x200008bc
 800a4b0:	e000ed04 	.word	0xe000ed04

0800a4b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a4c4:	4b0d      	ldr	r3, [pc, #52]	; (800a4fc <CDC_Transmit_FS+0x48>)
 800a4c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e00b      	b.n	800a4f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a4da:	887b      	ldrh	r3, [r7, #2]
 800a4dc:	461a      	mov	r2, r3
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	4806      	ldr	r0, [pc, #24]	; (800a4fc <CDC_Transmit_FS+0x48>)
 800a4e2:	f7fe fcf8 	bl	8008ed6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a4e6:	4805      	ldr	r0, [pc, #20]	; (800a4fc <CDC_Transmit_FS+0x48>)
 800a4e8:	f7fe fd22 	bl	8008f30 <USBD_CDC_TransmitPacket>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20004698 	.word	0x20004698

0800a500 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a500:	b480      	push	{r7}
 800a502:	b087      	sub	sp, #28
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	4613      	mov	r3, r2
 800a50c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a516:	4618      	mov	r0, r3
 800a518:	371c      	adds	r7, #28
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
	...

0800a524 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	4603      	mov	r3, r0
 800a52c:	6039      	str	r1, [r7, #0]
 800a52e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	2212      	movs	r2, #18
 800a534:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a536:	4b03      	ldr	r3, [pc, #12]	; (800a544 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a538:	4618      	mov	r0, r3
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr
 800a544:	2000015c 	.word	0x2000015c

0800a548 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	4603      	mov	r3, r0
 800a550:	6039      	str	r1, [r7, #0]
 800a552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	2204      	movs	r2, #4
 800a558:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a55a:	4b03      	ldr	r3, [pc, #12]	; (800a568 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr
 800a568:	2000017c 	.word	0x2000017c

0800a56c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	4603      	mov	r3, r0
 800a574:	6039      	str	r1, [r7, #0]
 800a576:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a578:	79fb      	ldrb	r3, [r7, #7]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d105      	bne.n	800a58a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	4907      	ldr	r1, [pc, #28]	; (800a5a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a582:	4808      	ldr	r0, [pc, #32]	; (800a5a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a584:	f7ff fd8c 	bl	800a0a0 <USBD_GetString>
 800a588:	e004      	b.n	800a594 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	4904      	ldr	r1, [pc, #16]	; (800a5a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a58e:	4805      	ldr	r0, [pc, #20]	; (800a5a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a590:	f7ff fd86 	bl	800a0a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a594:	4b02      	ldr	r3, [pc, #8]	; (800a5a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20005968 	.word	0x20005968
 800a5a4:	0800b46c 	.word	0x0800b46c

0800a5a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	6039      	str	r1, [r7, #0]
 800a5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	4904      	ldr	r1, [pc, #16]	; (800a5c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5b8:	4804      	ldr	r0, [pc, #16]	; (800a5cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5ba:	f7ff fd71 	bl	800a0a0 <USBD_GetString>
  return USBD_StrDesc;
 800a5be:	4b02      	ldr	r3, [pc, #8]	; (800a5c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20005968 	.word	0x20005968
 800a5cc:	0800b484 	.word	0x0800b484

0800a5d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	6039      	str	r1, [r7, #0]
 800a5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	221a      	movs	r2, #26
 800a5e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a5e2:	f000 f855 	bl	800a690 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a5e6:	4b02      	ldr	r3, [pc, #8]	; (800a5f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	20000180 	.word	0x20000180

0800a5f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	6039      	str	r1, [r7, #0]
 800a5fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a600:	79fb      	ldrb	r3, [r7, #7]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d105      	bne.n	800a612 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	4907      	ldr	r1, [pc, #28]	; (800a628 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a60a:	4808      	ldr	r0, [pc, #32]	; (800a62c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a60c:	f7ff fd48 	bl	800a0a0 <USBD_GetString>
 800a610:	e004      	b.n	800a61c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	4904      	ldr	r1, [pc, #16]	; (800a628 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a616:	4805      	ldr	r0, [pc, #20]	; (800a62c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a618:	f7ff fd42 	bl	800a0a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a61c:	4b02      	ldr	r3, [pc, #8]	; (800a628 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20005968 	.word	0x20005968
 800a62c:	0800b498 	.word	0x0800b498

0800a630 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	6039      	str	r1, [r7, #0]
 800a63a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a63c:	79fb      	ldrb	r3, [r7, #7]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d105      	bne.n	800a64e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	4907      	ldr	r1, [pc, #28]	; (800a664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a646:	4808      	ldr	r0, [pc, #32]	; (800a668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a648:	f7ff fd2a 	bl	800a0a0 <USBD_GetString>
 800a64c:	e004      	b.n	800a658 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	4904      	ldr	r1, [pc, #16]	; (800a664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a652:	4805      	ldr	r0, [pc, #20]	; (800a668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a654:	f7ff fd24 	bl	800a0a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a658:	4b02      	ldr	r3, [pc, #8]	; (800a664 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	20005968 	.word	0x20005968
 800a668:	0800b4a4 	.word	0x0800b4a4

0800a66c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	4603      	mov	r3, r0
 800a674:	6039      	str	r1, [r7, #0]
 800a676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	220c      	movs	r2, #12
 800a67c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a67e:	4b03      	ldr	r3, [pc, #12]	; (800a68c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	20000170 	.word	0x20000170

0800a690 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a696:	4b0f      	ldr	r3, [pc, #60]	; (800a6d4 <Get_SerialNum+0x44>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a69c:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <Get_SerialNum+0x48>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6a2:	4b0e      	ldr	r3, [pc, #56]	; (800a6dc <Get_SerialNum+0x4c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d009      	beq.n	800a6ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6b6:	2208      	movs	r2, #8
 800a6b8:	4909      	ldr	r1, [pc, #36]	; (800a6e0 <Get_SerialNum+0x50>)
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 f814 	bl	800a6e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	4908      	ldr	r1, [pc, #32]	; (800a6e4 <Get_SerialNum+0x54>)
 800a6c4:	68b8      	ldr	r0, [r7, #8]
 800a6c6:	f000 f80f 	bl	800a6e8 <IntToUnicode>
  }
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	1ff0f420 	.word	0x1ff0f420
 800a6d8:	1ff0f424 	.word	0x1ff0f424
 800a6dc:	1ff0f428 	.word	0x1ff0f428
 800a6e0:	20000182 	.word	0x20000182
 800a6e4:	20000192 	.word	0x20000192

0800a6e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b087      	sub	sp, #28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	75fb      	strb	r3, [r7, #23]
 800a6fe:	e027      	b.n	800a750 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	0f1b      	lsrs	r3, r3, #28
 800a704:	2b09      	cmp	r3, #9
 800a706:	d80b      	bhi.n	800a720 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	0f1b      	lsrs	r3, r3, #28
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	4619      	mov	r1, r3
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	440b      	add	r3, r1
 800a718:	3230      	adds	r2, #48	; 0x30
 800a71a:	b2d2      	uxtb	r2, r2
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	e00a      	b.n	800a736 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	0f1b      	lsrs	r3, r3, #28
 800a724:	b2da      	uxtb	r2, r3
 800a726:	7dfb      	ldrb	r3, [r7, #23]
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	4619      	mov	r1, r3
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	440b      	add	r3, r1
 800a730:	3237      	adds	r2, #55	; 0x37
 800a732:	b2d2      	uxtb	r2, r2
 800a734:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	011b      	lsls	r3, r3, #4
 800a73a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	005b      	lsls	r3, r3, #1
 800a740:	3301      	adds	r3, #1
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	4413      	add	r3, r2
 800a746:	2200      	movs	r2, #0
 800a748:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	3301      	adds	r3, #1
 800a74e:	75fb      	strb	r3, [r7, #23]
 800a750:	7dfa      	ldrb	r2, [r7, #23]
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	429a      	cmp	r2, r3
 800a756:	d3d3      	bcc.n	800a700 <IntToUnicode+0x18>
  }
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	371c      	adds	r7, #28
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
	...

0800a768 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b0ac      	sub	sp, #176	; 0xb0
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a770:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	605a      	str	r2, [r3, #4]
 800a77a:	609a      	str	r2, [r3, #8]
 800a77c:	60da      	str	r2, [r3, #12]
 800a77e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a780:	f107 0318 	add.w	r3, r7, #24
 800a784:	2284      	movs	r2, #132	; 0x84
 800a786:	2100      	movs	r1, #0
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 fd2d 	bl	800b1e8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a796:	d161      	bne.n	800a85c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a798:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a79c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a7a4:	f107 0318 	add.w	r3, r7, #24
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7f8 ff91 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a7b4:	f7f6 f800 	bl	80007b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a7b8:	4b2a      	ldr	r3, [pc, #168]	; (800a864 <HAL_PCD_MspInit+0xfc>)
 800a7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7bc:	4a29      	ldr	r2, [pc, #164]	; (800a864 <HAL_PCD_MspInit+0xfc>)
 800a7be:	f043 0301 	orr.w	r3, r3, #1
 800a7c2:	6313      	str	r3, [r2, #48]	; 0x30
 800a7c4:	4b27      	ldr	r3, [pc, #156]	; (800a864 <HAL_PCD_MspInit+0xfc>)
 800a7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c8:	f003 0301 	and.w	r3, r3, #1
 800a7cc:	617b      	str	r3, [r7, #20]
 800a7ce:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a7d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a7d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7d8:	2302      	movs	r3, #2
 800a7da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a7ea:	230a      	movs	r3, #10
 800a7ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	481c      	ldr	r0, [pc, #112]	; (800a868 <HAL_PCD_MspInit+0x100>)
 800a7f8:	f7f6 febe 	bl	8001578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a7fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a804:	2300      	movs	r3, #0
 800a806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a814:	4619      	mov	r1, r3
 800a816:	4814      	ldr	r0, [pc, #80]	; (800a868 <HAL_PCD_MspInit+0x100>)
 800a818:	f7f6 feae 	bl	8001578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a81c:	4b11      	ldr	r3, [pc, #68]	; (800a864 <HAL_PCD_MspInit+0xfc>)
 800a81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a820:	4a10      	ldr	r2, [pc, #64]	; (800a864 <HAL_PCD_MspInit+0xfc>)
 800a822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a826:	6353      	str	r3, [r2, #52]	; 0x34
 800a828:	4b0e      	ldr	r3, [pc, #56]	; (800a864 <HAL_PCD_MspInit+0xfc>)
 800a82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a830:	613b      	str	r3, [r7, #16]
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <HAL_PCD_MspInit+0xfc>)
 800a836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a838:	4a0a      	ldr	r2, [pc, #40]	; (800a864 <HAL_PCD_MspInit+0xfc>)
 800a83a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a83e:	6453      	str	r3, [r2, #68]	; 0x44
 800a840:	4b08      	ldr	r3, [pc, #32]	; (800a864 <HAL_PCD_MspInit+0xfc>)
 800a842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a84c:	2200      	movs	r2, #0
 800a84e:	2105      	movs	r1, #5
 800a850:	2043      	movs	r0, #67	; 0x43
 800a852:	f7f6 fc69 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a856:	2043      	movs	r0, #67	; 0x43
 800a858:	f7f6 fc82 	bl	8001160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a85c:	bf00      	nop
 800a85e:	37b0      	adds	r7, #176	; 0xb0
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	40023800 	.word	0x40023800
 800a868:	40020000 	.word	0x40020000

0800a86c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a880:	4619      	mov	r1, r3
 800a882:	4610      	mov	r0, r2
 800a884:	f7fe fc50 	bl	8009128 <USBD_LL_SetupStage>
}
 800a888:	bf00      	nop
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	460b      	mov	r3, r1
 800a89a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a8a2:	78fa      	ldrb	r2, [r7, #3]
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	00db      	lsls	r3, r3, #3
 800a8aa:	1a9b      	subs	r3, r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	440b      	add	r3, r1
 800a8b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	78fb      	ldrb	r3, [r7, #3]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	f7fe fc8a 	bl	80091d2 <USBD_LL_DataOutStage>
}
 800a8be:	bf00      	nop
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b082      	sub	sp, #8
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800a8d8:	78fa      	ldrb	r2, [r7, #3]
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	1a9b      	subs	r3, r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	440b      	add	r3, r1
 800a8e6:	3348      	adds	r3, #72	; 0x48
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	f7fe fcd3 	bl	8009298 <USBD_LL_DataInStage>
}
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fe fdd7 	bl	80094bc <USBD_LL_SOF>
}
 800a90e:	bf00      	nop
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a91e:	2301      	movs	r3, #1
 800a920:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d102      	bne.n	800a930 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a92a:	2300      	movs	r3, #0
 800a92c:	73fb      	strb	r3, [r7, #15]
 800a92e:	e008      	b.n	800a942 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	2b02      	cmp	r3, #2
 800a936:	d102      	bne.n	800a93e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a938:	2301      	movs	r3, #1
 800a93a:	73fb      	strb	r3, [r7, #15]
 800a93c:	e001      	b.n	800a942 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a93e:	f7f5 ff3b 	bl	80007b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a948:	7bfa      	ldrb	r2, [r7, #15]
 800a94a:	4611      	mov	r1, r2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fe fd7a 	bl	8009446 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fe fd33 	bl	80093c4 <USBD_LL_Reset>
}
 800a95e:	bf00      	nop
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a976:	4618      	mov	r0, r3
 800a978:	f7fe fd75 	bl	8009466 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6812      	ldr	r2, [r2, #0]
 800a98a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a98e:	f043 0301 	orr.w	r3, r3, #1
 800a992:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a1b      	ldr	r3, [r3, #32]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d005      	beq.n	800a9a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a99c:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <HAL_PCD_SuspendCallback+0x48>)
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	4a03      	ldr	r2, [pc, #12]	; (800a9b0 <HAL_PCD_SuspendCallback+0x48>)
 800a9a2:	f043 0306 	orr.w	r3, r3, #6
 800a9a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a9a8:	bf00      	nop
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	e000ed00 	.word	0xe000ed00

0800a9b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fe fd64 	bl	8009490 <USBD_LL_Resume>
}
 800a9c8:	bf00      	nop
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a9e2:	78fa      	ldrb	r2, [r7, #3]
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fe fd8f 	bl	800950a <USBD_LL_IsoOUTIncomplete>
}
 800a9ec:	bf00      	nop
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa06:	78fa      	ldrb	r2, [r7, #3]
 800aa08:	4611      	mov	r1, r2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fe fd70 	bl	80094f0 <USBD_LL_IsoINIncomplete>
}
 800aa10:	bf00      	nop
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe fd7c 	bl	8009524 <USBD_LL_DevConnected>
}
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fd79 	bl	800953a <USBD_LL_DevDisconnected>
}
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d13c      	bne.n	800aada <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aa60:	4a20      	ldr	r2, [pc, #128]	; (800aae4 <USBD_LL_Init+0x94>)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a1e      	ldr	r2, [pc, #120]	; (800aae4 <USBD_LL_Init+0x94>)
 800aa6c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa70:	4b1c      	ldr	r3, [pc, #112]	; (800aae4 <USBD_LL_Init+0x94>)
 800aa72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aa76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800aa78:	4b1a      	ldr	r3, [pc, #104]	; (800aae4 <USBD_LL_Init+0x94>)
 800aa7a:	2206      	movs	r2, #6
 800aa7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aa7e:	4b19      	ldr	r3, [pc, #100]	; (800aae4 <USBD_LL_Init+0x94>)
 800aa80:	2202      	movs	r2, #2
 800aa82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aa84:	4b17      	ldr	r3, [pc, #92]	; (800aae4 <USBD_LL_Init+0x94>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aa8a:	4b16      	ldr	r3, [pc, #88]	; (800aae4 <USBD_LL_Init+0x94>)
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800aa90:	4b14      	ldr	r3, [pc, #80]	; (800aae4 <USBD_LL_Init+0x94>)
 800aa92:	2201      	movs	r2, #1
 800aa94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aa96:	4b13      	ldr	r3, [pc, #76]	; (800aae4 <USBD_LL_Init+0x94>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aa9c:	4b11      	ldr	r3, [pc, #68]	; (800aae4 <USBD_LL_Init+0x94>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800aaa2:	4b10      	ldr	r3, [pc, #64]	; (800aae4 <USBD_LL_Init+0x94>)
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aaa8:	4b0e      	ldr	r3, [pc, #56]	; (800aae4 <USBD_LL_Init+0x94>)
 800aaaa:	2200      	movs	r2, #0
 800aaac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aaae:	480d      	ldr	r0, [pc, #52]	; (800aae4 <USBD_LL_Init+0x94>)
 800aab0:	f7f6 ff27 	bl	8001902 <HAL_PCD_Init>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800aaba:	f7f5 fe7d 	bl	80007b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aabe:	2180      	movs	r1, #128	; 0x80
 800aac0:	4808      	ldr	r0, [pc, #32]	; (800aae4 <USBD_LL_Init+0x94>)
 800aac2:	f7f8 f898 	bl	8002bf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aac6:	2240      	movs	r2, #64	; 0x40
 800aac8:	2100      	movs	r1, #0
 800aaca:	4806      	ldr	r0, [pc, #24]	; (800aae4 <USBD_LL_Init+0x94>)
 800aacc:	f7f8 f84c 	bl	8002b68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aad0:	2280      	movs	r2, #128	; 0x80
 800aad2:	2101      	movs	r1, #1
 800aad4:	4803      	ldr	r0, [pc, #12]	; (800aae4 <USBD_LL_Init+0x94>)
 800aad6:	f7f8 f847 	bl	8002b68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	20005b68 	.word	0x20005b68

0800aae8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7f7 f823 	bl	8001b4a <HAL_PCD_Start>
 800ab04:	4603      	mov	r3, r0
 800ab06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 f97e 	bl	800ae0c <USBD_Get_USB_Status>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
 800ab26:	4608      	mov	r0, r1
 800ab28:	4611      	mov	r1, r2
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	70fb      	strb	r3, [r7, #3]
 800ab30:	460b      	mov	r3, r1
 800ab32:	70bb      	strb	r3, [r7, #2]
 800ab34:	4613      	mov	r3, r2
 800ab36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ab46:	78bb      	ldrb	r3, [r7, #2]
 800ab48:	883a      	ldrh	r2, [r7, #0]
 800ab4a:	78f9      	ldrb	r1, [r7, #3]
 800ab4c:	f7f7 fc13 	bl	8002376 <HAL_PCD_EP_Open>
 800ab50:	4603      	mov	r3, r0
 800ab52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 f958 	bl	800ae0c <USBD_Get_USB_Status>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
 800ab72:	460b      	mov	r3, r1
 800ab74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab84:	78fa      	ldrb	r2, [r7, #3]
 800ab86:	4611      	mov	r1, r2
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7f7 fc5c 	bl	8002446 <HAL_PCD_EP_Close>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab92:	7bfb      	ldrb	r3, [r7, #15]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 f939 	bl	800ae0c <USBD_Get_USB_Status>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800abc2:	78fa      	ldrb	r2, [r7, #3]
 800abc4:	4611      	mov	r1, r2
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7f7 fd34 	bl	8002634 <HAL_PCD_EP_SetStall>
 800abcc:	4603      	mov	r3, r0
 800abce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 f91a 	bl	800ae0c <USBD_Get_USB_Status>
 800abd8:	4603      	mov	r3, r0
 800abda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b084      	sub	sp, #16
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	460b      	mov	r3, r1
 800abf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf6:	2300      	movs	r3, #0
 800abf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac00:	78fa      	ldrb	r2, [r7, #3]
 800ac02:	4611      	mov	r1, r2
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7f7 fd79 	bl	80026fc <HAL_PCD_EP_ClrStall>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 f8fb 	bl	800ae0c <USBD_Get_USB_Status>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	da0b      	bge.n	800ac58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac46:	68f9      	ldr	r1, [r7, #12]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	1a9b      	subs	r3, r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	440b      	add	r3, r1
 800ac52:	333e      	adds	r3, #62	; 0x3e
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	e00b      	b.n	800ac70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac58:	78fb      	ldrb	r3, [r7, #3]
 800ac5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac5e:	68f9      	ldr	r1, [r7, #12]
 800ac60:	4613      	mov	r3, r2
 800ac62:	00db      	lsls	r3, r3, #3
 800ac64:	1a9b      	subs	r3, r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	440b      	add	r3, r1
 800ac6a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac96:	78fa      	ldrb	r2, [r7, #3]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7f7 fb46 	bl	800232c <HAL_PCD_SetAddress>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 f8b0 	bl	800ae0c <USBD_Get_USB_Status>
 800acac:	4603      	mov	r3, r0
 800acae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b086      	sub	sp, #24
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	60f8      	str	r0, [r7, #12]
 800acc2:	607a      	str	r2, [r7, #4]
 800acc4:	603b      	str	r3, [r7, #0]
 800acc6:	460b      	mov	r3, r1
 800acc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800acd8:	7af9      	ldrb	r1, [r7, #11]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	f7f7 fc5f 	bl	80025a0 <HAL_PCD_EP_Transmit>
 800ace2:	4603      	mov	r3, r0
 800ace4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 f88f 	bl	800ae0c <USBD_Get_USB_Status>
 800acee:	4603      	mov	r3, r0
 800acf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	607a      	str	r2, [r7, #4]
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad10:	2300      	movs	r3, #0
 800ad12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ad1a:	7af9      	ldrb	r1, [r7, #11]
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	f7f7 fbdb 	bl	80024da <HAL_PCD_EP_Receive>
 800ad24:	4603      	mov	r3, r0
 800ad26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 f86e 	bl	800ae0c <USBD_Get_USB_Status>
 800ad30:	4603      	mov	r3, r0
 800ad32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad34:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3718      	adds	r7, #24
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b082      	sub	sp, #8
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
 800ad46:	460b      	mov	r3, r1
 800ad48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ad50:	78fa      	ldrb	r2, [r7, #3]
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7f7 fc0b 	bl	8002570 <HAL_PCD_EP_GetRxCount>
 800ad5a:	4603      	mov	r3, r0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <HAL_PCDEx_LPM_Callback+0x18>
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d01f      	beq.n	800adba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ad7a:	e03b      	b.n	800adf4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d007      	beq.n	800ad94 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ad84:	f000 f83c 	bl	800ae00 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad88:	4b1c      	ldr	r3, [pc, #112]	; (800adfc <HAL_PCDEx_LPM_Callback+0x98>)
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	4a1b      	ldr	r2, [pc, #108]	; (800adfc <HAL_PCDEx_LPM_Callback+0x98>)
 800ad8e:	f023 0306 	bic.w	r3, r3, #6
 800ad92:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	6812      	ldr	r2, [r2, #0]
 800ada2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ada6:	f023 0301 	bic.w	r3, r3, #1
 800adaa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fe fb6c 	bl	8009490 <USBD_LL_Resume>
    break;
 800adb8:	e01c      	b.n	800adf4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	6812      	ldr	r2, [r2, #0]
 800adc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800adcc:	f043 0301 	orr.w	r3, r3, #1
 800add0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800add8:	4618      	mov	r0, r3
 800adda:	f7fe fb44 	bl	8009466 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d005      	beq.n	800adf2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ade6:	4b05      	ldr	r3, [pc, #20]	; (800adfc <HAL_PCDEx_LPM_Callback+0x98>)
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	4a04      	ldr	r2, [pc, #16]	; (800adfc <HAL_PCDEx_LPM_Callback+0x98>)
 800adec:	f043 0306 	orr.w	r3, r3, #6
 800adf0:	6113      	str	r3, [r2, #16]
    break;
 800adf2:	bf00      	nop
}
 800adf4:	bf00      	nop
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	e000ed00 	.word	0xe000ed00

0800ae00 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ae04:	f7f5 fb98 	bl	8000538 <SystemClock_Config>
}
 800ae08:	bf00      	nop
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae1a:	79fb      	ldrb	r3, [r7, #7]
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d817      	bhi.n	800ae50 <USBD_Get_USB_Status+0x44>
 800ae20:	a201      	add	r2, pc, #4	; (adr r2, 800ae28 <USBD_Get_USB_Status+0x1c>)
 800ae22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae26:	bf00      	nop
 800ae28:	0800ae39 	.word	0x0800ae39
 800ae2c:	0800ae3f 	.word	0x0800ae3f
 800ae30:	0800ae45 	.word	0x0800ae45
 800ae34:	0800ae4b 	.word	0x0800ae4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae3c:	e00b      	b.n	800ae56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	73fb      	strb	r3, [r7, #15]
    break;
 800ae42:	e008      	b.n	800ae56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae44:	2301      	movs	r3, #1
 800ae46:	73fb      	strb	r3, [r7, #15]
    break;
 800ae48:	e005      	b.n	800ae56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae4e:	e002      	b.n	800ae56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae50:	2303      	movs	r3, #3
 800ae52:	73fb      	strb	r3, [r7, #15]
    break;
 800ae54:	bf00      	nop
  }
  return usb_status;
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <COBS_enCode>:
   @param	ptr: pointer to a buff with data to encode.
   @param	length: size of the buff to be encoded, pointed by ptr.
   @param   dst: pointer to a buff that will hold the decoded data.
   @return Returns the length of the encoded data.
**/
size_t COBS_enCode(const uint8_t *ptr, size_t length, uint8_t *dst) {
 800ae64:	b480      	push	{r7}
 800ae66:	b08b      	sub	sp, #44	; 0x2c
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
    uint8_t code;
	const uint8_t *start = dst;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	61fb      	str	r3, [r7, #28]
    const uint8_t *end = ptr + length;
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	4413      	add	r3, r2
 800ae7a:	61bb      	str	r3, [r7, #24]
    uint8_t *code_ptr;   // Where to insert the leading count

    StartBlock();
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	607a      	str	r2, [r7, #4]
 800ae82:	623b      	str	r3, [r7, #32]
 800ae84:	2301      	movs	r3, #1
 800ae86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (ptr < end) {
 800ae8a:	e021      	b.n	800aed0 <COBS_enCode+0x6c>
        if (code != 0xFF) {
 800ae8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae90:	2bff      	cmp	r3, #255	; 0xff
 800ae92:	d012      	beq.n	800aeba <COBS_enCode+0x56>
            uint8_t c = *ptr++;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	1c5a      	adds	r2, r3, #1
 800ae98:	60fa      	str	r2, [r7, #12]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	75fb      	strb	r3, [r7, #23]
            if (c != 0) {
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00a      	beq.n	800aeba <COBS_enCode+0x56>
				*dst++ = c;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	1c5a      	adds	r2, r3, #1
 800aea8:	607a      	str	r2, [r7, #4]
 800aeaa:	7dfa      	ldrb	r2, [r7, #23]
 800aeac:	701a      	strb	r2, [r3, #0]
				code++;
 800aeae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				continue;
 800aeb8:	e00a      	b.n	800aed0 <COBS_enCode+0x6c>
			}
		}
		FinishBlock();
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aec0:	701a      	strb	r2, [r3, #0]
		StartBlock();
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	1c5a      	adds	r2, r3, #1
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	623b      	str	r3, [r7, #32]
 800aeca:	2301      	movs	r3, #1
 800aecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (ptr < end) {
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d3d9      	bcc.n	800ae8c <COBS_enCode+0x28>
	}
	FinishBlock();
 800aed8:	6a3b      	ldr	r3, [r7, #32]
 800aeda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800aede:	701a      	strb	r2, [r3, #0]
	return  dst - start;
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	1ad3      	subs	r3, r2, r3
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	372c      	adds	r7, #44	; 0x2c
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <COBS_deCode>:
   @param	pSrcBuff: pointer to a buff with encode data.
   @param	srcBuffLen: size of the buff to be decoded, pointed by pSrcBuff.
   @param	pDstBuff: pointer to a buff that will hold the decoded data.
   @return	returns the srcBuffLen of the decoded data (which is guaranteed to be <= srcBuffLen).
 */
size_t COBS_deCode(const uint8_t *pSrcBuff, size_t srcBuffLen, uint8_t *pDstBuff) {
 800aef2:	b480      	push	{r7}
 800aef4:	b089      	sub	sp, #36	; 0x24
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	60f8      	str	r0, [r7, #12]
 800aefa:	60b9      	str	r1, [r7, #8]
 800aefc:	607a      	str	r2, [r7, #4]
	const uint8_t *start = pDstBuff;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	61bb      	str	r3, [r7, #24]
    const uint8_t   *end = pSrcBuff + srcBuffLen;
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	4413      	add	r3, r2
 800af08:	617b      	str	r3, [r7, #20]
	uint8_t code = 0xFF;
 800af0a:	23ff      	movs	r3, #255	; 0xff
 800af0c:	77fb      	strb	r3, [r7, #31]
    uint8_t copy = 0x00;
 800af0e:	2300      	movs	r3, #0
 800af10:	77bb      	strb	r3, [r7, #30]

	for (; pSrcBuff < end; copy--) {
 800af12:	e020      	b.n	800af56 <COBS_deCode+0x64>
		if (copy != 0) {
 800af14:	7fbb      	ldrb	r3, [r7, #30]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d008      	beq.n	800af2c <COBS_deCode+0x3a>
			*pDstBuff++ = *pSrcBuff++;
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	1c53      	adds	r3, r2, #1
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	1c59      	adds	r1, r3, #1
 800af24:	6079      	str	r1, [r7, #4]
 800af26:	7812      	ldrb	r2, [r2, #0]
 800af28:	701a      	strb	r2, [r3, #0]
 800af2a:	e011      	b.n	800af50 <COBS_deCode+0x5e>
		}
        else {
    		if (code != 0xFF) {
 800af2c:	7ffb      	ldrb	r3, [r7, #31]
 800af2e:	2bff      	cmp	r3, #255	; 0xff
 800af30:	d004      	beq.n	800af3c <COBS_deCode+0x4a>
    			*pDstBuff++ = 0;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	1c5a      	adds	r2, r3, #1
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	701a      	strb	r2, [r3, #0]
    		}
    		copy = code = *pSrcBuff++;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	60fa      	str	r2, [r7, #12]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	77fb      	strb	r3, [r7, #31]
 800af46:	7ffb      	ldrb	r3, [r7, #31]
 800af48:	77bb      	strb	r3, [r7, #30]
    		if (code == 0) {
 800af4a:	7ffb      	ldrb	r3, [r7, #31]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d007      	beq.n	800af60 <COBS_deCode+0x6e>
	for (; pSrcBuff < end; copy--) {
 800af50:	7fbb      	ldrb	r3, [r7, #30]
 800af52:	3b01      	subs	r3, #1
 800af54:	77bb      	strb	r3, [r7, #30]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d3da      	bcc.n	800af14 <COBS_deCode+0x22>
 800af5e:	e000      	b.n	800af62 <COBS_deCode+0x70>
    			break; /* Source length too long */
 800af60:	bf00      	nop
    		}
		}
	}
	return pDstBuff - start;
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	1ad3      	subs	r3, r2, r3
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3724      	adds	r7, #36	; 0x24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800af88:	429a      	cmp	r2, r3
 800af8a:	bf0c      	ite	eq
 800af8c:	2301      	moveq	r3, #1
 800af8e:	2300      	movne	r3, #0
 800af90:	b2db      	uxtb	r3, r3
}
 800af92:	4618      	mov	r0, r3
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 800af9e:	b480      	push	{r7}
 800afa0:	b083      	sub	sp, #12
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800afbe:	4293      	cmp	r3, r2
 800afc0:	bf0c      	ite	eq
 800afc2:	2301      	moveq	r3, #1
 800afc4:	2300      	movne	r3, #0
 800afc6:	b2db      	uxtb	r3, r3
}
 800afc8:	4618      	mov	r0, r3
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <ring_buffer_num_items>:
/**
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer) {
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	b29b      	uxth	r3, r3
 800afec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aff0:	b29b      	uxth	r3, r3
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	370c      	adds	r7, #12
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr

0800affe <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 800affe:	b480      	push	{r7}
 800b000:	b083      	sub	sp, #12
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  buffer->head_index = 0;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
}
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, uint8_t data) {
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f7ff ffb5 	bl	800af9e <ring_buffer_is_full>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00a      	beq.n	800b050 <ring_buffer_queue+0x2e>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800b040:	3301      	adds	r3, #1
 800b042:	b29b      	uxth	r3, r3
 800b044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b048:	b29a      	uxth	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800b056:	4619      	mov	r1, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	78fa      	ldrb	r2, [r7, #3]
 800b05c:	545a      	strb	r2, [r3, r1]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800b064:	3301      	adds	r3, #1
 800b066:	b29b      	uxth	r3, r3
 800b068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
}
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const uint8_t *data, ring_buffer_size_t size) {
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	4613      	mov	r3, r2
 800b088:	80fb      	strh	r3, [r7, #6]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 800b08a:	2300      	movs	r3, #0
 800b08c:	82fb      	strh	r3, [r7, #22]
 800b08e:	e00a      	b.n	800b0a6 <ring_buffer_queue_arr+0x2a>
    ring_buffer_queue(buffer, data[i]);
 800b090:	8afb      	ldrh	r3, [r7, #22]
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	4413      	add	r3, r2
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	4619      	mov	r1, r3
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f7ff ffc1 	bl	800b022 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 800b0a0:	8afb      	ldrh	r3, [r7, #22]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	82fb      	strh	r3, [r7, #22]
 800b0a6:	8afa      	ldrh	r2, [r7, #22]
 800b0a8:	88fb      	ldrh	r3, [r7, #6]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d3f0      	bcc.n	800b090 <ring_buffer_queue_arr+0x14>
  }
}
 800b0ae:	bf00      	nop
 800b0b0:	bf00      	nop
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, uint8_t *data) {
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7ff ff56 	bl	800af74 <ring_buffer_is_empty>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d001      	beq.n	800b0d2 <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	e013      	b.n	800b0fa <ring_buffer_dequeue+0x42>
  }

  *data = buffer->buffer[buffer->tail_index];
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800b0d8:	461a      	mov	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	5c9a      	ldrb	r2, [r3, r2]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  return 1;
 800b0f8:	2301      	movs	r3, #1
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, uint8_t *data, ring_buffer_size_t len) {
 800b102:	b580      	push	{r7, lr}
 800b104:	b086      	sub	sp, #24
 800b106:	af00      	add	r7, sp, #0
 800b108:	60f8      	str	r0, [r7, #12]
 800b10a:	60b9      	str	r1, [r7, #8]
 800b10c:	4613      	mov	r3, r2
 800b10e:	80fb      	strh	r3, [r7, #6]
  if(ring_buffer_is_empty(buffer)) {
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	f7ff ff2f 	bl	800af74 <ring_buffer_is_empty>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d001      	beq.n	800b120 <ring_buffer_dequeue_arr+0x1e>
    /* No items */
    return 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	e016      	b.n	800b14e <ring_buffer_dequeue_arr+0x4c>
  }

  uint8_t *data_ptr = data;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 800b124:	2300      	movs	r3, #0
 800b126:	827b      	strh	r3, [r7, #18]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 800b128:	e005      	b.n	800b136 <ring_buffer_dequeue_arr+0x34>
    cnt++;
 800b12a:	8a7b      	ldrh	r3, [r7, #18]
 800b12c:	3301      	adds	r3, #1
 800b12e:	827b      	strh	r3, [r7, #18]
    data_ptr++;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	3301      	adds	r3, #1
 800b134:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 800b136:	8a7a      	ldrh	r2, [r7, #18]
 800b138:	88fb      	ldrh	r3, [r7, #6]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d206      	bcs.n	800b14c <ring_buffer_dequeue_arr+0x4a>
 800b13e:	6979      	ldr	r1, [r7, #20]
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f7ff ffb9 	bl	800b0b8 <ring_buffer_dequeue>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1ee      	bne.n	800b12a <ring_buffer_dequeue_arr+0x28>
  }
  return cnt;
 800b14c:	8a7b      	ldrh	r3, [r7, #18]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <__errno>:
 800b158:	4b01      	ldr	r3, [pc, #4]	; (800b160 <__errno+0x8>)
 800b15a:	6818      	ldr	r0, [r3, #0]
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	2000019c 	.word	0x2000019c

0800b164 <__libc_init_array>:
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	4d0d      	ldr	r5, [pc, #52]	; (800b19c <__libc_init_array+0x38>)
 800b168:	4c0d      	ldr	r4, [pc, #52]	; (800b1a0 <__libc_init_array+0x3c>)
 800b16a:	1b64      	subs	r4, r4, r5
 800b16c:	10a4      	asrs	r4, r4, #2
 800b16e:	2600      	movs	r6, #0
 800b170:	42a6      	cmp	r6, r4
 800b172:	d109      	bne.n	800b188 <__libc_init_array+0x24>
 800b174:	4d0b      	ldr	r5, [pc, #44]	; (800b1a4 <__libc_init_array+0x40>)
 800b176:	4c0c      	ldr	r4, [pc, #48]	; (800b1a8 <__libc_init_array+0x44>)
 800b178:	f000 f93c 	bl	800b3f4 <_init>
 800b17c:	1b64      	subs	r4, r4, r5
 800b17e:	10a4      	asrs	r4, r4, #2
 800b180:	2600      	movs	r6, #0
 800b182:	42a6      	cmp	r6, r4
 800b184:	d105      	bne.n	800b192 <__libc_init_array+0x2e>
 800b186:	bd70      	pop	{r4, r5, r6, pc}
 800b188:	f855 3b04 	ldr.w	r3, [r5], #4
 800b18c:	4798      	blx	r3
 800b18e:	3601      	adds	r6, #1
 800b190:	e7ee      	b.n	800b170 <__libc_init_array+0xc>
 800b192:	f855 3b04 	ldr.w	r3, [r5], #4
 800b196:	4798      	blx	r3
 800b198:	3601      	adds	r6, #1
 800b19a:	e7f2      	b.n	800b182 <__libc_init_array+0x1e>
 800b19c:	0800d02c 	.word	0x0800d02c
 800b1a0:	0800d02c 	.word	0x0800d02c
 800b1a4:	0800d02c 	.word	0x0800d02c
 800b1a8:	0800d030 	.word	0x0800d030

0800b1ac <malloc>:
 800b1ac:	4b02      	ldr	r3, [pc, #8]	; (800b1b8 <malloc+0xc>)
 800b1ae:	4601      	mov	r1, r0
 800b1b0:	6818      	ldr	r0, [r3, #0]
 800b1b2:	f000 b88d 	b.w	800b2d0 <_malloc_r>
 800b1b6:	bf00      	nop
 800b1b8:	2000019c 	.word	0x2000019c

0800b1bc <free>:
 800b1bc:	4b02      	ldr	r3, [pc, #8]	; (800b1c8 <free+0xc>)
 800b1be:	4601      	mov	r1, r0
 800b1c0:	6818      	ldr	r0, [r3, #0]
 800b1c2:	f000 b819 	b.w	800b1f8 <_free_r>
 800b1c6:	bf00      	nop
 800b1c8:	2000019c 	.word	0x2000019c

0800b1cc <memcpy>:
 800b1cc:	440a      	add	r2, r1
 800b1ce:	4291      	cmp	r1, r2
 800b1d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1d4:	d100      	bne.n	800b1d8 <memcpy+0xc>
 800b1d6:	4770      	bx	lr
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1e2:	4291      	cmp	r1, r2
 800b1e4:	d1f9      	bne.n	800b1da <memcpy+0xe>
 800b1e6:	bd10      	pop	{r4, pc}

0800b1e8 <memset>:
 800b1e8:	4402      	add	r2, r0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d100      	bne.n	800b1f2 <memset+0xa>
 800b1f0:	4770      	bx	lr
 800b1f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1f6:	e7f9      	b.n	800b1ec <memset+0x4>

0800b1f8 <_free_r>:
 800b1f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1fa:	2900      	cmp	r1, #0
 800b1fc:	d044      	beq.n	800b288 <_free_r+0x90>
 800b1fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b202:	9001      	str	r0, [sp, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	f1a1 0404 	sub.w	r4, r1, #4
 800b20a:	bfb8      	it	lt
 800b20c:	18e4      	addlt	r4, r4, r3
 800b20e:	f000 f8e3 	bl	800b3d8 <__malloc_lock>
 800b212:	4a1e      	ldr	r2, [pc, #120]	; (800b28c <_free_r+0x94>)
 800b214:	9801      	ldr	r0, [sp, #4]
 800b216:	6813      	ldr	r3, [r2, #0]
 800b218:	b933      	cbnz	r3, 800b228 <_free_r+0x30>
 800b21a:	6063      	str	r3, [r4, #4]
 800b21c:	6014      	str	r4, [r2, #0]
 800b21e:	b003      	add	sp, #12
 800b220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b224:	f000 b8de 	b.w	800b3e4 <__malloc_unlock>
 800b228:	42a3      	cmp	r3, r4
 800b22a:	d908      	bls.n	800b23e <_free_r+0x46>
 800b22c:	6825      	ldr	r5, [r4, #0]
 800b22e:	1961      	adds	r1, r4, r5
 800b230:	428b      	cmp	r3, r1
 800b232:	bf01      	itttt	eq
 800b234:	6819      	ldreq	r1, [r3, #0]
 800b236:	685b      	ldreq	r3, [r3, #4]
 800b238:	1949      	addeq	r1, r1, r5
 800b23a:	6021      	streq	r1, [r4, #0]
 800b23c:	e7ed      	b.n	800b21a <_free_r+0x22>
 800b23e:	461a      	mov	r2, r3
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	b10b      	cbz	r3, 800b248 <_free_r+0x50>
 800b244:	42a3      	cmp	r3, r4
 800b246:	d9fa      	bls.n	800b23e <_free_r+0x46>
 800b248:	6811      	ldr	r1, [r2, #0]
 800b24a:	1855      	adds	r5, r2, r1
 800b24c:	42a5      	cmp	r5, r4
 800b24e:	d10b      	bne.n	800b268 <_free_r+0x70>
 800b250:	6824      	ldr	r4, [r4, #0]
 800b252:	4421      	add	r1, r4
 800b254:	1854      	adds	r4, r2, r1
 800b256:	42a3      	cmp	r3, r4
 800b258:	6011      	str	r1, [r2, #0]
 800b25a:	d1e0      	bne.n	800b21e <_free_r+0x26>
 800b25c:	681c      	ldr	r4, [r3, #0]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	6053      	str	r3, [r2, #4]
 800b262:	4421      	add	r1, r4
 800b264:	6011      	str	r1, [r2, #0]
 800b266:	e7da      	b.n	800b21e <_free_r+0x26>
 800b268:	d902      	bls.n	800b270 <_free_r+0x78>
 800b26a:	230c      	movs	r3, #12
 800b26c:	6003      	str	r3, [r0, #0]
 800b26e:	e7d6      	b.n	800b21e <_free_r+0x26>
 800b270:	6825      	ldr	r5, [r4, #0]
 800b272:	1961      	adds	r1, r4, r5
 800b274:	428b      	cmp	r3, r1
 800b276:	bf04      	itt	eq
 800b278:	6819      	ldreq	r1, [r3, #0]
 800b27a:	685b      	ldreq	r3, [r3, #4]
 800b27c:	6063      	str	r3, [r4, #4]
 800b27e:	bf04      	itt	eq
 800b280:	1949      	addeq	r1, r1, r5
 800b282:	6021      	streq	r1, [r4, #0]
 800b284:	6054      	str	r4, [r2, #4]
 800b286:	e7ca      	b.n	800b21e <_free_r+0x26>
 800b288:	b003      	add	sp, #12
 800b28a:	bd30      	pop	{r4, r5, pc}
 800b28c:	20005f6c 	.word	0x20005f6c

0800b290 <sbrk_aligned>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	4e0e      	ldr	r6, [pc, #56]	; (800b2cc <sbrk_aligned+0x3c>)
 800b294:	460c      	mov	r4, r1
 800b296:	6831      	ldr	r1, [r6, #0]
 800b298:	4605      	mov	r5, r0
 800b29a:	b911      	cbnz	r1, 800b2a2 <sbrk_aligned+0x12>
 800b29c:	f000 f88c 	bl	800b3b8 <_sbrk_r>
 800b2a0:	6030      	str	r0, [r6, #0]
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	f000 f887 	bl	800b3b8 <_sbrk_r>
 800b2aa:	1c43      	adds	r3, r0, #1
 800b2ac:	d00a      	beq.n	800b2c4 <sbrk_aligned+0x34>
 800b2ae:	1cc4      	adds	r4, r0, #3
 800b2b0:	f024 0403 	bic.w	r4, r4, #3
 800b2b4:	42a0      	cmp	r0, r4
 800b2b6:	d007      	beq.n	800b2c8 <sbrk_aligned+0x38>
 800b2b8:	1a21      	subs	r1, r4, r0
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	f000 f87c 	bl	800b3b8 <_sbrk_r>
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	d101      	bne.n	800b2c8 <sbrk_aligned+0x38>
 800b2c4:	f04f 34ff 	mov.w	r4, #4294967295
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	bd70      	pop	{r4, r5, r6, pc}
 800b2cc:	20005f70 	.word	0x20005f70

0800b2d0 <_malloc_r>:
 800b2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d4:	1ccd      	adds	r5, r1, #3
 800b2d6:	f025 0503 	bic.w	r5, r5, #3
 800b2da:	3508      	adds	r5, #8
 800b2dc:	2d0c      	cmp	r5, #12
 800b2de:	bf38      	it	cc
 800b2e0:	250c      	movcc	r5, #12
 800b2e2:	2d00      	cmp	r5, #0
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	db01      	blt.n	800b2ec <_malloc_r+0x1c>
 800b2e8:	42a9      	cmp	r1, r5
 800b2ea:	d905      	bls.n	800b2f8 <_malloc_r+0x28>
 800b2ec:	230c      	movs	r3, #12
 800b2ee:	603b      	str	r3, [r7, #0]
 800b2f0:	2600      	movs	r6, #0
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2f8:	4e2e      	ldr	r6, [pc, #184]	; (800b3b4 <_malloc_r+0xe4>)
 800b2fa:	f000 f86d 	bl	800b3d8 <__malloc_lock>
 800b2fe:	6833      	ldr	r3, [r6, #0]
 800b300:	461c      	mov	r4, r3
 800b302:	bb34      	cbnz	r4, 800b352 <_malloc_r+0x82>
 800b304:	4629      	mov	r1, r5
 800b306:	4638      	mov	r0, r7
 800b308:	f7ff ffc2 	bl	800b290 <sbrk_aligned>
 800b30c:	1c43      	adds	r3, r0, #1
 800b30e:	4604      	mov	r4, r0
 800b310:	d14d      	bne.n	800b3ae <_malloc_r+0xde>
 800b312:	6834      	ldr	r4, [r6, #0]
 800b314:	4626      	mov	r6, r4
 800b316:	2e00      	cmp	r6, #0
 800b318:	d140      	bne.n	800b39c <_malloc_r+0xcc>
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	4631      	mov	r1, r6
 800b31e:	4638      	mov	r0, r7
 800b320:	eb04 0803 	add.w	r8, r4, r3
 800b324:	f000 f848 	bl	800b3b8 <_sbrk_r>
 800b328:	4580      	cmp	r8, r0
 800b32a:	d13a      	bne.n	800b3a2 <_malloc_r+0xd2>
 800b32c:	6821      	ldr	r1, [r4, #0]
 800b32e:	3503      	adds	r5, #3
 800b330:	1a6d      	subs	r5, r5, r1
 800b332:	f025 0503 	bic.w	r5, r5, #3
 800b336:	3508      	adds	r5, #8
 800b338:	2d0c      	cmp	r5, #12
 800b33a:	bf38      	it	cc
 800b33c:	250c      	movcc	r5, #12
 800b33e:	4629      	mov	r1, r5
 800b340:	4638      	mov	r0, r7
 800b342:	f7ff ffa5 	bl	800b290 <sbrk_aligned>
 800b346:	3001      	adds	r0, #1
 800b348:	d02b      	beq.n	800b3a2 <_malloc_r+0xd2>
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	442b      	add	r3, r5
 800b34e:	6023      	str	r3, [r4, #0]
 800b350:	e00e      	b.n	800b370 <_malloc_r+0xa0>
 800b352:	6822      	ldr	r2, [r4, #0]
 800b354:	1b52      	subs	r2, r2, r5
 800b356:	d41e      	bmi.n	800b396 <_malloc_r+0xc6>
 800b358:	2a0b      	cmp	r2, #11
 800b35a:	d916      	bls.n	800b38a <_malloc_r+0xba>
 800b35c:	1961      	adds	r1, r4, r5
 800b35e:	42a3      	cmp	r3, r4
 800b360:	6025      	str	r5, [r4, #0]
 800b362:	bf18      	it	ne
 800b364:	6059      	strne	r1, [r3, #4]
 800b366:	6863      	ldr	r3, [r4, #4]
 800b368:	bf08      	it	eq
 800b36a:	6031      	streq	r1, [r6, #0]
 800b36c:	5162      	str	r2, [r4, r5]
 800b36e:	604b      	str	r3, [r1, #4]
 800b370:	4638      	mov	r0, r7
 800b372:	f104 060b 	add.w	r6, r4, #11
 800b376:	f000 f835 	bl	800b3e4 <__malloc_unlock>
 800b37a:	f026 0607 	bic.w	r6, r6, #7
 800b37e:	1d23      	adds	r3, r4, #4
 800b380:	1af2      	subs	r2, r6, r3
 800b382:	d0b6      	beq.n	800b2f2 <_malloc_r+0x22>
 800b384:	1b9b      	subs	r3, r3, r6
 800b386:	50a3      	str	r3, [r4, r2]
 800b388:	e7b3      	b.n	800b2f2 <_malloc_r+0x22>
 800b38a:	6862      	ldr	r2, [r4, #4]
 800b38c:	42a3      	cmp	r3, r4
 800b38e:	bf0c      	ite	eq
 800b390:	6032      	streq	r2, [r6, #0]
 800b392:	605a      	strne	r2, [r3, #4]
 800b394:	e7ec      	b.n	800b370 <_malloc_r+0xa0>
 800b396:	4623      	mov	r3, r4
 800b398:	6864      	ldr	r4, [r4, #4]
 800b39a:	e7b2      	b.n	800b302 <_malloc_r+0x32>
 800b39c:	4634      	mov	r4, r6
 800b39e:	6876      	ldr	r6, [r6, #4]
 800b3a0:	e7b9      	b.n	800b316 <_malloc_r+0x46>
 800b3a2:	230c      	movs	r3, #12
 800b3a4:	603b      	str	r3, [r7, #0]
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	f000 f81c 	bl	800b3e4 <__malloc_unlock>
 800b3ac:	e7a1      	b.n	800b2f2 <_malloc_r+0x22>
 800b3ae:	6025      	str	r5, [r4, #0]
 800b3b0:	e7de      	b.n	800b370 <_malloc_r+0xa0>
 800b3b2:	bf00      	nop
 800b3b4:	20005f6c 	.word	0x20005f6c

0800b3b8 <_sbrk_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4d06      	ldr	r5, [pc, #24]	; (800b3d4 <_sbrk_r+0x1c>)
 800b3bc:	2300      	movs	r3, #0
 800b3be:	4604      	mov	r4, r0
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	602b      	str	r3, [r5, #0]
 800b3c4:	f7f5 fac4 	bl	8000950 <_sbrk>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d102      	bne.n	800b3d2 <_sbrk_r+0x1a>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b103      	cbz	r3, 800b3d2 <_sbrk_r+0x1a>
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	20005f74 	.word	0x20005f74

0800b3d8 <__malloc_lock>:
 800b3d8:	4801      	ldr	r0, [pc, #4]	; (800b3e0 <__malloc_lock+0x8>)
 800b3da:	f000 b809 	b.w	800b3f0 <__retarget_lock_acquire_recursive>
 800b3de:	bf00      	nop
 800b3e0:	20005f78 	.word	0x20005f78

0800b3e4 <__malloc_unlock>:
 800b3e4:	4801      	ldr	r0, [pc, #4]	; (800b3ec <__malloc_unlock+0x8>)
 800b3e6:	f000 b804 	b.w	800b3f2 <__retarget_lock_release_recursive>
 800b3ea:	bf00      	nop
 800b3ec:	20005f78 	.word	0x20005f78

0800b3f0 <__retarget_lock_acquire_recursive>:
 800b3f0:	4770      	bx	lr

0800b3f2 <__retarget_lock_release_recursive>:
 800b3f2:	4770      	bx	lr

0800b3f4 <_init>:
 800b3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f6:	bf00      	nop
 800b3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3fa:	bc08      	pop	{r3}
 800b3fc:	469e      	mov	lr, r3
 800b3fe:	4770      	bx	lr

0800b400 <_fini>:
 800b400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b402:	bf00      	nop
 800b404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b406:	bc08      	pop	{r3}
 800b408:	469e      	mov	lr, r3
 800b40a:	4770      	bx	lr
